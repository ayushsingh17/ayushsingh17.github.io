{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.8"
    },
    "colab": {
      "name": "Project2_Classification_Group17_Raagni_Ayush.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ayushsingh17/ayushsingh17.github.io/blob/master/Employee%20Attrition%20-%20People%20Analytics%20-%20Classification%20v2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IOCL0OtPpsN5",
        "colab_type": "text"
      },
      "source": [
        "# Classification - Employee Attrition\n",
        "\n",
        "-------------------------------------------------------------------------------------------------------------------------------\n",
        "\n",
        "\n",
        "**DataSource:** https://www.kaggle.com/pavansubhasht/ibm-hr-analytics-attrition-dataset\n",
        "\n",
        "**Summary:** This is an employee dataset in which HR is interested to understand how different factors are affecting                        attrition among employees.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g_k-_DoMpsN6",
        "colab_type": "text"
      },
      "source": [
        "-------------------------------------------------------------------------------------------------------------------------------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yZHtBaP0psN7",
        "colab_type": "text"
      },
      "source": [
        "**Importing pandas and numpy library for data manipulation**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oGTrHoumpsN7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BgYm-wwGpsN-",
        "colab_type": "text"
      },
      "source": [
        "**Imporitng CSV file**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2W110wOzpsN_",
        "colab_type": "code",
        "outputId": "56d74bf7-742e-45ba-bd22-aa74e6fb5d7b",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 75
        }
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e0231460-10c5-47c0-8809-8473c01dc6d7\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-e0231460-10c5-47c0-8809-8473c01dc6d7\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving hr.csv to hr.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_dDlnE9LrPoz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import io\n",
        "df = pd.read_csv(io.BytesIO(uploaded['hr.csv']))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G6efgYmmpsOC",
        "colab_type": "text"
      },
      "source": [
        "**Viewing Data in the DataFrame**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4-chYaPWpsOD",
        "colab_type": "code",
        "outputId": "9fba4700-8c7e-40d0-b2ea-c5dd1356d97a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        }
      },
      "source": [
        "df.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Attrition</th>\n",
              "      <th>BusinessTravel</th>\n",
              "      <th>DailyRate</th>\n",
              "      <th>Department</th>\n",
              "      <th>DistanceFromHome</th>\n",
              "      <th>Education</th>\n",
              "      <th>EducationField</th>\n",
              "      <th>EmployeeCount</th>\n",
              "      <th>EmployeeNumber</th>\n",
              "      <th>EnvironmentSatisfaction</th>\n",
              "      <th>Gender</th>\n",
              "      <th>HourlyRate</th>\n",
              "      <th>JobInvolvement</th>\n",
              "      <th>JobLevel</th>\n",
              "      <th>JobRole</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>MonthlyRate</th>\n",
              "      <th>NumCompaniesWorked</th>\n",
              "      <th>Over18</th>\n",
              "      <th>OverTime</th>\n",
              "      <th>PercentSalaryHike</th>\n",
              "      <th>PerformanceRating</th>\n",
              "      <th>RelationshipSatisfaction</th>\n",
              "      <th>StandardHours</th>\n",
              "      <th>StockOptionLevel</th>\n",
              "      <th>TotalWorkingYears</th>\n",
              "      <th>TrainingTimesLastYear</th>\n",
              "      <th>WorkLifeBalance</th>\n",
              "      <th>YearsAtCompany</th>\n",
              "      <th>YearsInCurrentRole</th>\n",
              "      <th>YearsSinceLastPromotion</th>\n",
              "      <th>YearsWithCurrManager</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1102</td>\n",
              "      <td>Sales</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>Female</td>\n",
              "      <td>94</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>Sales Executive</td>\n",
              "      <td>4</td>\n",
              "      <td>Single</td>\n",
              "      <td>5993</td>\n",
              "      <td>19479</td>\n",
              "      <td>8</td>\n",
              "      <td>Y</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>279</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>61</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Research Scientist</td>\n",
              "      <td>2</td>\n",
              "      <td>Married</td>\n",
              "      <td>5130</td>\n",
              "      <td>24907</td>\n",
              "      <td>1</td>\n",
              "      <td>Y</td>\n",
              "      <td>No</td>\n",
              "      <td>23</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>80</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1373</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Other</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>92</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>3</td>\n",
              "      <td>Single</td>\n",
              "      <td>2090</td>\n",
              "      <td>2396</td>\n",
              "      <td>6</td>\n",
              "      <td>Y</td>\n",
              "      <td>Yes</td>\n",
              "      <td>15</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>1392</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>56</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Research Scientist</td>\n",
              "      <td>3</td>\n",
              "      <td>Married</td>\n",
              "      <td>2909</td>\n",
              "      <td>23159</td>\n",
              "      <td>1</td>\n",
              "      <td>Y</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>27</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>591</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Medical</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>40</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>2</td>\n",
              "      <td>Married</td>\n",
              "      <td>3468</td>\n",
              "      <td>16632</td>\n",
              "      <td>9</td>\n",
              "      <td>Y</td>\n",
              "      <td>No</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>80</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>32</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>1005</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>4</td>\n",
              "      <td>Single</td>\n",
              "      <td>3068</td>\n",
              "      <td>11864</td>\n",
              "      <td>0</td>\n",
              "      <td>Y</td>\n",
              "      <td>No</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>59</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1324</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Medical</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>81</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>1</td>\n",
              "      <td>Married</td>\n",
              "      <td>2670</td>\n",
              "      <td>9964</td>\n",
              "      <td>4</td>\n",
              "      <td>Y</td>\n",
              "      <td>Yes</td>\n",
              "      <td>20</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>80</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1358</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>67</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>3</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>2693</td>\n",
              "      <td>13335</td>\n",
              "      <td>1</td>\n",
              "      <td>Y</td>\n",
              "      <td>No</td>\n",
              "      <td>22</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>80</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>38</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>216</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>44</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>Manufacturing Director</td>\n",
              "      <td>3</td>\n",
              "      <td>Single</td>\n",
              "      <td>9526</td>\n",
              "      <td>8787</td>\n",
              "      <td>0</td>\n",
              "      <td>Y</td>\n",
              "      <td>No</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1299</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>27</td>\n",
              "      <td>3</td>\n",
              "      <td>Medical</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>94</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>Healthcare Representative</td>\n",
              "      <td>3</td>\n",
              "      <td>Married</td>\n",
              "      <td>5237</td>\n",
              "      <td>16577</td>\n",
              "      <td>6</td>\n",
              "      <td>Y</td>\n",
              "      <td>No</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>80</td>\n",
              "      <td>2</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Age Attrition  ... YearsSinceLastPromotion  YearsWithCurrManager\n",
              "0   41       Yes  ...                       0                     5\n",
              "1   49        No  ...                       1                     7\n",
              "2   37       Yes  ...                       0                     0\n",
              "3   33        No  ...                       3                     0\n",
              "4   27        No  ...                       2                     2\n",
              "5   32        No  ...                       3                     6\n",
              "6   59        No  ...                       0                     0\n",
              "7   30        No  ...                       0                     0\n",
              "8   38        No  ...                       1                     8\n",
              "9   36        No  ...                       7                     7\n",
              "\n",
              "[10 rows x 35 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J8XMzIMkpsOF",
        "colab_type": "text"
      },
      "source": [
        "**Summary of DataFrame**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bSZ9z1G2psOG",
        "colab_type": "code",
        "outputId": "edddbbaa-1557-4dd6-9112-ca578777f9d0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        }
      },
      "source": [
        "df.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1470 entries, 0 to 1469\n",
            "Data columns (total 35 columns):\n",
            "Age                         1470 non-null int64\n",
            "Attrition                   1470 non-null object\n",
            "BusinessTravel              1470 non-null object\n",
            "DailyRate                   1470 non-null int64\n",
            "Department                  1470 non-null object\n",
            "DistanceFromHome            1470 non-null int64\n",
            "Education                   1470 non-null int64\n",
            "EducationField              1470 non-null object\n",
            "EmployeeCount               1470 non-null int64\n",
            "EmployeeNumber              1470 non-null int64\n",
            "EnvironmentSatisfaction     1470 non-null int64\n",
            "Gender                      1470 non-null object\n",
            "HourlyRate                  1470 non-null int64\n",
            "JobInvolvement              1470 non-null int64\n",
            "JobLevel                    1470 non-null int64\n",
            "JobRole                     1470 non-null object\n",
            "JobSatisfaction             1470 non-null int64\n",
            "MaritalStatus               1470 non-null object\n",
            "MonthlyIncome               1470 non-null int64\n",
            "MonthlyRate                 1470 non-null int64\n",
            "NumCompaniesWorked          1470 non-null int64\n",
            "Over18                      1470 non-null object\n",
            "OverTime                    1470 non-null object\n",
            "PercentSalaryHike           1470 non-null int64\n",
            "PerformanceRating           1470 non-null int64\n",
            "RelationshipSatisfaction    1470 non-null int64\n",
            "StandardHours               1470 non-null int64\n",
            "StockOptionLevel            1470 non-null int64\n",
            "TotalWorkingYears           1470 non-null int64\n",
            "TrainingTimesLastYear       1470 non-null int64\n",
            "WorkLifeBalance             1470 non-null int64\n",
            "YearsAtCompany              1470 non-null int64\n",
            "YearsInCurrentRole          1470 non-null int64\n",
            "YearsSinceLastPromotion     1470 non-null int64\n",
            "YearsWithCurrManager        1470 non-null int64\n",
            "dtypes: int64(26), object(9)\n",
            "memory usage: 402.0+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qYxQgN1ApsOJ",
        "colab_type": "text"
      },
      "source": [
        "`The data set has 1470 rows and 35 columns.` "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kA-jsY9HpsOK",
        "colab_type": "text"
      },
      "source": [
        "**Checking for nulls**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NuOcBsgtpsOK",
        "colab_type": "code",
        "outputId": "3ef0c709-fd14-41e0-b7d5-126baaa84c55",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "df.isnull().sum().sum()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SuTRQLQgpsON",
        "colab_type": "text"
      },
      "source": [
        "`No null exists in data`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9UH8bi2opsOO",
        "colab_type": "text"
      },
      "source": [
        "### Analyzing Categorical Features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S4EfzsXopsOP",
        "colab_type": "text"
      },
      "source": [
        "**Dataset has Ordinal values as listed below**\n",
        "\n",
        "Education 1 'Below College' 2 'College' 3 'Bachelor' 4 'Master' 5 'Doctor'\n",
        "\n",
        "EnvironmentSatisfaction 1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n",
        "\n",
        "JobInvolvement \n",
        "1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n",
        "\n",
        "JobLevel 1 'Level 1' 2 'Level 2' 3 'Level 3' 4 'Level 4' 5 'Level 5' 6 'Level 6'\n",
        "\n",
        "JobSatisfaction 1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n",
        "\n",
        "PerformanceRating \n",
        "1 'Low' 2 'Good' 3 'Excellent' 4 'Outstanding'\n",
        "\n",
        "RelationshipSatisfaction \n",
        "1 'Low' 2 'Medium' 3 'High' 4 'Very High'\n",
        "\n",
        "StockOptionLevel 1 'Level 1' 2 'Level 2' 3 'Level 3' 4 'Level 4' 5 'Level 5'\n",
        "\n",
        "WorkLifeBalance 1 'Bad' 2 'Good' 3 'Better' 4 'Best'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S8xcQ-IOpsOQ",
        "colab_type": "text"
      },
      "source": [
        "**Analyzing Ordinal Variables**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "Z8xqgQVfpsOQ",
        "colab_type": "code",
        "outputId": "27384d1a-b349-4bf5-9d1b-da16fb601364",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        }
      },
      "source": [
        "dfOrdinal = df[['Education','EnvironmentSatisfaction','JobInvolvement','JobLevel','JobSatisfaction','PerformanceRating','RelationshipSatisfaction','StockOptionLevel','WorkLifeBalance']]\n",
        "\n",
        "dfOrdinal.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Education</th>\n",
              "      <th>EnvironmentSatisfaction</th>\n",
              "      <th>JobInvolvement</th>\n",
              "      <th>JobLevel</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "      <th>PerformanceRating</th>\n",
              "      <th>RelationshipSatisfaction</th>\n",
              "      <th>StockOptionLevel</th>\n",
              "      <th>WorkLifeBalance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Education  EnvironmentSatisfaction  ...  StockOptionLevel  WorkLifeBalance\n",
              "0          2                        2  ...                 0                1\n",
              "1          1                        3  ...                 1                3\n",
              "2          2                        4  ...                 0                3\n",
              "3          4                        4  ...                 0                3\n",
              "4          1                        1  ...                 1                3\n",
              "5          2                        4  ...                 0                2\n",
              "6          3                        3  ...                 3                2\n",
              "7          1                        4  ...                 1                3\n",
              "8          3                        4  ...                 0                3\n",
              "9          3                        3  ...                 2                2\n",
              "\n",
              "[10 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fzwMXNrGpsOU",
        "colab_type": "code",
        "outputId": "9b0e465e-97da-4552-8be7-bbf7ba3f95aa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260
        }
      },
      "source": [
        "dfOrdinal.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1470 entries, 0 to 1469\n",
            "Data columns (total 9 columns):\n",
            "Education                   1470 non-null int64\n",
            "EnvironmentSatisfaction     1470 non-null int64\n",
            "JobInvolvement              1470 non-null int64\n",
            "JobLevel                    1470 non-null int64\n",
            "JobSatisfaction             1470 non-null int64\n",
            "PerformanceRating           1470 non-null int64\n",
            "RelationshipSatisfaction    1470 non-null int64\n",
            "StockOptionLevel            1470 non-null int64\n",
            "WorkLifeBalance             1470 non-null int64\n",
            "dtypes: int64(9)\n",
            "memory usage: 103.4 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jOfzRpPgpsOW",
        "colab_type": "text"
      },
      "source": [
        "`9 Ordinal variables in Data`\n",
        "\n",
        "`dtype for Ordinal variables is Integer`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w2LqVwOZpsOX",
        "colab_type": "text"
      },
      "source": [
        "**Analyzing Nominal Variables**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DGeRtXvbpsOY",
        "colab_type": "code",
        "outputId": "90aed927-b2e7-4817-e473-df5f5c7d330a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260
        }
      },
      "source": [
        "dfNominal = df.select_dtypes(include=['object'])\n",
        "\n",
        "dfNominal.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1470 entries, 0 to 1469\n",
            "Data columns (total 9 columns):\n",
            "Attrition         1470 non-null object\n",
            "BusinessTravel    1470 non-null object\n",
            "Department        1470 non-null object\n",
            "EducationField    1470 non-null object\n",
            "Gender            1470 non-null object\n",
            "JobRole           1470 non-null object\n",
            "MaritalStatus     1470 non-null object\n",
            "Over18            1470 non-null object\n",
            "OverTime          1470 non-null object\n",
            "dtypes: object(9)\n",
            "memory usage: 103.4+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Eh4mNtSpsOa",
        "colab_type": "text"
      },
      "source": [
        "`9 Nominal Variables exist in data`\n",
        "\n",
        "`Nominal Variables have object data type`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KHs5PUJypsOb",
        "colab_type": "code",
        "outputId": "7a696933-20ac-4395-fce8-fdda9d062b84",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "for col in dfNominal:\n",
        "    if df[col].nunique()==2:\n",
        "        print(col, df[col].nunique())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Attrition 2\n",
            "Gender 2\n",
            "OverTime 2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OukAFY9SpsOe",
        "colab_type": "text"
      },
      "source": [
        "`Mapping Required - Column has only 2 type of values`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jr1v6TSqpsOf",
        "colab_type": "code",
        "outputId": "0ce7730d-549d-46b3-d8aa-83f444fe0035",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        }
      },
      "source": [
        "for col in dfNominal:        \n",
        "    if df[col].nunique()>2:\n",
        "        print(col, df[col].nunique())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "BusinessTravel 3\n",
            "Department 3\n",
            "EducationField 6\n",
            "JobRole 9\n",
            "MaritalStatus 3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6hZC65jDpsOi",
        "colab_type": "text"
      },
      "source": [
        "`One Hot Vector Required - Columns have more than 2 values`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3YNRs2oTpsOj",
        "colab_type": "text"
      },
      "source": [
        "### Identifying redundant columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rh248k0NpsOj",
        "colab_type": "code",
        "outputId": "2d451c4d-a9dd-4937-9398-005e4e874232",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        }
      },
      "source": [
        "for col in df:\n",
        "    if df[col].nunique()==1:\n",
        "        print('\\n',col,'has only 1 value throughout the dataset\\n')\n",
        "        print(df[col].head(5))\n",
        "    "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            " EmployeeCount has only 1 value throughout the dataset\n",
            "\n",
            "0    1\n",
            "1    1\n",
            "2    1\n",
            "3    1\n",
            "4    1\n",
            "Name: EmployeeCount, dtype: int64\n",
            "\n",
            " Over18 has only 1 value throughout the dataset\n",
            "\n",
            "0    Y\n",
            "1    Y\n",
            "2    Y\n",
            "3    Y\n",
            "4    Y\n",
            "Name: Over18, dtype: object\n",
            "\n",
            " StandardHours has only 1 value throughout the dataset\n",
            "\n",
            "0    80\n",
            "1    80\n",
            "2    80\n",
            "3    80\n",
            "4    80\n",
            "Name: StandardHours, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CBwSUMkLpsOm",
        "colab_type": "text"
      },
      "source": [
        "`EmployeeCount, Over18 , StandardHours will not affect any other variables `"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BeUeObydpsOn",
        "colab_type": "code",
        "outputId": "bb17bd02-8840-46b7-dac7-f03b83d50e32",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "df.EmployeeNumber.nunique()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1470"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tnhxQYnMpsOq",
        "colab_type": "code",
        "outputId": "e9d20ae0-2174-42fb-d7dc-3ad3a481bb6b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 208
        }
      },
      "source": [
        "df.EmployeeNumber.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     1\n",
              "1     2\n",
              "2     4\n",
              "3     5\n",
              "4     7\n",
              "5     8\n",
              "6    10\n",
              "7    11\n",
              "8    12\n",
              "9    13\n",
              "Name: EmployeeNumber, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C-VStJSppsOw",
        "colab_type": "text"
      },
      "source": [
        "`EmployeeNumber is only an Identification number` "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qLO9PWLupsOz",
        "colab_type": "text"
      },
      "source": [
        "**Dropping EmployeeCount, EmployeeNumber, Over18 and StandardHours**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xJV9xKQCpsO1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df.drop(['EmployeeCount','EmployeeNumber','Over18','StandardHours'], axis=1, inplace = True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HHuNhLWOpsO6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfNominal = df.select_dtypes(include=['object'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yEzF8eC_psO9",
        "colab_type": "code",
        "outputId": "8b87b65e-735e-4567-e569-ab51a736bb58",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1470, 31)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lP5v7YwBpsO_",
        "colab_type": "text"
      },
      "source": [
        "`Dataset has 14 Numerical Columns and 17 Categorical Columns`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oQ_vAtwtpsPA",
        "colab_type": "text"
      },
      "source": [
        "### Analyzing Numerical Features"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lxasJy90psPA",
        "colab_type": "code",
        "outputId": "dbd14d1f-6e3e-4159-8073-847af3fcb853",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        }
      },
      "source": [
        "dfNumerical = df[['Age','DailyRate','DistanceFromHome','HourlyRate','MonthlyIncome','MonthlyRate','NumCompaniesWorked','PercentSalaryHike','TotalWorkingYears','TrainingTimesLastYear','YearsAtCompany','YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']]\n",
        "\n",
        "dfNumerical.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>DailyRate</th>\n",
              "      <th>DistanceFromHome</th>\n",
              "      <th>HourlyRate</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>MonthlyRate</th>\n",
              "      <th>NumCompaniesWorked</th>\n",
              "      <th>PercentSalaryHike</th>\n",
              "      <th>TotalWorkingYears</th>\n",
              "      <th>TrainingTimesLastYear</th>\n",
              "      <th>YearsAtCompany</th>\n",
              "      <th>YearsInCurrentRole</th>\n",
              "      <th>YearsSinceLastPromotion</th>\n",
              "      <th>YearsWithCurrManager</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>1102</td>\n",
              "      <td>1</td>\n",
              "      <td>94</td>\n",
              "      <td>5993</td>\n",
              "      <td>19479</td>\n",
              "      <td>8</td>\n",
              "      <td>11</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>279</td>\n",
              "      <td>8</td>\n",
              "      <td>61</td>\n",
              "      <td>5130</td>\n",
              "      <td>24907</td>\n",
              "      <td>1</td>\n",
              "      <td>23</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>1373</td>\n",
              "      <td>2</td>\n",
              "      <td>92</td>\n",
              "      <td>2090</td>\n",
              "      <td>2396</td>\n",
              "      <td>6</td>\n",
              "      <td>15</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>1392</td>\n",
              "      <td>3</td>\n",
              "      <td>56</td>\n",
              "      <td>2909</td>\n",
              "      <td>23159</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>27</td>\n",
              "      <td>591</td>\n",
              "      <td>2</td>\n",
              "      <td>40</td>\n",
              "      <td>3468</td>\n",
              "      <td>16632</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>32</td>\n",
              "      <td>1005</td>\n",
              "      <td>2</td>\n",
              "      <td>79</td>\n",
              "      <td>3068</td>\n",
              "      <td>11864</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>59</td>\n",
              "      <td>1324</td>\n",
              "      <td>3</td>\n",
              "      <td>81</td>\n",
              "      <td>2670</td>\n",
              "      <td>9964</td>\n",
              "      <td>4</td>\n",
              "      <td>20</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30</td>\n",
              "      <td>1358</td>\n",
              "      <td>24</td>\n",
              "      <td>67</td>\n",
              "      <td>2693</td>\n",
              "      <td>13335</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>38</td>\n",
              "      <td>216</td>\n",
              "      <td>23</td>\n",
              "      <td>44</td>\n",
              "      <td>9526</td>\n",
              "      <td>8787</td>\n",
              "      <td>0</td>\n",
              "      <td>21</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36</td>\n",
              "      <td>1299</td>\n",
              "      <td>27</td>\n",
              "      <td>94</td>\n",
              "      <td>5237</td>\n",
              "      <td>16577</td>\n",
              "      <td>6</td>\n",
              "      <td>13</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Age  DailyRate  ...  YearsSinceLastPromotion  YearsWithCurrManager\n",
              "0   41       1102  ...                        0                     5\n",
              "1   49        279  ...                        1                     7\n",
              "2   37       1373  ...                        0                     0\n",
              "3   33       1392  ...                        3                     0\n",
              "4   27        591  ...                        2                     2\n",
              "5   32       1005  ...                        3                     6\n",
              "6   59       1324  ...                        0                     0\n",
              "7   30       1358  ...                        0                     0\n",
              "8   38        216  ...                        1                     8\n",
              "9   36       1299  ...                        7                     7\n",
              "\n",
              "[10 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HFTNG9GepsPC",
        "colab_type": "code",
        "outputId": "5c105d19-eba5-47fc-aef5-03e6d4e6b3c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        }
      },
      "source": [
        "dfNumerical.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1470 entries, 0 to 1469\n",
            "Data columns (total 14 columns):\n",
            "Age                        1470 non-null int64\n",
            "DailyRate                  1470 non-null int64\n",
            "DistanceFromHome           1470 non-null int64\n",
            "HourlyRate                 1470 non-null int64\n",
            "MonthlyIncome              1470 non-null int64\n",
            "MonthlyRate                1470 non-null int64\n",
            "NumCompaniesWorked         1470 non-null int64\n",
            "PercentSalaryHike          1470 non-null int64\n",
            "TotalWorkingYears          1470 non-null int64\n",
            "TrainingTimesLastYear      1470 non-null int64\n",
            "YearsAtCompany             1470 non-null int64\n",
            "YearsInCurrentRole         1470 non-null int64\n",
            "YearsSinceLastPromotion    1470 non-null int64\n",
            "YearsWithCurrManager       1470 non-null int64\n",
            "dtypes: int64(14)\n",
            "memory usage: 160.9 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ILBDHeFGpsPF",
        "colab_type": "text"
      },
      "source": [
        "`14 Numerical Variables exist in data`\n",
        "\n",
        "`dtype of Numerical variables is int64`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AL7lB4dJpsPG",
        "colab_type": "text"
      },
      "source": [
        "### Adding Nulls and Symbols"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aBbAz_4OpsPG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "np.random.seed(0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DKFwozgNpsPI",
        "colab_type": "text"
      },
      "source": [
        "`Seed to maintain data re-producibility`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "id5cgHIFpsPI",
        "colab_type": "code",
        "outputId": "f8034025-e8ae-4e9c-cf9f-8bac7fafcdd4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        }
      },
      "source": [
        "for col in df:\n",
        "    for x in range(40):\n",
        "        x = np.random.randint(1, 1470)\n",
        "        df[col].loc[x] = np.NaN\n",
        "        x = np.random.randint(1, 1470)\n",
        "        df[col].loc[x] = \"*\""
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:190: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
            "  self._setitem_with_indexer(indexer, value)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EPdXvIf-psPK",
        "colab_type": "text"
      },
      "source": [
        "**Viewing the updated dataset with NaN and * values**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6t4U-a4XpsPK",
        "colab_type": "code",
        "outputId": "5ce1a1a4-2443-49ae-8100-c527ef10d0c2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        }
      },
      "source": [
        "df.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Attrition</th>\n",
              "      <th>BusinessTravel</th>\n",
              "      <th>DailyRate</th>\n",
              "      <th>Department</th>\n",
              "      <th>DistanceFromHome</th>\n",
              "      <th>Education</th>\n",
              "      <th>EducationField</th>\n",
              "      <th>EnvironmentSatisfaction</th>\n",
              "      <th>Gender</th>\n",
              "      <th>HourlyRate</th>\n",
              "      <th>JobInvolvement</th>\n",
              "      <th>JobLevel</th>\n",
              "      <th>JobRole</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>MonthlyRate</th>\n",
              "      <th>NumCompaniesWorked</th>\n",
              "      <th>OverTime</th>\n",
              "      <th>PercentSalaryHike</th>\n",
              "      <th>PerformanceRating</th>\n",
              "      <th>RelationshipSatisfaction</th>\n",
              "      <th>StockOptionLevel</th>\n",
              "      <th>TotalWorkingYears</th>\n",
              "      <th>TrainingTimesLastYear</th>\n",
              "      <th>WorkLifeBalance</th>\n",
              "      <th>YearsAtCompany</th>\n",
              "      <th>YearsInCurrentRole</th>\n",
              "      <th>YearsSinceLastPromotion</th>\n",
              "      <th>YearsWithCurrManager</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1102</td>\n",
              "      <td>Sales</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>2</td>\n",
              "      <td>Female</td>\n",
              "      <td>94</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>Sales Executive</td>\n",
              "      <td>4</td>\n",
              "      <td>Single</td>\n",
              "      <td>5993</td>\n",
              "      <td>19479</td>\n",
              "      <td>8</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>279</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>8</td>\n",
              "      <td>*</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>61</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Research Scientist</td>\n",
              "      <td>2</td>\n",
              "      <td>Married</td>\n",
              "      <td>5130</td>\n",
              "      <td>24907</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>23</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1373</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Other</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>92</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>3</td>\n",
              "      <td>Single</td>\n",
              "      <td>2090</td>\n",
              "      <td>2396</td>\n",
              "      <td>6</td>\n",
              "      <td>Yes</td>\n",
              "      <td>15</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>1392</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>56</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Research Scientist</td>\n",
              "      <td>3</td>\n",
              "      <td>Married</td>\n",
              "      <td>2909</td>\n",
              "      <td>23159</td>\n",
              "      <td>*</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>27</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>591</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>*</td>\n",
              "      <td>1</td>\n",
              "      <td>*</td>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>40</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>2</td>\n",
              "      <td>Married</td>\n",
              "      <td>3468</td>\n",
              "      <td>16632</td>\n",
              "      <td>9</td>\n",
              "      <td>No</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>32</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>1005</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>79</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>4</td>\n",
              "      <td>Single</td>\n",
              "      <td>3068</td>\n",
              "      <td>11864</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>59</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1324</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>Medical</td>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>81</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>1</td>\n",
              "      <td>Married</td>\n",
              "      <td>2670</td>\n",
              "      <td>9964</td>\n",
              "      <td>4</td>\n",
              "      <td>Yes</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1358</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>67</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>3</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>2693</td>\n",
              "      <td>13335</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>22</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>*</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>*</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>38</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>216</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>*</td>\n",
              "      <td>3</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>*</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>Manufacturing Director</td>\n",
              "      <td>3</td>\n",
              "      <td>Single</td>\n",
              "      <td>9526</td>\n",
              "      <td>8787</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>21</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>*</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>*</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1299</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>27</td>\n",
              "      <td>3</td>\n",
              "      <td>Medical</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>94</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>Healthcare Representative</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Married</td>\n",
              "      <td>5237</td>\n",
              "      <td>16577</td>\n",
              "      <td>6</td>\n",
              "      <td>No</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>*</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  Age Attrition  ... YearsSinceLastPromotion YearsWithCurrManager\n",
              "0  41       Yes  ...                       0                    5\n",
              "1  49        No  ...                       1                    7\n",
              "2  37       Yes  ...                       0                    0\n",
              "3  33        No  ...                       3                    0\n",
              "4  27        No  ...                       2                    2\n",
              "5  32        No  ...                       3                    6\n",
              "6  59        No  ...                       0                    0\n",
              "7  30        No  ...                       0                    *\n",
              "8  38        No  ...                       1                    8\n",
              "9  36        No  ...                       7                    7\n",
              "\n",
              "[10 rows x 31 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XHh_f1L8psPM",
        "colab_type": "text"
      },
      "source": [
        "**NaN Values in Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7eYQNtYmpsPN",
        "colab_type": "code",
        "outputId": "9fa63ae1-779e-4899-e593-2cde4d31812e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "df.isnull().sum().sum()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1203"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwwWb-KgpsPP",
        "colab_type": "text"
      },
      "source": [
        "**Star Values in Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aac6e-yhpsPQ",
        "colab_type": "code",
        "outputId": "bc687b31-5523-48dc-987d-66a101234002",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "count = 0\n",
        "\n",
        "for col in df:\n",
        "    for x in range(1470):\n",
        "        if df[col].loc[x]=='*':\n",
        "            count = count + 1\n",
        "        \n",
        "print(\"Total No. of Star values: \", count)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total No. of Star values:  1202\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xWTS-lwJpsPS",
        "colab_type": "text"
      },
      "source": [
        "**Calculating percentage of missing values**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ukyJgRMzpsPS",
        "colab_type": "code",
        "outputId": "1a3b98a9-4e97-4ac1-bb0a-fce8f0999b5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "( (df.isnull().sum().sum() + count ) / ( 1470 * 31 )) * 100"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.277594908931314"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-x3Q6PnMpsPU",
        "colab_type": "text"
      },
      "source": [
        "-------------------------------------------------------------------------------------------------------------------------------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2zCaSNKlpsPV",
        "colab_type": "text"
      },
      "source": [
        "# Brief Summary of DataSet\n",
        "\n",
        "\n",
        "**Features/Columns:** 31\n",
        "\n",
        "* **Categorical Columns:** 17\n",
        "\n",
        "   **1. Nominal Columns:** 8\n",
        "    \n",
        "   **2. Ordinal Columns:** 9\n",
        "   \n",
        "\n",
        "* **Numerical Columns:** 14\n",
        "\n",
        "**Rows:** 1470\n",
        "\n",
        "**Percentage Missing Values:** 5.28 %\n",
        "\n",
        "**Target Value:** Attrition\n",
        "   "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3W5YsAdGpsPV",
        "colab_type": "text"
      },
      "source": [
        "-------------------------------------------------------------------------------------------------------------------------------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ApcAXI7psPV",
        "colab_type": "text"
      },
      "source": [
        "**Replacing Star Symbols with NaN**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xCIfiXu7psPW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = df.replace('*', np.nan)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "auRkIlOipsPa",
        "colab_type": "code",
        "outputId": "5d779cb6-eae3-41de-c7ab-48b45d580617",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        }
      },
      "source": [
        "df.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Attrition</th>\n",
              "      <th>BusinessTravel</th>\n",
              "      <th>DailyRate</th>\n",
              "      <th>Department</th>\n",
              "      <th>DistanceFromHome</th>\n",
              "      <th>Education</th>\n",
              "      <th>EducationField</th>\n",
              "      <th>EnvironmentSatisfaction</th>\n",
              "      <th>Gender</th>\n",
              "      <th>HourlyRate</th>\n",
              "      <th>JobInvolvement</th>\n",
              "      <th>JobLevel</th>\n",
              "      <th>JobRole</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "      <th>MaritalStatus</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>MonthlyRate</th>\n",
              "      <th>NumCompaniesWorked</th>\n",
              "      <th>OverTime</th>\n",
              "      <th>PercentSalaryHike</th>\n",
              "      <th>PerformanceRating</th>\n",
              "      <th>RelationshipSatisfaction</th>\n",
              "      <th>StockOptionLevel</th>\n",
              "      <th>TotalWorkingYears</th>\n",
              "      <th>TrainingTimesLastYear</th>\n",
              "      <th>WorkLifeBalance</th>\n",
              "      <th>YearsAtCompany</th>\n",
              "      <th>YearsInCurrentRole</th>\n",
              "      <th>YearsSinceLastPromotion</th>\n",
              "      <th>YearsWithCurrManager</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1102.0</td>\n",
              "      <td>Sales</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>94.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Sales Executive</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Single</td>\n",
              "      <td>5993.0</td>\n",
              "      <td>19479.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>279.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>61.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Research Scientist</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Married</td>\n",
              "      <td>5130.0</td>\n",
              "      <td>24907.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>No</td>\n",
              "      <td>23.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1373.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Other</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>92.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Single</td>\n",
              "      <td>2090.0</td>\n",
              "      <td>2396.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>15.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>1392.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>56.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Research Scientist</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Married</td>\n",
              "      <td>2909.0</td>\n",
              "      <td>23159.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yes</td>\n",
              "      <td>11.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>27.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>591.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>40.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Married</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>16632.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>No</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>32.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>1005.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>79.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Single</td>\n",
              "      <td>3068.0</td>\n",
              "      <td>11864.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>No</td>\n",
              "      <td>13.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>59.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1324.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Medical</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>81.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Married</td>\n",
              "      <td>2670.0</td>\n",
              "      <td>9964.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1358.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>67.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Laboratory Technician</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Divorced</td>\n",
              "      <td>2693.0</td>\n",
              "      <td>13335.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>No</td>\n",
              "      <td>22.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>38.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Frequently</td>\n",
              "      <td>216.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Life Sciences</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Manufacturing Director</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Single</td>\n",
              "      <td>9526.0</td>\n",
              "      <td>8787.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>No</td>\n",
              "      <td>21.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36.0</td>\n",
              "      <td>No</td>\n",
              "      <td>Travel_Rarely</td>\n",
              "      <td>1299.0</td>\n",
              "      <td>Research &amp; Development</td>\n",
              "      <td>27.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Medical</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>94.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Healthcare Representative</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Married</td>\n",
              "      <td>5237.0</td>\n",
              "      <td>16577.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>No</td>\n",
              "      <td>13.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Age Attrition  ... YearsSinceLastPromotion  YearsWithCurrManager\n",
              "0  41.0       Yes  ...                     0.0                   5.0\n",
              "1  49.0        No  ...                     1.0                   7.0\n",
              "2  37.0       Yes  ...                     0.0                   0.0\n",
              "3  33.0        No  ...                     3.0                   0.0\n",
              "4  27.0        No  ...                     2.0                   2.0\n",
              "5  32.0        No  ...                     3.0                   6.0\n",
              "6  59.0        No  ...                     0.0                   0.0\n",
              "7  30.0        No  ...                     0.0                   NaN\n",
              "8  38.0        No  ...                     1.0                   8.0\n",
              "9  36.0        No  ...                     7.0                   7.0\n",
              "\n",
              "[10 rows x 31 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zCv30daQpsPd",
        "colab_type": "text"
      },
      "source": [
        "### Feature Imputation\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JO9i4yjlpsPe",
        "colab_type": "text"
      },
      "source": [
        "**Imputing for Numerical Values**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qhhULKmBpsPe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfNumerical = df[['Age','DailyRate','DistanceFromHome','HourlyRate','MonthlyIncome','MonthlyRate','NumCompaniesWorked','PercentSalaryHike','TotalWorkingYears','TrainingTimesLastYear','YearsAtCompany','YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xksmY9YPpsPg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for col in dfNumerical:\n",
        "    df[col]=df[col].fillna(df[col].median())"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mEQpn8d2psPi",
        "colab_type": "text"
      },
      "source": [
        "`Replacing NaN values with Median values`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZfXwzlf7psPi",
        "colab_type": "code",
        "outputId": "de3a1834-d4ac-4e69-aa40-d07eb8e6fe92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "dfNumerical = df[['Age','DailyRate','DistanceFromHome','HourlyRate','MonthlyIncome','MonthlyRate','NumCompaniesWorked','PercentSalaryHike','TotalWorkingYears','TrainingTimesLastYear','YearsAtCompany','YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']]\n",
        "\n",
        "dfNumerical.isnull().sum().sum()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "eaRrHi8zpsPk",
        "colab_type": "code",
        "outputId": "f3d5d095-7e6c-48d9-c283-97fbd09496e9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        }
      },
      "source": [
        "dfNumerical.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>DailyRate</th>\n",
              "      <th>DistanceFromHome</th>\n",
              "      <th>HourlyRate</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>MonthlyRate</th>\n",
              "      <th>NumCompaniesWorked</th>\n",
              "      <th>PercentSalaryHike</th>\n",
              "      <th>TotalWorkingYears</th>\n",
              "      <th>TrainingTimesLastYear</th>\n",
              "      <th>YearsAtCompany</th>\n",
              "      <th>YearsInCurrentRole</th>\n",
              "      <th>YearsSinceLastPromotion</th>\n",
              "      <th>YearsWithCurrManager</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>1102.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>94.0</td>\n",
              "      <td>5993.0</td>\n",
              "      <td>19479.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49.0</td>\n",
              "      <td>279.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>5130.0</td>\n",
              "      <td>24907.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37.0</td>\n",
              "      <td>1373.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>2090.0</td>\n",
              "      <td>2396.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33.0</td>\n",
              "      <td>1392.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>2909.0</td>\n",
              "      <td>23159.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>27.0</td>\n",
              "      <td>591.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>16632.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>32.0</td>\n",
              "      <td>1005.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>3068.0</td>\n",
              "      <td>11864.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>59.0</td>\n",
              "      <td>1324.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>81.0</td>\n",
              "      <td>2670.0</td>\n",
              "      <td>9964.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>30.0</td>\n",
              "      <td>1358.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2693.0</td>\n",
              "      <td>13335.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>38.0</td>\n",
              "      <td>216.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>9526.0</td>\n",
              "      <td>8787.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36.0</td>\n",
              "      <td>1299.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>94.0</td>\n",
              "      <td>5237.0</td>\n",
              "      <td>16577.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Age  DailyRate  ...  YearsSinceLastPromotion  YearsWithCurrManager\n",
              "0  41.0     1102.0  ...                      0.0                   5.0\n",
              "1  49.0      279.0  ...                      1.0                   7.0\n",
              "2  37.0     1373.0  ...                      0.0                   0.0\n",
              "3  33.0     1392.0  ...                      3.0                   0.0\n",
              "4  27.0      591.0  ...                      2.0                   2.0\n",
              "5  32.0     1005.0  ...                      3.0                   6.0\n",
              "6  59.0     1324.0  ...                      0.0                   0.0\n",
              "7  30.0     1358.0  ...                      0.0                   3.0\n",
              "8  38.0      216.0  ...                      1.0                   8.0\n",
              "9  36.0     1299.0  ...                      7.0                   7.0\n",
              "\n",
              "[10 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0j_4OiZ6psPn",
        "colab_type": "text"
      },
      "source": [
        "**Imputing for Categorical Values**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_PFrEKx0psPo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfOrdinal = df[['Education','EnvironmentSatisfaction','JobInvolvement','JobLevel','JobSatisfaction','PerformanceRating','RelationshipSatisfaction','StockOptionLevel','WorkLifeBalance']]\n",
        "\n",
        "for col in dfOrdinal:\n",
        "    df[col] = df[col].astype('object') "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CS1Myg1_psPs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfC = df.select_dtypes(include=['object'])\n",
        "\n",
        "for col in dfC:\n",
        "    df[col] = df[col].fillna(df[col].value_counts().index[0])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vHqDpPxWpsPv",
        "colab_type": "text"
      },
      "source": [
        "`Replacing NaN values with Mode Values`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vq2B0OcGpsPw",
        "colab_type": "code",
        "outputId": "52165781-6278-4de0-9a84-56d08e2cb1a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "df.isnull().sum().sum()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9e9hKsmnpsPy",
        "colab_type": "text"
      },
      "source": [
        "`No null value exists in dataset now`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PVqF15R-psPz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfC = df.select_dtypes(include=['object'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XW9rVDNEpsP0",
        "colab_type": "text"
      },
      "source": [
        "### Analyzing Target Variable"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TLgm90nMpsP1",
        "colab_type": "code",
        "outputId": "421d3a25-b7f4-453a-ee95-7e8e327413cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "print(df['Attrition'].unique())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['Yes' 'No']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T-5HIgh0psP3",
        "colab_type": "text"
      },
      "source": [
        "`2 unique values for Attrition - Target Variable`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WCbIXHA_psP4",
        "colab_type": "code",
        "outputId": "6e9a6a9b-fa62-4a2d-fe12-7b2515edae85",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "print(df.groupby('Attrition').size())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Attrition\n",
            "No     1252\n",
            "Yes     218\n",
            "dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j0B8LIMspsP7",
        "colab_type": "text"
      },
      "source": [
        "`Data is unbalanced`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TfeKhtaXpsP8",
        "colab_type": "code",
        "outputId": "f98d430c-6788-4c8d-b844-b0c3aeba22bd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.countplot(df['Attrition'],label=\"Count\")\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n_kQOEIbpsP-",
        "colab_type": "text"
      },
      "source": [
        "`Very few employees are leaving the organization`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sPeIf5XDpsP_",
        "colab_type": "text"
      },
      "source": [
        "**Histogram of DataSet**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E5op6pRRpsP_",
        "colab_type": "code",
        "outputId": "e5440a65-7f9d-4ea5-a0a6-48830211ef07",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "pd.DataFrame.hist(df, figsize = [40,40]);"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAACOQAAAitCAYAAAApLHwLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3X2cXlV97/3PF6LIQSSCOMWAhlaq\nR5sjanyqbZ2KtqBUaG9FlKPE0qb22B5b01uj7ameWltsi4it1caDBSyCiKWgeCz4MLfaFltRCla0\nRgySyIMEiEYFDf7uP/YKXIyTzEzmmuuaa+bzfr3mNXuvvfbev7VnkjV7X7+9VqoKSZIkSZIkSZIk\nSZIkSf2x17ADkCRJkiRJkiRJkiRJkhYTE3IkSZIkSZIkSZIkSZKkPjIhR5IkSZIkSZIkSZIkSeoj\nE3IkSZIkSZIkSZIkSZKkPjIhR5IkSZIkSZIkSZIkSeojE3IkSZIkSZIkSZIkSZKkPjIhR5IkSfMq\nycOTbE+yd1ufSPJrw45LkqRdSfLOJP9r2HFIkqQ9l2RlkkqybMDnPSnJZYM8pyRpcfLedGYmP3+e\npu4fJ7k1yU19jsH+X1MyIUeapfYh4u1J9hl2LJIkDUqSTUm+l+TbSe5I8s9JXp5k2r8nq+rrVfXA\nqrp7luccT/LDdjP17SRfTvKyWez/hiR/N5tzSpKWhun6tap6eVW9cYbHedb8R7zbGHZ+2Li95+vf\nB3TuNUk+PUX50K+LJGnx6unHe/u+vxpSLD+S9FNV51bVLwwjHknS8MxH/zTTe9OFLslZSf54UtnP\ntHvxbUluS/JPSZ40w+Pd555zps+fkzwcWAc8pqp+bE/a0o5j/68ZG2hmuDTqkqwEfhbYBjwPeP8w\n45EkacB+qao+muQA4BnAGcBTgBknyeyBb1TVoUkCHANckuSfq+rL83hOSdLSMIx+bT4tr6odu6uQ\nZNl0dSRJGhG/VFUfHXYQkiRNMrD+aZTv75I8CPgQ8JvABcD96T5/vWueT/1wYGtV3TLP55Hu4Qg5\n0uy8FLgCOAs4eWdhkoOSfDDJt5L8Wxvu7NM92x+d5PKW4fnlJCcMPnRJkvqjqrZV1SXAC4GTk/xU\nkucm+XzrC29I8oad9Xc1THiS+7e+cVVP2UOTfDfJwZPOWVX1YeA24L/11D+jne9bSa5M8rOt/Gjg\ndcALe0cKSHJAkjOT3JhkS+uzpx3KVJK0eO2iX7vn7b0kD0nyoTaSzm1JPpVkryTvoXuY98HW17y6\n1X9/kpvaW36fTPLYnedqx317kkvb6DyfSfITPdsf23PveHOS17XyvZKsT/LVJFuTXJDkwOna1kaw\n+ackpyfZCryhHesPklyf5JYk57SkpN4++2Wtf7093chBT0pydbsGs3rDs9/nS/KrSa5tdf8xySNm\nE48kafFKsneSv0g3DcV1wHMnbb/P2/SZNKpq7n1T/47WL61p5bu83wU+2b7f0f4eeFomjSCX5KfT\nPTPe1r7/dM+2iSRvbP31t5NcluQhfb0wkqSh2tkvtD7q9iRfS3JM2/bCJJ+dVP93k1zSlnvvTceT\nbE7ymnTTLf1tK//1JBvbfeQlSR7Wc6xq91hfaf3b25OkJ66d94t3JLmu9VlrWn93S5Lez0L3aW34\nertffWeSfSfFtq7td2PaSOdJ1gInAa9ufeUHgZ8EqKrzquruqvpeVV1WVVe3fX4iycfT3f/emuTc\nJMvbth+5F8+k58+tDde1vvVr6aaTehZwOfCwtt9Zre7u7uH3TXJauvvZbe3nuC/2/5oFE3Kk2Xkp\ncG77+sUkY6387cB3gB+jS9Tp7aD2o/sP/r3AQ4ETgb9O8pgBxi1JUt9V1b8Cm+neXvgOXT+5nO6h\n528mOX6a/b8PnA/8957iFwEfq6pv9tZN92He84CHABt7Nv0bcCRwIF1f+/4kD6iqjwB/AryvDVf6\nuFb/LGAH8Ejg8cAvAL82y6ZLkhahSf1ar3Wt/GBgjC7hs6rqJcDX6d6AfGBV/Vmr/3+BI+ju/z5H\nd//Y60TgfwMPpuvT3gSQZH/go8BHgIfR9VUfa/v8NnA83Ug+DwNup7sPnYmnANe12N8ErGlfPw/8\nOPBAYHKSzVNaG14IvBX4feBZwGOBE5I8Y4bnpp/nS3Ic3fX/Fbqfx6eA82YRiyRpcft14Fi6e73V\nwPNnumO6BM//C/wlXR9zJHBV27y7+92fa9+Xt78H/mXScQ8ELgXeBhwEvAW4NMlBPdVeTDdC30Pp\nRgj4vZnGLUkaGU8Bvkz3bPPPgDNbYswHgUclOaKn7ovpnnNO5cfonoM+Alib5JnAnwInAIcA19M9\nb+11LPAkupccTwB+cVJcV9P1Ue9t+z6J7n70vwN/leSBre6pdIk0R7btK4A/nBTbAa38FODtSR5c\n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\nFnp8YIz9Yoz94fPepWWp9Kd7YrG2CxZv2xZru2Dxtm2xtgsG2586ZZUkSZIkSZIkSZIkSZLURybk\nSJIkSZIkSZIkSZIkSX1kQo4kSZIkSZIkSZIkSZLURybkSJIkSZIkSZIkSZIkSX1kQo4kSZIkSZIk\nSZIkSZLURybkSJIkSZIkSZIkSZIkSX1kQo4kSZIkSZIkSZIkSZLURybkSJIkSZIkSZIkSZIkSX1k\nQo4kSZIkSZIkSZIkSZLURybkSJIkSZIkSZIkSZIkSX1kQo4kSZIkSZIkSZIkSZLURybkSJIkSZIk\nSZIkSZIkSX1kQo4kSZIkSZIkSZIkSZLURybkSJIkSZIkSZIkSZIkSX1kQo4kSZIkSZIkSZIkSZLU\nR8uGHYDUbyvXXzrU82869blDPb8kSf0w7P70rKP3G+r5JWkuhv1/qPckkiRJ/XPNlm2s8e87SZJG\n3nw9r1m3aseM/1awT196HCFHkiRJkiRJkiRJkiRJ6iMTciRJkiRJkiRJkiRpFpJsSnJNkquSfLaV\nHZjk8iRfad8f3MqT5G1JNia5OskThhu9JGkQTMiRJEmSJEmSJEmSpNn7+ao6sqpWt/X1wMeq6gjg\nY20d4BjgiPa1FnjHwCOVJA2cCTmSJEmSJEmSJEmSNHfHAWe35bOB43vKz6nOFcDyJIcMI0BJ0uAs\nG3YAkiRJkiRJkiRJkjRiCrgsSQF/U1UbgLGqurFtvwkYa8srgBt69t3cym7sKSPJWroRdBgbG2Ni\nYmJOAW7fvn3Ox1iIFmu7YPG2bSG0a92qHfNy3LF9Z37sYV+D2VgIP7P5Msi2mZAjSZIkSZIkSZIk\nSbPzM1W1JclDgcuTfKl3Y1VVS9aZsZbUswFg9erVNT4+PqcAJyYmmOsxFqLF2i5YvG1bCO1as/7S\neTnuulU7OO2amaVdbDppfF5imA8L4Wc2XwbZNqeskiRJkiRJkqQlJMnyJBcm+VKSa5M8LcmBSS5P\n8pX2/cGtbpK8LcnGJFcnecKw45ckaSGoqi3t+y3ARcCTgZt3TkXVvt/Sqm8BDuvZ/dBWJklaxEzI\nkSRJkiRJkqSl5QzgI1X1aOBxwLXAeuBjVXUE8LG2DnAMcET7Wgu8Y/DhSpK0sCTZL8n+O5eBXwC+\nAFwCnNyqnQxc3JYvAV7aEl2fCmzrmdpKkrRIOWWVJEmSJEmSJC0RSQ4Afg5YA1BV3we+n+Q4YLxV\n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\np6uyf61KPZPVqeuq1DNZnbquSj2T1arrsuj7++ki7ANinNy8x5eIsS9i7McixMhkVrE/3YtlrVey\nvHVb1noly1u3Za1XMtu6TWvIqtNJrh57flVXBgDsnP4UACanPwWAyelPAWBy+lOAFTOthJzfT7K/\nql5UVd+S5LVJ7p/SewHAstKfAsDk9KcAMDn9KQBMTn8KsGKmMmRVa+1cVb0pyb9J8twk72mtfXoa\n79WThRjqYw5pt73Rbnuj3fZGuy2wBexPL2aR98dFjX1R407EPhSxs3R66k9XZf9alXomq1PXValn\nsjp1XZV6JqtV17k30PfTRdgHxDi5eY8vEWNfxNiPRYiRLehPe7Ws9UqWt27LWq9keeu2rPVKZli3\naq3N6r0AAAAAAAAAAGDpTWvIKgAAAAAAAAAAWEkScgAAAAAAAAAAoEcrl5BTVVdX1Ueq6jNV9emq\nenNXfnlVPVRVn+seXzB0rPOkqv5WVf1eVf1R127/tCt/UVV9rKpOVtUHqupbho513lTVc6vqD6vq\nt7rn2mwHqupUVZ2oqk9U1ce7Mp/TbVTVZVX1war646p6rKp+RJsxK7vtX2vkV7pj4Ser6qXD1mDn\nx+uq+tbu+clu/r6B497xZ3+e2r2q/utuX/lUVb2vO9eY2zavqvdU1ZNV9amxsl23c1Xd2i3/uaq6\ndaC4//tuf/lkVX24qi4bm/eWLu7PVtVPjpXf0JWdrKqj0457q9jH5h2pqlZVL+yez02bs3yG2P+H\nUBc4/14WuzmGL7It6vkLVXW6266fqKobh4yxD7VCv+tsU9el2q7lN6eVtt05Xzd/y/O8OYpxvaqe\nGftM/pMZx3fBY8WmZQZtxx3GOHQ7XvBYtGmZQb+b7jDGQ1X1Z2Pt+PdnGeNYHN/wG8umeYN/x+/i\n2C7GwduxLnJ+PvTnmvmyCP3pXsx7HzyJRei/92IR+vy9WoRzhb1YpPOLvRr6vGTlEnKSnEtypLV2\nTZLrktxeVdckOZrk4dba/iQPd8/5ur9K8uOttR9Kcm2SG6rquiT/Isk7Wmvfl+TpJLcNGOO8enOS\nx8aea7Od+7HW2rWttYPdc5/T7b0zyW+31n4gyQ9ltN9pM2Zlt/3rK5Ps7/4OJ7lr9iF/k50er29L\n8nRX/o5uuSHt5rM/F+1eVVcm+UdJDrbWXpzkuUlem/lu87uT3LCpbFftXFWXJ3lbkh9O8rIkb6vp\n/7PwQnE/lOTFrbX/OMn/neQtXXzXZLQdfrB7zf/UfVl5bpJfzahe1yR5XbfstF0o9lTV1UlekeTf\njRXPU5uzRAbc/4ey+fx7WdydnR/DF9nducBxM6O+9dru78EZxzQNq/S7zlZ1TZZru/rNabXdnQsf\nu86bh+8wd2f7GJPk/xz7TP7iDGIat92x4ryh23EnMSbDtuNWx6JxQ3833UmMSfKBsXb89dmG+DWb\nf2MZN3Q7nrddjMl8tON25+dDf66ZL3dn/vvTvbg7890HT2IR+u+9WIQ+f68W4VxhLxbp/GKvBj0v\nWbmEnNbamdbao930VzJq/CuT3JTkeLfY8SSvGSbC+dRGznZPn9f9tSQ/nuSDXbl226SqrkryqiS/\n3j2vaLNJ+Jxuoaq+M8nfS/LuJGmt/XVr7S+jzZiRPfSvNyV5b9e/PJLksqq6YsZhf80uj9fjdfpg\nkuu75WduD5/9eWr3S5JcWlWXJPm2JGcyx23eWvtokqc2Fe+2nX8yyUOttadaa09nlBhzsR8Veo+7\ntfY7rbVz3dNHklw1Fvf7W2t/1Vr70yQnM0pieVmSk621z7fW/jrJ+7tlp2qLNk9GX4z+m4zORc+b\nmzZn6Qyy/9OvXR7DF9Y2x82lskq/62xT16XiN6fVtoNj1+DfYeb9+LrDY8Wg7bgIx7NtjkXjBv1u\nusMYB7f5N5YLGPw7/g5iXASDHx+ZH4vQn+7FvPfBk1iE/nsvFqHP36tFOFfYi0U5v9ireTgvWbmE\nnHHdLYdekuRjSdZaa2e6WV9KsjZQWHOru0L6E0mezOifGX+S5C/H/qHzeJbkoNqj/yGjfxj9Tff8\nu6LNdqol+Z2q+oOqOtyV+Zxu7UVJ/izJ/9Lddu3Xq+r50WYMYIf965VJvjj2sqGPh7s5Xn8t9m7+\nM93yQ9jtZ38u2r21djrJL2d0h5MzGbXhH2Qx2nzcbtt5Ltp/k59N8q+76bmPu6puSnK6tfZHm2bN\nfewsrFXahy50/r3MVuk8+U3d7c3fs2x3CVul33U21TVZsu3qNye2sSh98Y90t/n/11X1g0MFcYFj\nxXlz047bxJgM3I6bj0WttS3bcajvpjuIMUn+s66P+GB3h9FZ2/wby2aDt2MuHmMyfDte7Px8bj7X\nLIRl3l/mog+exCL033sxz33+Xi3CucJeLMj5xV4Nfl6ysgk5VfXtSX4zyc+31r48Pq+11rJEmV99\naa19tbV2bUZXUb8syQ8MHNJcq6pXJ3mytfYHQ8eyoH60tfbSjG7Jd3tV/b3xmT6n3+SSJC9Ncldr\n7SVJ/n023aJdmzELi9i/LvjxeiE/+90/jW7KKKHoe5M8Pwt+15J5bOeLqar/NqPbyN4zdCw7UVXf\nluStSRZiXGlYQNuefy+zRTyG78JdSf5uRredPpPkzmHD6c8innfu1QXqunTb1W9OLLhHk/ydNrrN\n/7uS/G9DBLHdcXFeXCTGwdtx87Goql486xguZgcx/u9J9rXREMUP5etXfM/EIvzGssMYB23Hzsqe\nn8MuDN53TGoR+u+9mPc+f68W4VxhL+b9/GKv5uW8ZCUTcqrqeRkdBO5prX2oK37i/G2+uscnh4pv\n3rXRUBgfSfIjGd0e7ZJu1lVJTg8W2Px5eZKfqqpTGd3a/seTvDPabEe6uyektfZkkg9n9IOcz+nW\nHk/y+FjW6gcz+ie9NmNmdtm/nk4ynkU95PFwt8frr8Xezf/OJH8xy4DH7PazPy/t/p8m+dPW2p+1\n1v6/JB/KaDssQpuP2207z0v7p6oOJXl1klu6f1om8x/3380oieuPus/rVUkeraq/nfmPncW1MvvQ\nFuffy2wlzpNba090P6z9TZJfy5Js11X6XedCdV3W7Zr4zYkLmvu+uLX25fO3+W+tPZjkeVX1wlnG\nsMVxcdzg7XixGOehHcdiOX8s2nzhyNx8N90qxtbaX7TW/qp7+utJ/pMZh/ZNv7FU1f+6aZmh2/Gi\nMc5BO+7k/HzwzzULZSn3l3nqO/ZiEfrvvVikPn+vFuFcYS/m+Pxir+bivGTlEnKqqpK8O8ljrbW3\nj826P8mt3fStSe6bdWzzrKq+u6ou66YvTfITGY3795EkP9Mtpt3GtNbe0lq7qrW2L8lrk/zb1tot\n0WYXVVXPr6rvOD+d5BVJPhWf0y211r6U5ItV9f1d0fVJPhNtxozsoX+9P8kbauS6JM+MDTEwU3s4\nXo/X6We65Qe5AnsPn/15afd/l+S6qvq2bt85H/fct/kmu23nf5PkFVX1gu4uQa/oymaqqm7I6Dad\nP9Vae3Zs1v1JXltV31pVL0qyP8nvJfn9JPur6kVV9S0ZfU7un3XcrbUTrbXvaa3t6z6vjyd5afc5\nmOs2Z6HNxf4/bducfy+zlThPPp+g0vnpLMF2XaXfdbaq67JtV785cRHz8h1mS1X1t7vPa6rqZRn9\n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\ne5JMTU1lZmZmSUHs3bt3yW0sxY6t+w5caR5Thy/+3NUm9tWxXmNfr3En6zv21f6/EQAAAAAAAGAz\nWlJCTlX9pyT7krxpKLo5yTd0961V9R1J/qSqHt3dX5x7bnefn+T8JNm2bVtPT08vJZTMzMxkqW0s\nxWKXP9qxdV/OvW4SeVErT+yrY73Gvl7jTtZ37Bc+5YhV/b8RAAAAAAAAYDM64JJV+1NVZyV5RpIz\nu7uTpLvv7O5bh+1rknwqySMnECcAAAAAAAAAAKwLi0rIqaqnJPmFJM/s7q+MlT+8qu4/bH9TkpOT\n3DCJQAEAAAAAAAAAYD044BosVfWWJNNJjqmqm5L8cpJzkjwgyburKkmu6u4XJPnuJL9aVf+Y5GtJ\nXtDdX1im2AEAAAAAAAAAYM05YEJOdz9nnuIL9lP3rUneutSgAAAAAAAAAABgvVrUklUAAAAAAAAA\nAMD8JOQAAAAAAAAAAMAEScgBAAAAAAAAAIAJkpADAAAAAAAAAAATJCEHAAAAAAAAAAAmSEIOAAAA\nAAAAAABMkIQcAAAAAAAAAACYIAk5AAAAAACbRFU9sKr+sqr+uqo+WlX/dSg/saqurqpdVXVJVR02\nlD9g2N81HN+ymvEDAACsF4esdgCTct2eO3LWzitWOwwAAAAAgLXsziRP7u69VXVokvdX1f9K8uIk\n53X3xVX1uiRnJ3nt8P227j6pqs5I8vIk/2a1ggcAAFgvzJADAAAAALBJ9MjeYffQ4auTPDnJZUP5\nRUmeNWyfNuxnOH5qVdUKhQsAALBubZgZcgAAAAAAOLCqun+Sa5KclOQ1ST6V5Pbu3jdUuSnJccP2\ncUluTJLu3ldVdyQ5Osnn57S5Pcn2JJmamsrMzMySYty7d++S21iLNmq/ko3bt7XQrx1b9x240iJM\nHb7wtlf7PTgYy/UzW66fw8FYC7+PAMDCScgBAAAAANhEuvuuJKdU1VFJ3pbkWyfQ5vlJzk+Sbdu2\n9fT09JLam5mZyVLbWIs2ar+Sjdu3tdCvs3ZesSzt7ti6L+det7CPiXafOb0sMSyH5fqZLdfP4WBc\n+JQjVv33EQBYOEtWAQAAAABsQt19e5Irk3xXkqOqavaT+eOT7Bm29yQ5IUmG40cmuXWFQwUAAFh3\nJOQAAAAAAGwSVfXwYWacVNXhSb43yfUZJeY8e6j2vCRvH7YvH/YzHH9vd/fKRQwAa09VnVBVV1bV\n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\n5+539OGqem/3uzuUff0tXe5PVtVbu7aFXO9V9Z6qOlZVD4+1rZm1Rt7Vrf+Hqurl80vOPK2136ya\nP8h9ZQP9Wq6qp8aOqz8764xbVVUXV9WHq+pT3bHpLWssM7jttsF+DXK7rXfOumqZ53Xj4aFufNwx\n+6Sbs8F+7a6qPx/bZj8xj6xbVavO1VfNG9w2Y3qGMJ4u+tg4hPFtCGPVEMacIY0fQxgHTpNx7uux\n1vj70ar5cz8+sjiGMJ5uxaKPwZMYwvi9FUMY87dqCOcKWzGk84utGsJ5CdvXesfFqvr5qjoy9nt1\n1dhrfrrbJz9dVT801n5F13aoqvZNKe+Gv8M81ThVVdd1y3+mqq6bQs71vvtbiPW61jlMn+uxqr6r\n206HutdWz1n/dY2+D36oqj5YVed27Tuq6v8bW7+/frpM6/W7x6y9bfPq8fvXdbLeMZbzcFU92LXP\ne72ud5xarH22tTaoR5JK8vxu+jlJPprksiR3Jnld1/7rSf7HeWc9RR/eluS3knyoez6I7EkOJ3nx\nqrZ/lWRfN70vyS/NO+cauQ8k+Ylu+rlJzh1C7lV9eHaSJ5J88xCyJ7kwyZ8lObt7fmeS3UPY15N8\nR5KHk3x9krOS/F6Sb13U9Z7k+5O8PMnDY21rZk1yVZJ/3x1HL0vy0Xnn91ic/WbV/EHuKxvo1/LJ\nsXdojyQXJHl5N/2CJP9vkpcOfbttsF+D3G5Z55x11TL/U5Jf76Zfl+SOeefuqV+7k/zqvLNO0Mdn\nnKsPfZt5TO8xhPF00cfGIYxvQxirhjDmDGn8GMI4cJqMc1+PWePvR6vmz/346LE4jyGMp1Pq11zH\njgn7tvDj9xT7NcjtNoRzhSn2a+7j4oR9XPjzEo/t+1jvuJjk55P8L2ss/9Ikn0jyvCQvSfLZjL7b\nenY3/S0ZfUf3idXH157y/p1z0Gzyu5Ik5yf5XPfzvG76vCmu4/Hv/hZivaaH75xOtR6T/GG3bHWv\nvbLnrK9KclY3/UtjWXdk/fOyNTOt1+8es/a2zdPj969rZV01/6YkP7sg63W949RC7bODu0JOGzne\nPX1O92hJfiDJ+7r2A0leO4d4p1VVFyV5dZLf7J5XBpJ9HVdnlDlZwOxV9cKMDhy3JElr7W9aa3+Z\nBc+9hsuTfLa19miGk/2sJGdX1VkZFbcczTD29f8mowPw0621E0n+Y5J/mgVd7621jyT5wqrm9bJe\nneS27jj6QJJzq+qC2SRlkayz34wb5L6ygX4NVmvtaGvt4930l5M8klHx47jBbbcN9muQTnHOOm78\neP2+JJdP8r9CZmGD/Rqs1efqaxjcNmN6hjCeLvrYOITxbQhj1RDGnKGMH0MYBzaQcQjmfnxkcQxh\nPN2KRR+DJzGE8XsrhjDmb9UQzhW2YijnF1s1hPMStrctHBevTvLbrbW/bq39WZJDSV7RPQ611j7X\nWvubJL/dLTsLm/2u5IeS3Nda+0Jr7YtJ7ktyxRTzjX/3t56ZrteevnNacz12876htfZAa60luS0T\nfNe2VtbW2u923+0lyQNJLjrVe5wmU2/fC27y3HBT27zvWoNTZe0+65ok7z3Ve8xwva53nFqofXZw\nBTnJVy/T92CSYxmtkM8m+cuxX7DHs7gny/8myb9I8rfd8xdlONlbkt+tqo9V1Z6ubam1drSbfiLJ\n0nyireslSf48yf9Ro0s7/mZVnZPFz73a6/K1g9vCZ2+tHUnyy0n+U0aFOE8l+ViGsa8/nOT7qupF\nVfX1GVVLXpwBrPcx62W9MMljY8st6jZg/rbzvvI9NbqU8b+vqn847zBbUaNLEL8so//5NW7Q2+0U\n/UoGut1Wn7O21tbdZt34+FRG54YLbQP9SpJ/1l32831VdfGMI05i9bn6aoPcZszNUI7LC3GMHcL4\ntshj1RDGnIGMH0MYB06XMZn/elzr70fjFub3mkHYzvvLQozBkxjC+L0Vizzmb9UQzhW2YiDnF1s1\nhPMSzhBrHBff3P1evae+druZ9Y79sxoTNvMd5ryznjT+3V+ymOs16W89XthNr26flh/P6IomJ72k\n+674P1bV93Vtp8o0i+8F+9jms6w1+L4kT7bWPjPWthDrddVxaqH22UEW5LTWvtJauzSjqrZXJPn2\nOUfakKr64STHWmsfm3eWLfre1trLk1yZ5Iaq+v7xmV1l2KJVoJ+V0WW1bm6tvSzJf87o0lRftaC5\nv6pG9/l7TZL/a/W8Rc3eDRpXZ1QQ9feSnJPpVhH3prX2SEaXsfvdJL+T5MEkX1m1zEKu97UMKSvM\nwMeTfHNr7TuTvDvJv5tznk2rqucneX+St7bWvjTvPH05Tb8Gu91Wn7NW1XfMO1MfNtCv/zvJjtba\nP8qoeP7A6vdYRNvgXB22YiGOsUMY3xZ9rBrCmLPo48cQxoENZlyEcfiUfz8CkizA2DGpIYzfW7Ho\nY/5WDeFcYSsW/fxiq4ZwXsKZY43j4s1J/uskl2b0H7JvmmO8cYP6DnON7/4Wdb0+w6Ktx/VU1c8k\nOZHk9q7paJK/331X/LYkv1VV37DR95tSvwexzVd5fZ5ZRLYQ6/VU52+LsM8OsiDnpDa69dCHk3xP\nRpcUOqubdVGSI3MLtr5XJnlNVR3O6DJSP5DkVzKM7CevepLW2rEkH8yoGOrJ7nJNJy8/dWx+Cdf0\neJLHxyrj35dRgc6i5x53ZZKPt9ae7J4PIfs/SfJnrbU/b639lyQfyGj/H8q+fktr7btaa9+f5IsZ\n3XNwCOv9pPWyHsnoaj8nLew2YO625b7SWvtS6y5l3Fq7N8lzqurFc461YVX1nIxOKm9vrX1gjUUG\nud1O16+hb7fkGeesq4tTv7rNuvHxhUk+P9t0W7dev1prn2+t/XX39DeTfNess23R3zlXr6r/c9Uy\ng95mzNzCH5cX4Rg7hPFtSGPVEMacBR4/hjAOnDbjAqzH9f5+NG7uv9cMyrbcXxZp7NiKIYzfWzGk\nMX+rhnCusBULfH6xVUM4L+EMsNZxsbX2ZFcM97dJfiNfO9db79g/kzFhk99hzjVr5xnf/S3qeu30\ntR6P5Jm3kJpK5qraneSHk1zbFWOkjW7/9Plu+mMZ3X3nH5wm01S/F+xxm38+M/j+tXv/f5rkjrE+\nzH29rnP+tlD77OAKcqrqG6vq3G767CQ/mNH9wD6c5Ee7xa5Lctd8Eq6vtfbTrbWLWms7MroM2e+3\n1q7NALJX1TlV9YKT00leldGtfe7OKHOygNlba08keayqvq1rujzJp7LguVdZXW04hOz/KcllVfX1\nVVX52npf+H09Sarqm7qffz+jweW3Moz1ftJ6We9O8sYauSzJU+1rl2yDcdtyX6mq/6o7JqWqXpHR\nedAg/lDR5b4lySOttXess9jgtttG+jXU7bbOOeufrlps/Hj9oxmdGy70/zDZSL9O/mOn85qMztUX\n3jrn6v/9qsUGt82Yq4U/Ls/7GDuE8W0IY9UQxpwhjB9DGAc2knHe6/EUfz8at/DHRxbKttxf5j12\nTGII4/dWDGHM36ohnCtsxRDOL7ZqCOclbH/rHRdX/V79SL52rnd3ktdV1fOq6iVJLknyh0n+KMkl\nVfWSGl0V5nXdsn1m3ex3mOuNU/8hyauq6rwa3QniVV3bNDzju79FXK9jelmP3bwvVdVl3f71xvT8\n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\nAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBA\nCnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAA\nAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAA\nAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIA\nAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBA\nCnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAA\nAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAA\nAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIA\nAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBA\nCnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAA\nAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAA\nAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIA\nAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBA\nCnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAAAGBACnIAAAAAAAAA\nAGBACnKAW6iqq6tq97zjAGD2qurNVfWUecdxKKmqn6+q3553HADMXlWdXlV/usH8R1TV3hmGBAAA\nAMCAFOQwM1X1e1X14lXT/lNVXV9V95pRDAfUoVlVt6+q51TVlVX1haraW1UvrKp7b2OYU6uq+1VV\nWzXt6VX1r1W1r6o+X1UfqKrHzCtGADoLkgerqn6uz2f7+iLMl63Mb609qrX2+9scw6CFn33e27Nq\n2u9V1Zf7Nt7QFxp9/VCfebDWOg5prf1ya+1H5hQSwNJYkDz791X1fas+v60x7aaqOqy1dklr7TH9\n9B39sscd4Gc+pKre2K/zhqp6T1U9dag29Z/xe31sp66a/pv99B8a8vMAAAAAloWCHGbpJ5I8pqoe\nmSRVdYckv5vk7NbatUN9SFUdNtB6KskfJXlMkh9IcpckD0zyoSQPP4j17Zhm2kDe0Vq7U5Ijk7ww\nyauq6oht+iwAprMIefC/JDktycP7PPHgJG8b6rMXzK/0bTw2yQ1JLlproW3MxQDM1iLk2bcnOWni\n9UlJ/nqNaX/RWvvXAWJ5WJI/S3JZkn+X5KgkP5bklINc363aNjHtb5M8dWL6bZM8McnHD+az5qWq\nblNV+sIAAACAmdAJwcy01q5P8uNJLqyqw5Ocm+TvW2sX951iP9tfUfjZqnpFVd01+UqH2aur6lNV\n9bmq2lNV/2Flvf3Ver/VXxX4hSTfWVWPraqPVdXN/ZX4P7lWTFX1zqr6par6y37ZN1bV3frZ353k\nu5I8obV2eWttf2vtc62132itXdy//xZX+VfVc6tqZd79+qsFn1ZVn0zy5rWm9cs+tKre3bfvg1V1\n0pQxvr1fZl//ePCqbf5vSV6a5E5J7jexzu+tqo/0n/fWqvqGdbbPuvsFgAOzIHnwwUne2Fr7eB/T\nta21351Y1zur6oz++dOr6s+r6vz+cz9eVY+aWPaoqrq4qq6tqhur6g8n5j2uqv6qf987q+oBm22f\nfn1vqKrP9Ov7k6o6emL+mdWN7HNzH8tpVXVCkv/dt3lfVX12je3+hSQvT/KAfj3PrapXVtXLq+rm\nJD9UVXeoqt/o23JNVf1aVd2uX/4R/ec+u4/tH6vqe/pt/HfVjUbwMxNxrrmuqrpLkj9Jcu+JvH3P\nyWOH/v3r5uh+Xz6zqq6obiSEl1fV7TfbtgCHggXJs6sLcr4zyfPWmLZyHjc5ytvb+38/0ueIyVF1\nfmYiB02OfvO/kryotfY/W2vXt857W2unrbH+W43Cs07bbjWtf/sfJ9nd57MkOTXJ+5J8ZmL9x1fV\n2/rc+NmqeunE8hvmsSmOA/59f0xxc3Uj312wKn9udk79y1X1riRfSLIQI94CAAAAy09BDjPVWvuD\nJO9P98PYWf0jSX4yXYfeSUmOSbIvyW9MvPV1SY5P8rVJPpyuyGTSDyb5pSRHJHlXkhcnObO1dkSS\nb0ry5xuE9YNJTk+yM8nhSZ7ZT39Ekne11q450HauclKSb0zXvltNq6pjk1yarsP4bknOSfJHVXXU\nFDGelCSttTv1j/dOfnB1V/0/LcmXk1zVT/sP6bbfjye5R7orKi+t7grH1TbbLwAcgAXIg+9O8rSq\n+qmqelBtPqrcdyS5It0V9+cnedHEvJcluV2S+ye5Z5IXJEl1xaG/m+Tp/fsuSvLalQKXDdymf9+9\nk9wnyb9MrPPOSX4tySP7Nj00yYdaa1ekGwngHX0evPvqlVY3QtwPJvnAxOTv7eO/S5JXJvmFJLvS\nbatv6df/7Inlj+nj+7okv9xvh9P6ZXcneU599XaWa66rtXZTku9J8smJvH3dqlinydFPSvLIdCMh\nPCjJD6+7RQEOMQuQZ9+e5Juq6i79udi39LHcc2Lat+erxTeTVgpI/mOfI1YKXY9Jcsd0OehHklxQ\nVXfu89uJSV495eZZz+q2rTftS0leny4PJd1oOS9Zta5K8tx02/H+6XLVz69aZr08tu5xQO8VSf4i\n3bHFc5N85TZZU55T/3C6kQLvnOTqdbcGAAAAwIAU5DAP/zXdLZ+e01q7qp/2I0l+trV2TWvtn9J1\n/n1/Vd2mtfZvrbWLW2s39/N+McmD+qseV7ymtfauftl/Ttd5d/+qOqK1dkNr7f0bxPOi1trftda+\nmOQP0t2WKuk6+oYY2vzc1toXW2tfWmfaU5Nc2lp7Ux//G5P8VZJHTxHjeh5WVZ9L12n6q0l+sLW2\nMmrAaf3nvbW19i9Jzkv3g+S3rbGedffLAW0BACbNLQ/2I7z993S3Y3x7kuuq6qc2iPXvW2sX9bfV\nuCTJMVV19/6Hr5OT/Ghr7cbW2r+01lZ+XDwryf/XX6H/r621lVtFPXiN9X9Fa+0zrbXXtNa+1Fr7\nfJJfSfKfJhdJ8oCqukM/ss9HN1pfknP6XPi3SW6f7ke4Fe9srf1Jv72+lOQpSX6xj+G6JM/JLQtd\n/inJeX3efEW6YpnzW2v7WmsfSvI36X6QzRTr2sg0OfrXW2uf6keCeF02PyYAONTMM8/+fbpzyIel\nK8b5aL/8uyam3SbJLS6k2MQ/JXlun2svTfLPSb4+XeFJZevnrKvbtt60pCvAeWp1I7Z+R7oimK9o\nrf1ta+2y1tqX+xx4fm6Zy5N18thGxwFV9e/S5dlf7Nf99nTFQSumOae+qLX2sX477j/YjQUAAABw\nIPyozsy11j6d5LNJPjIx+d5J/qQfXvpz6a6WJ5GKAAAgAElEQVTGT7orCQ+rqv+3uttTfD7Jlf28\nyavgr8otfW+SxyX5ZD/k+FrFJis+NfH8i+lu75Qk1ye519QNW9/q2FZPu0+SJ6+0vW//Q9JdAblZ\njOt5Z2vtyHSdtG9I1/m74uuSfGLlRetua3V1kqNza+vul00+H4B1zDsPttZe2lo7OcmRSZ6R5Fer\n6uR1wl2df5IuBx2b5LP9qC+r3SfJs1bltXtl7TzzFVV1p6p6YVV9sm/nW1fa2P8w9+Q+3k9V1euq\n6us3Wl+6ApojW2v3aq09obX2DxPzVm+vW+TG/vlkvJ/ti5KSrtg1ST49Mf9L+Wpu3mxdG5kmRx/o\nMQHAIWXeeTZfvW3VSUne0U9758S0d/dFl9OazEHJV7/7b0hXrLrVc9bNzlcn/Xm6EXueneS1q4p1\nUlVfW1Wvqu6WjZ9PcnFuuR2TdfLYRscB6fLj9asucjnQc+r12gQAAACwbRTksCiuTncbiiMnHndo\nrX0q3dVup6S7yvEuSe7Xv6cm3t8mV9Zae09r7XHpCkdel+5q9gP1Z0m+vao26uD8QpKvmXj9tasX\naK21TaZdleTFq9p+eGvtf04R463Wvepzbk7yo0nOrKqVK/f/MV2HZZKkH+3mmCRr3Zpro/0CwHBm\nngf7K8Rfke4HywccYLxXJbl7fyupteb90qq2fE1r7VWbrPOnk9w3yYmttTuna+9kvH/aWntEuh8e\nr0zyOyuzDjD2td5zi9yY7ofbg71l5Ubr2izWA8nRAExvlnl2pSDnO/PVgpx3TExb63ZVt/qMzfTn\nev8nyfdtsNim56vrfO6asfTnsb+f5Ozc+nZVSfK8dCP4nNDn8jNyy+24kY2OA65NclRV3WFi2rET\nz6c5pz6Y4wUAAACALVGQw6L47SS/UlX3TpKqumdVPa6fd0S6Tr3r03Um/o+NVlRVd6yqH6yqO/dX\nHt6c5N8OIqY3JXlbkj+uqm/pr5y8c1X916o6o1/mg0lOq6odVXVikv98EJ/z0iTfW1WP7D/jDlX1\nXVX1dZu+M7kuSeuH8F5Ta+0zSS5K8vP9pFcleVxV7a6q26br+Lw5yXvWePtG+wWA4cwkD1bVf6mq\nU6rqiKq6TVWdmuQb0v2gN7X+FiB/luS3qurIqrptVZ3Uz/7dJM+oqgdX505V9T2rbv1xuz7frTx2\n9O38YpIbq+qoJL8w0aZ79ev4miRfTvcD40pu/3S6W2nd9kDasMrLk/xCfzuue6TLmb+3Dev6dLpC\npiPWee+B5GgApjfL8823J3lQkocm+ct+2gfT3WbqpKxTkNOPgnN9knXP7dbw00meXlXP7G8jlf7c\n9WX9/L9K8k1VdUJV3THJuQew7vWcn6646S/WmHdEuhx9U3W3t9zotphrvXfN44D+VmBXJDm3qm5X\nVQ9LcurEe7dyTg0AAACwbRTksCh+Lckbk1xWVTen67h8cD/vxemuGP/HdFfx/+Waa7il05N8oh/q\n+swkP3SgAfVX//3nJG9O8uokn0/XCfjAJJf1i/0/Sb4xyefS/eD2sluvadPP2ZtuyPOfT/KZJJ9M\nd8Xhpn+f/VWRv5rkPf3Q3LvWWfT8dD/w3b+19pF02+eC/vMeneRx6wybvtF+AWA4s8qDn0/yc+mu\nJL8xya8kOau19q6DiHllnX+brtDkx5OktfbudKOzXdB/xt/m1nn4Telu87Ty+Ll02+Au6X6M/Msk\nfzqx/GHpfnS8tp//HeluX5Ukb0nyd0k+XVUHO4LbL6X70fLDST6UrgDmV4deV2vtw0n+MMnePm/f\n4haQB5ijAZjezM43W2sfTXd+eFV/vrZSbHN5ksOTvHuD9Z6b5GV9jtj0Yo/W2juSPCLJd6fLLTek\nyyFvmIjlV5LsSfI3WX90nqm11q5vrV22zuxzk5yY5KYkl6bLedPa6Dgg6W5deVI//9wkr0xXSLWl\nc2oAAACA7VRr3E0HAAAAABZSVf1hkg+21n553rEAAAAArMfVQgAAAAAsrKo6saru299y85Qkj03y\nx/OOCwAAAGAjO+YdAAAAAABs4OvS3QLrbkmuTvJ/tdaumG9IAAAAABtzyyoAAAAAAAAAABiQW1YB\nAAAAAAAAAMCAFuKWVXe/+93bcccdt6V1fOELX8jhhx8+TEAzMsaYk3HGPcaYk3HGLebZmUXcl19+\n+Wdba/fY1g9ZMlV1UZLHJrmutfaAftrdkrwyyXFJ9iZ5UmvtxqqqJC9IckqSLyY5o7X2/v49pyf5\nuX61z22tXbLZZx9q+XRMsSbi3U5jijUR73Za1Fjl03E51PLpWsQ/X+KfL/HP33ptkE8BAAAYm4Uo\nyDnuuOPyvve9b0vr2LNnT3bv3j1MQDMyxpiTccY9xpiTccYt5tmZRdxV9Ylt/YDldHGS/53kJRPT\nzklyWWvtvKo6p3/9rCSPSXJ8//i2JBck+ba+gOfcJLuStCSXV9WlrbUbN/rgQy2fjinWRLzbaUyx\nJuLdTosaq3w6LodaPl2L+OdL/PMl/vlbrw3yKQAAAGPjllUAMKDW2tuT3LBq8uOTrIxwc0mSJ0xM\nf0nrvDvJkVV1ryTfneQtrbUb+iKctyR59PZHDwAAAAAAAAxhIUbIAYAlt7O1dm3//FNJdvbPj05y\n1cRyV/fT1pt+K1V1VpKzkmTnzp3Zs2fPlgLdt2/fltcxK2OKNRHvdhpTrIl4t9OYYgUAAAAAYLkp\nyAGAGWqttapqA67vwiQXJsmuXbvaVoenH9MQ92OKNRHvdhpTrIl4t9OYYgUAAAAAYLm5ZRUAbL9P\n97eiSv/vdf30a5IcO7HcMf209aYDAAAAAAAAI6AgBwC236VJTu+fn57ktRPTn1qdhyS5qb+11ZuS\nPKqq7lpVd03yqH4aAAAAAAAAMAJuWQUAA6qqlyfZneTuVXV1knOTnJfkVVV1ZpJPJHlSv/gbkpyS\n5MokX0zytCRprd1QVb+c5L39cs9prd0ws0YAAAAAAAAAW6IgBwAG1Fp78jqzTl5j2ZbkGeus56Ik\nFw0YGgAAAAAAADAjblkFAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAA\nAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAAD2jHvAJbF\ncee8/oDfc/YJ+3PGQbxvPXvPO3WwdQFwaLrimpsGzU0HSi4DgK07mPPTSUOcq8rpAAAAABzqjJAD\nAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAAD\nUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAA\nAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAA\nAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpADAAAAAAAAAAADUpAD\nAAAAAAAAAAADUpADAAAAAAAAAAADUpADAADAaFTV3qq6oqo+WFXv66fdrareUlV/1/971356VdVv\nVNWVVfWhqvrW+UYPAAAAABwqFOQAAAAwNt/VWntga21X//qcJJe11o5Pcln/Okkek+T4/nFWkgtm\nHikAAAAAcEhSkAMAAMDYPT7JJf3zS5I8YWL6S1rn3UmOrKp7zSNAAAAAAODQsmPeAQAAAMABaEne\nXFUtye+01i5MsrO1dm0//1NJdvbPj05y1cR7r+6nXTsxLVV1VroRdLJz587s2bNnSwHu27dvy+vY\nirNP2L+l9++849bXMc/2z3v7b5X450v887cMbQAAAIBkyoKcqtqb5OYk/5pkf2ttV1XdLckrkxyX\nZG+SJ7XWbqyqSvKCJKck+WKSM1pr7x8+dAAAAA5BD2utXVNV90zylqr668mZrbXWF+tMrS/quTBJ\ndu3a1Xbv3r2lAPfs2ZOtrmMrzjjn9Vt6/9kn7M/zr9ja9Tt7n7J7S+/finlv/60S/3yJf/6WoQ0A\nAACQHNgtq76rtfbA1tqu/vU5SS5rrR2f5LL+dZI8Jsnx/eOsJBcMFSwAAACHttbaNf2/1yV5TZIT\nk3x65VZU/b/X9Ytfk+TYibcf008DAAAAANhWB1KQs9rjk1zSP78kyRMmpr+kdd6d5MiVjlEAAAA4\nWFV1eFUdsfI8yaOSfDjJpUlO7xc7Pclr++eXJnlqdR6S5KaJW1sBAAAAAGybacegbkne3A/7/Tv9\ncN47JzoyP5VkZ//86CRXTbz36n6aTk8AAAC2YmeS13R3Ss6OJC9rrb2xqt6b5FVVdWaSTyR5Ur/8\nG9LdTvnKdLdUftrsQwYAAAAADkXTFuQ8rLV2TVXdM8lbquqvJ2e21lpfrDO1qjor3S2tsnPnzuzZ\ns+dA3n4r+/bt2/I6tuLsE/Yf8Ht23vHg3reeWbV/3tv6YIwx5mSccYt5dsYaNwDAwWqtfTzJN68x\n/fokJ68xvSV5xgxCAwAAAAC4hakKclpr1/T/XldVr0lyYpJPV9W9WmvX9rekuq5f/Jokx068/Zh+\n2up1XpjkwiTZtWtX271790E3IumKUba6jq0445zXH/B7zj5hf55/xbQ1UZvb+5Tdg61rI/Pe1gdj\njDEn44xbzLMz1rgBAAAAAAAAlt1tNlugqg6vqiNWnid5VJIPJ7k0yen9YqcneW3//NIkT63OQ5Lc\nNHFrKwAAAAAAAAAAWGrTDM+yM8lrqmpl+Ze11t5YVe9N8qqqOjPJJ5I8qV/+DUlOSXJlki8medrg\nUQMAAAAAAAAAwILatCCntfbxJN+8xvTrk5y8xvSW5BmDRAcAAAAAAAAAACOz6S2rAAAAAAAAAACA\n6SnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAA\nAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAA\nAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnIAQAAAAAAAACAASnI\nAQAAAAAAAACAASnIAQAAAAAAAACAASnIAYAZqaqfrKqPVNWHq+rlVXWHqrpvVb2nqq6sqldW1e36\nZW/fv76yn3/cfKMHAAAAAAAApqUgBwBmoKqOTvLfkuxqrT0gyWFJTkvyvCTnt9bul+TGJGf2bzkz\nyY399PP75QAAAAAAAIARUJADALOzI8kdq2pHkq9Jcm2Shyd5dT//kiRP6J8/vn+dfv7JVVUzjBUA\nAAAAAAA4SDvmHQAAHApaa9dU1f9K8skkX0ry5iSXJ/lca21/v9jVSY7unx+d5Kr+vfur6qYkRyX5\n7OR6q+qsJGclyc6dO7Nnz54txbnzjsnZJ+zffMFtciDx79u3b8vtnSXxbp8xxZqIdzuNKVYAAAAA\nAJabghwAmIGqumu6UW/um+RzSf4gyaO3ut7W2oVJLkySXbt2td27d29pfb/5+6/N86+Y3+HB3qfs\nnnrZPXv2ZKvtnSXxbp8xxZqIdzuNKVYAAAAAAJabW1YBwGw8Isk/tNY+01r7lyR/lOShSY7sb2GV\nJMckuaZ/fk2SY5Okn3+XJNfPNmQAAAAAAADgYCjIAYDZ+GSSh1TV11RVJTk5yUeTvC3JE/tlTk/y\n2v75pf3r9PPf2lprM4wXAAAAAAAAOEgKcgBgBlpr70ny6iTvT3JFuhx8YZJnJXlmVV2Z5KgkL+rf\n8qIkR/XTn5nknJkHDQAAAAAAAByUHZsvAgAMobV2bpJzV03+eJIT11j2n5J8/yziAgAAAAAAAIZl\nhBwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAA\nABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAA\nAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwA\nAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQ\nghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAAAAAAAAABiQghwAAABGpaoO\nq6oPVNXr+tf3rar3VNWVVfXKqrpdP/32/esr+/nHzTNuAAAAAODQoSAHAACAsfmJJB+beP28JOe3\n1u6X5MYkZ/bTz0xyYz/9/H45AAAAAIBtpyAHAACA0aiqY5KcmuSF/etK8vAkr+4XuSTJE/rnj+9f\np59/cr88AAAAAMC22jHtglV1WJL3JbmmtfbYqrpvklckOSrJ5Ul+uLX25aq6fZKXJHlQkuuT/EBr\nbe/gkQMAAHAo+vUkP5PkiP71UUk+11rb37++OsnR/fOjk1yVJK21/VV1U7/8ZydXWFVnJTkrSXbu\n3Jk9e/ZsKcB9+/ZteR1bcfYJ+zdfaAM777j1dcyz/fPe/lsl/vkS//wtQxsAAAAgOYCCnHx1SPA7\n969XhgR/RVX9drqhwC/IxJDgVXVav9wPDBgzAAAAh6CqemyS61prl1fV7qHW21q7MMmFSbJr1662\ne/fWVr1nz55sdR1bccY5r9/S+88+YX+ef8WBdBfc2t6n7N7S+7di3tt/q8Q/X+Kfv2VoAwAAACRT\n3rLKkOAAAAAsgIcmeVxV7U03YuvDk7wgyZFVtVJBckySa/rn1yQ5Nkn6+XdJN5IrAAAAAMC2mvaS\nN0OCb+JghvMeYhjwSbNq/7y39cEYY8zJOOMW8+yMNW4AgIPVWnt2kmcnST9Czk+11p5SVX+Q5Inp\ninROT/La/i2X9q/f1c9/a2utzTpuAAAAAODQs2lBjiHBp3MwQ4IPMQz4pFkNCT7vbX0wxhhzMs64\nxTw7Y40bAGAbPCvJK6rquUk+kORF/fQXJXlpVV2Z5IYkp80pPgAAAADgEDNNNcjKkOCnJLlDkjtn\nYkjwfpSctYYEv9qQ4AAAAGyH1tqeJHv65x9PcuIay/xTku+faWAAAAAAAElus9kCrbVnt9aOaa0d\nl+5qwre21p6S5G3phvxO1h4SPDEkOAAAAAAAAAAAh5hNC3I28Kwkz+yH/j4qtxwS/Kh++jOTnLO1\nEAEAAAAAAAAAYDymuWXVVxgSHAAAAAAAAAAANraVEXIAAAAAAAAAAIBVFOQAAAAAAAAAAMCAFOQA\nAAAAAAAAAMCAFOQAAAAAAAAAAMCAFOQAAAAAAAAAAMCAFOQAAPz/7d19kF1nfR/w7w8LiENSzEu6\ncWw3YoKHjBsVcDVgSptR44T6hUG0QxxTFyzqjJoWUmg0kwg6E9K0fzjTEgI044yCiUXq8lIHak/s\nvHgMO2lmYjfBGAw4FIWKWKqxk2AMqpsSJU//uEfuRd6VrnbP3nPP7uczs7PnPue5937v2aM9+xz9\nznMAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACg\nRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAA\nAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAA\nAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpy\nAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAGBOquqcqrqlqv6wqh6oqpdV1bOr6s6q+kL3/Vld36qq\nd1fVoar6dFVdPHR+AAAAAAAAYDYKcgBgft6V5Ddba9+b5IVJHkiyP8ldrbULk9zVPU6Sy5Nc2H3t\nTXLD/OMCAAAAAAAAa6EgBwDmoKqemeT7k9yYJK21b7TWvppkd5KDXbeDSV7dLe9O8v42cXeSc6rq\n3DnHBgAAAAAAANZg29ABAGCLeF6SP0nyK1X1wiSfSPLmJEuttYe6Pl9OstQtn5fkwannH+naHppq\nS1XtzWQGnSwtLWV5eXldIZfOTvbtOL6u11iPM8l/7NixdX/eeZJ344wpayLvRhpTVgAAAAAANjcF\nOQAwH9uSXJzkx1tr91TVu/L/b0+VJGmttapqZ/KirbUDSQ4kyc6dO9uuXbvWFfI9N9+ad9w/3J8H\nh6/ZNXPf5eXlrPfzzpO8G2dMWRN5N9KYsgIAAAAAsLm5ZRUAzMeRJEdaa/d0j2/JpEDn4RO3ouq+\nP9KtP5rkgqnnn9+1AQAAAAAAAAtOQQ4AzEFr7ctJHqyqF3RNlyb5XJLbklzbtV2b5NZu+bYkr6+J\nS5I8NnVrKwAAAAAAAGCBuWUVAMzPjye5uaqeluSLSd6QSXHsh6vquiRfSnJV1/eOJFckOZTk8a4v\nAAAAAAAAMAIKcgBgTlpr9yXZucKqS1fo25K8ccNDAQAAAAAAAL1zyyoAAAAAAAAAAOiRghwAAAAA\nAAAAAOiRghwAAAAAAAAAAOiRghwAAAAAAAAAAOjRtqEDAAAAwGZy/9HHsmf/7UPHAAAAAAAGZIYc\nAAAAAAAAAADokYIcAAAAAAAAAADokYIcAAAAAAAAAADokYIcAAAAAAAAAADokYIcAAAAAAAAAADo\nkYIcAAAAAAAAAADokYIcAAAAAAAAAADo0bahAwAAAABsRtv3337Gz9m343j2rOF5Kzl8/ZW9vA4A\nAAAAZ84MOQAAAAAAAAAA0CMFOQAAAIxCVX1LVf33qvpUVX22qv5N1/68qrqnqg5V1Yeq6mld+9O7\nx4e69duHzA8AAAAAbB0KcgAAABiL/5vkB1prL0zyoiSXVdUlSX4uyTtba89P8miS67r+1yV5tGt/\nZ9cPAAAAAGDDKcgBAABgFNrEse7hU7uvluQHktzStR9M8upueXf3ON36S6uq5hQXAAAAANjCTluQ\nY0pwAAAAFkVVnVVV9yV5JMmdSf4oyVdba8e7LkeSnNctn5fkwSTp1j+W5DnzTQwAAAAAbEXbZuhz\nYkrwY1X11CS/W1W/keQnMpkS/INV9UuZTAV+Q6amBK+qqzOZEvxHNig/AAAAW0hr7S+TvKiqzkny\n0STfu97XrKq9SfYmydLSUpaXl9f1ektnJ/t2HD99xwXVR/71bsP1OHbs2KDvP20t27HP/WeI7bBI\n238t5B/eZvgMAAAAkMxQkNNaa0lWmxL8H3ftB5P8TCYFObu75WQyJfh/rKrqXgcAAADWrbX21ar6\neJKXJTmnqrZ1s+Ccn+Ro1+1okguSHKmqbUmemeTPVnitA0kOJMnOnTvbrl271pXtPTffmnfcP8v1\nL4tp347j685/+Jpd/YRZg+Xl5az3Z9iXPftvP+Pn9LH9Txji57BI238t5B/eZvgMAAAAkMw2Q06q\n6qwkn0jy/CS/mDOYEryqTkwJ/qcnvWavVyAOffXM0Fe9JfO78m3obb0WY8ycjDO3zPMz1twAAGtV\nVd+R5C+6Ypyzk/xQJrOyfjzJa5J8MMm1SW7tnnJb9/j3uvUfc7EIAAAAADAPMxXkbMSU4H1fgTj0\n1TNDX/WWzO/Kt6G39VqMMXMyztwyz89YcwMArMO5SQ52F408JcmHW2u/XlWfS/LBqvp3ST6Z5Mau\n/41JfrWqDiX5SpKrhwgNAAAAAGw9Z1QN0ueU4AAAAHAmWmufTvLiFdq/mOQlK7T/eZIfnkM0AAAA\nAIBv8pTTdaiq7+hmxsnUlOAP5P9PCZ6sPCV4YkpwAAAAAAAAAAC2mFlmyDElOAAAAAAAAAAAzOi0\nBTmmBAcAAAAAAAAAgNmd9pZVAAAAAAAAAADA7BTkAAAAAAAAAABAj057y6qxuP/oY9mz//ahYwAA\nAAAAAAAAsMWZIQcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqk\nIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAA\nAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAA\nAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcA\nAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqkIAcAAAAAAAAAAHqk\nIAcAAAAAAAAAAHq0begAbC7b998+dIQcvv7KoSMAAAAAAAAAAFuYGXIAAAAAAAAAAKBHCnIAAAAA\nAAAAAKBHCnIAAAAAAAAAAKBHCnIAAAAAAAAAAKBHCnIAAAAAAAAAAKBHCnIAAAAAAAAAAKBHCnIA\nYI6q6qyq+mRV/Xr3+HlVdU9VHaqqD1XV07r2p3ePD3Xrtw+ZGwAAAAAAAJidghwAmK83J3lg6vHP\nJXlna+35SR5Ncl3Xfl2SR7v2d3b9AAAAAAAAgBFQkAMAc1JV5ye5Msl7u8eV5AeS3NJ1OZjk1d3y\n7u5xuvWXdv0BAAAAAACABacgBwDm5xeS/GSSv+oePyfJV1trx7vHR5Kc1y2fl+TBJOnWP9b1BwAA\nAAAAABbctqEDAMBWUFWvTPJIa+0TVbWrx9fdm2RvkiwtLWV5eXldr7d0drJvx/HTd9wgZ5L/2LFj\n6/688yTvxhlT1kTejTSmrAAAAAAAbG4KcgBgPl6e5FVVdUWSb0ny15K8K8k5VbWtmwXn/CRHu/5H\nk1yQ5EhVbUvyzCR/dvKLttYOJDmQJM7kb90AABlwSURBVDt37my7du1aV8j33Hxr3nH/cH8eHL5m\n18x9l5eXs97PO0/ybpwxZU3k3UhjygoAAAAAwObmllUAMAettbe21s5vrW1PcnWSj7XWrkny8SSv\n6bpdm+TWbvm27nG69R9rrbU5RgYAAAAAAADWSEEOAAzrp5L8RFUdSvKcJDd27TcmeU7X/hNJ9g+U\nDwAAAAAAADhDblkFAHPWWltOstwtfzHJS1bo8+dJfniuwQAAAAAAAIBemCEHAAAAAAAAAAB6pCAH\nAAAAAAAAAAB6pCAHAAAAAAAAAAB6pCAHAAAAAAAAAAB6pCAHAAAAAAAAAAB6pCAHAAAAAAAAAAB6\npCAHAAAAAAAAAAB6pCAHAACAUaiqC6rq41X1uar6bFW9uWt/dlXdWVVf6L4/q2uvqnp3VR2qqk9X\n1cXDfgIAAAAAYKtQkAMAAMBYHE+yr7V2UZJLkryxqi5Ksj/JXa21C5Pc1T1OksuTXNh97U1yw/wj\nAwAAAABb0WkLclyBCAAAwCJorT3UWru3W/56kgeSnJdkd5KDXbeDSV7dLe9O8v42cXeSc6rq3DnH\nBgAAAAC2oG0z9DlxBeK9VfXtST5RVXcm2ZPJFYjXV9X+TK5A/Kl88xWIL83kCsSXbkR4AAAAtqaq\n2p7kxUnuSbLUWnuoW/XlJEvd8nlJHpx62pGu7aGptlTV3kxm0MnS0lKWl5fXlW3p7GTfjuPreo0h\n9ZF/vdtwPY4dOzbo+09by3bsc/8ZYjss0vZfC/mHtxk+AwAAACQzFOR0JzUf6pa/XlXTVyDu6rod\nTLKcSUHOE1cgJrm7qs6pqnOnTo4CAADAmlXVtyX5tSRvaa19raqeWNdaa1XVzuT1WmsHkhxIkp07\nd7Zdu3atK997br4177h/lutfFtO+HcfXnf/wNbv6CbMGy8vLWe/PsC979t9+xs/pY/ufMMTPYZG2\n/1rIP7zN8BkAAAAgmW2GnCe4ArFffWee19VDp7pSaRF+BitlG+vVVWPMLfP8jDU3AMB6VNVTMynG\nubm19pGu+eETF4J0t6R6pGs/muSCqaef37UBAAAAAGyomQtyXIHYvz6vekvmd+Xbqa5UWsvVf31b\naTuM9eqqMeaWeX7GmhsAYK1qMhC9MckDrbWfn1p1W5Jrk1zffb91qv1NVfXBTG6l/JjZWwEAAACA\neZipGsQViAAAACyAlyd5XZL7q+q+ru1tmRTifLiqrkvypSRXdevuSHJFkkNJHk/yhvnGBQAAAAC2\nqtMW5LgCEQAAgEXQWvvdJLXK6ktX6N+SvHFDQwEAAAAArGCWGXJcgQgAAAAAAAAAADM6bUGOKxAB\nAAAAAAAAAGB2Txk6AAAAAAAAAAAAbCYKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAA\noEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAA\nAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAA\nAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcK\ncgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAA\noEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAA\nAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAA\nAAAAAAAAoEcKcgAAAAAAAAAAoEcKcgAAAAAAAAAAoEfbhg5Af7bvv30u77Nvx/HsmdN7AQAAAAAA\nAACMjRlyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAA\nAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgR9uGDgAAW0FVXZDk/UmWkrQkB1pr76qqZyf5\nUJLtSQ4nuaq19mhVVZJ3JbkiyeNJ9rTW7h0iOwDAmdq+//bB3nvfjuPZs//2HL7+ysEyAAAAAIAZ\ncgBgPo4n2ddauyjJJUneWFUXJdmf5K7W2oVJ7uoeJ8nlSS7svvYmuWH+kQEAAAAAAIC1UJADAHPQ\nWnvoxAw3rbWvJ3kgyXlJdic52HU7mOTV3fLuJO9vE3cnOaeqzp1zbAAAAAAAAGAN3LIKAOasqrYn\neXGSe5IstdYe6lZ9OZNbWiWTYp0Hp552pGt7aKotVbU3kxl0srS0lOXl5XVlWzp7cpuHoZxJ/mPH\njq37886TvBtnTFkTeTfSmLICAAAAALC5KcgBgDmqqm9L8mtJ3tJa+1pVPbGutdaqqp3J67XWDiQ5\nkCQ7d+5su3btWle+99x8a95x/3B/Hhy+ZtfMfZeXl7PezztP8m6cMWVN5N1IY8oKAAAAAMDm5pZV\nADAnVfXUTIpxbm6tfaRrfvjErai674907UeTXDD19PO7NgAAAAAAAGDBKcgBgDmoyVQ4NyZ5oLX2\n81Orbktybbd8bZJbp9pfXxOXJHls6tZWAAAAAAAAwAJzyyoAmI+XJ3ldkvur6r6u7W1Jrk/y4aq6\nLsmXklzVrbsjyRVJDiV5PMkb5hsXAAAAAAAAWCsFOQAwB621301Sq6y+dIX+LckbNzQUAIxQVb0v\nySuTPNJa+76u7dlJPpRke5LDSa5qrT3azVD3rkyKXB9Psqe1du8QuQEAAACArWWmW1ZV1fuq6pGq\n+sxU27Or6s6q+kL3/Vlde1XVu6vqUFV9uqou3qjwAAAAbDk3JbnspLb9Se5qrV2Y5K7ucZJcnuTC\n7mtvkhvmlBEAAAAA2OJmKsiJE54AAAAsgNba7yT5yknNu5Mc7JYPJnn1VPv728TdSc6pqnPnkxQA\nAAAA2MpmumVVa+13qmr7Sc27k+zqlg8mWU7yU5k64Znk7qo6p6rOba091EdgAAAAOMnS1Jjzy0mW\nuuXzkjw41e9I1/ZN49Oq2pvJBSVZWlrK8vLy+sKcnezbcXxdrzGkzZJ/vT/HPqxlO/a5/YfYBseO\nHVuIbb9W8g9vM3wGAAAASGYsyFmFE57rNMbMyeLnXmlfGuvJnDHmlnl+xpobAGAjtdZaVbUzfM6B\nJAeSZOfOnW3Xrl3ryvCem2/NO+5fz3B7WPt2HN8U+Q9fs2voKNmz//Yzfk6f23+IbbC8vJz1/hsa\nkvzD2wyfAQAAAJL1FeQ8wQnPtRnrSc5Fz73SCcexnswZY26Z52esuQEANsDDJ2Zm7W5J9UjXfjTJ\nBVP9zu/aAAAAAAA21FPW8dyHuxOdccITAACAAd2W5Npu+dokt061v74mLknymNspAwAAAADzsJ6C\nHCc8AQAAmKuq+kCS30vygqo6UlXXJbk+yQ9V1ReS/GD3OEnuSPLFJIeS/HKSfzFAZAAAAABgC5rp\nvkPdCc9dSZ5bVUeSvD2TE5wf7k5+finJVV33O5JckckJz8eTvKHnzAAAAGxRrbXXrrLq0hX6tiRv\n3NhEAAAAAABPNlNBjhOeAAAAAAAAAAAwm5kKcoDZbd9/e2+vtW/H8exZw+sdvv7K3jIAAAAAAAAA\nAGfmKUMHAAAAAAAAAACAzcQMOWw6K81Qs9aZZgCYrzOZZWyjfrebZQwAAAAAAID1MkMOAAAAAAAA\nAAD0yAw5AAAAAJvQmcw+2JeTZzE0+yAAAACwVZkhBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAA\nAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQg\nBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAAAAAAAAAAeqQgBwAAAAAAAAAA\neqQgBwAAAAAAAAAAerRt6AAAAItk+/7bN+R19+04nj0zvvbh66/ckAxn4v6jj82cdyMswjYAAAAA\nAABYKzPkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAA\nAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTk\nAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABAjxTkAAAAAAAAAABA\njxTkAAAAAAAAAABAjxTkAAAAAAAAAABAj7YNHQDo3/b9tw/23vt2HM+e/bfn8PVXDpYBAAAAAAAA\nAIakIAcAAACATetMLlo5cZFJ31y0AgAAAFuPW1YBAAAAAAAAAECPzJADAAAAbDpD3soXAAAAAMyQ\nAwAAAAAAAAAAPTJDDrAhFuFq1MPXXzl0BIA1WYTfoft2DJ0AAAAAAABgvMyQAwAAAAAAAAAAPTJD\nDgAAAAAbYhFm/gMAAAAYghlyAAAAAAAAAACgRwpyAAAAAAAAAACgRwpyAAAAAAAAAACgR9uGDgCw\nUbbvv32mfvt2HM+eGfueicPXX9n7awIAAAAAAACw+BTkAADACmYt7DxTG1UIulFuuuwZg77/mfwc\nFNkCAAAAALAoFOQAAACruv/oY6MqIAIAAAAAgEWgIAcAgIWzCLOiAAD0ZaNm3jvZIv9dZMY5AAAA\ntpqnDB0AAAAAAAAAAAA2EzPkAGyQjb4CcpYrH12BCAAAAAAAADB/GzZDTlVdVlWfr6pDVbV/o94H\nADYzx1MAWD/HUwAAAABg3jakIKeqzkryi0kuT3JRktdW1UUb8V4AsFk5ngLA+jmeAgAAAABD2KgZ\ncl6S5FBr7YuttW8k+WCS3Rv0XgCwWTmeAsD6OZ4CAAAAAHNXrbX+X7TqNUkua639aPf4dUle2lp7\n01SfvUn2dg9fkOTz63zb5yb503W+xryNMXMyztxjzJyMM7fM8zOP3N/dWvuODX4PVuF4elpjyprI\nu5HGlDWRdyMtalbH0wE5nq6J/MOSf1jyD2+1z+B4CgAAwKhsG+qNW2sHkhzo6/Wq6g9aazv7er15\nGGPmZJy5x5g5GWdumednrLnp11Y+no4payLvRhpT1kTejTSmrCyWrXw8XYn8w5J/WPIPbzN8BgAA\nAEg27pZVR5NcMPX4/K4NAJid4ykArJ/jKQAAAAAwdxtVkPP7SS6squdV1dOSXJ3ktg16LwDYrBxP\nAWD9HE8BAAAAgLnbkFtWtdaOV9WbkvxWkrOSvK+19tmNeK8pvU0vPkdjzJyMM/cYMyfjzC3z/Iw1\nNzNyPD2tMWVN5N1IY8qayLuRxpSVOXE8XRP5hyX/sOQf3mb4DAAAAJBqrQ2dAQAAAAAAAAAANo2N\numUVAAAAAAAAAABsSQpyAAAAAAAAAACgR6MqyKmqy6rq81V1qKr2r7D+6VX1oW79PVW1ff4pn5Tp\ngqr6eFV9rqo+W1VvXqHPrqp6rKru675+eoisJ2U6XFX3d3n+YIX1VVXv7rb1p6vq4iFynpTpBVPb\n8L6q+lpVveWkPguxravqfVX1SFV9Zqrt2VV1Z1V9ofv+rFWee23X5wtVde3Amf99Vf1htw98tKrO\nWeW5p9yf5pz5Z6rq6NQ+cMUqzz3l75uNtEruD01lPlxV963y3EG2NeM35D5/pmY5ti6aqjqrqj5Z\nVb8+dJbTqapzquqW7vf7A1X1sqEznUpV/atuP/hMVX2gqr5l6EzT1nPMn7f1HOuHsFLeqXX7qqpV\n1XOHyMbWcLpjZy3g+HTaLMfTRRk/reZ0f/vWxEKNW0+oEY1fp/KMbhx7UobRjWlPyjDK8e1JOYx1\nAQAA2FJGU5BTVWcl+cUklye5KMlrq+qik7pdl+TR1trzk7wzyc/NN+WKjifZ11q7KMklSd64Qu4k\n+W+ttRd1Xz8734ir+vtdnp0rrLs8yYXd194kN8w12Qpaa58/sQ2T/O0kjyf56ApdF2Fb35TkspPa\n9ie5q7V2YZK7usffpKqeneTtSV6a5CVJ3j7H/8S7KU/OfGeS72ut/a0k/yPJW0/x/FPtTxvlpjw5\nc5K8c2ofuOPklTP+vtlIN+Wk3K21H5nav38tyUdO8fwhtjUjtgD7/Jma9di6SN6c5IGhQ8zoXUl+\ns7X2vUlemAXOXVXnJfmXSXa21r4vyVlJrh421ZPclDUc8wdyU9Z3rJ+3m7LCcb6qLkjyiiR/PO9A\nbB0jHp9OG/NYddqoxq0njGz8esJNGd84dtpNGd+YdtpNGef4dtpNMdYFAABgCxlNQU4mJ20Otda+\n2Fr7RpIPJtl9Up/dSQ52y7ckubSqao4Zn6S19lBr7d5u+euZ/KfWeUNm6snuJO9vE3cnOaeqzh06\n1JRLk/xRa+1LQwdZSWvtd5J85aTm6f33YJJXr/DUf5DkztbaV1prj2Zy8nClE3K9Wylza+23W2vH\nu4d3Jzl/Hllmtcp2nsUsv282zKlyd7/TrkrygXnlYUsYdJ8/U2M7tlbV+UmuTPLeobOcTlU9M8n3\nJ7kxSVpr32itfXXYVKe1LcnZVbUtybcm+V8D5/km6zjmz93YjvWnOF6+M8lPJmnzTcQWM8rx6bSx\nHU/XaNHHrScs9Pj1hDGOY6eN7Th3srGOb6cZ6wIAALDVjKkg57wkD049PpInnyx8ok93QuWxJM+Z\nS7oZdFOUvzjJPSusfllVfaqqfqOq/uZcg62sJfntqvpEVe1dYf0sP48hXZ3VT+Is2rY+Yam19lC3\n/OUkSyv0WeTt/k+T/MYq6063P83bm7opyd+3ypWZi7yd/16Sh1trX1hl/aJta8Zhkff5UzrNsXVR\n/EImxQF/NXSQGTwvyZ8k+ZWa3GLrvVX1jKFDraa1djTJf8hkJpSHkjzWWvvtYVPNZJZj/iI61bF+\nIVTV7iRHW2ufGjoLm97ox6fTRjZWnTb2cesJYxy/njD2cey0MY1pp415fDvNWBcAAIBNZ0wFOaNW\nVd+WydS7b2mtfe2k1fcm+e7W2guTvCfJf513vhX83dbaxZlMafzGqvr+oQPNqqqeluRVSf7LCqsX\ncVs/SWutZURXdVfVv85kyvubV+mySPvTDUm+J8mLMvnP23cMmGUtXptTXzG4SNsaNtRpjq0Loape\nmeSR1tonhs4yo21JLk5yQ2vtxUn+dxbndkpP0v2n0+5MCom+K8kzquqfDJvqzIzlmD/DsX5wVfWt\nSd6W5KeHzgJjMsKx6rTR/+27GcavJ4zlmLaSkY1pp419fDvNWBcAAIBNZ0wFOUeTXDD1+PyubcU+\n3W0Lnpnkz+aS7hSq6qmZnOC8ubX2pHtht9a+1lo71i3fkeSpVfXcOcc8OdPR7vsjmdzH/iUndZnl\n5zGUy5Pc21p7+OQVi7itpzx8Yvr07vsjK/RZuO1eVXuSvDLJNd0J2CeZYX+am9baw621v2yt/VWS\nX14ly8Jt5+SJ32v/KMmHVuuzSNuaUVnIff5UTndsXSAvT/Kqqjqcye0BfqCq/tOwkU7pSJIjrbUT\nMyTckkmBzqL6wST/s7X2J621v0jykSR/Z+BMs5jlmL8wZjnWL4jvyaQ461Pdv7nzk9xbVd85aCo2\nq9GOT6eNcaw6beTj1hPGOn49YZTj2GljG9NOG/P4dpqxLgAAAJvVmApyfj/JhVX1vO4KsquT3HZS\nn9uSXNstvybJx4b+T4PuHtg3Jnmgtfbzq/T5zq5fquolmfxcBjtRW1XPqKpvP7Gc5BVJPnNSt9uS\nvL4mLsnkFhEPZTGselXVom3rk0zvv9cmuXWFPr+V5BVV9axuVoBXdG2DqKrLMrkNy6taa4+v0meW\n/WluTpws7vzDVbLM8vtmCD+Y5A9ba0dWWrlo25pRWdR9fkWzHFsXRWvtra2181tr2zPZrh9rrS3s\nDC6ttS8nebCqXtA1XZrkcwNGOp0/TnJJVX1rt19cmuSBgTPNYpZj/kKY5Vi/KFpr97fW/nprbXv3\nb+5Ikou7/Rr6Nsrx6bQxjlWnbYJx6wljHb+eMLpx7LQxjmmnjXx8O81YFwAAgE1p29ABZtVaO15V\nb8rkpM1ZSd7XWvtsVf1skj9ord2WycnEX62qQ0m+kslJhqG9PMnrktxfVfd1bW9L8jeSpLX2S5mc\nnP3nVXU8yf9JcvXAJ2qXkny0O++3Lcl/bq39ZlX9WPJE5juSXJHkUJLHk7xhoKzfpDsx80NJ/tlU\n23TuhdjWVfWBJLuSPLeqjiR5e5Lrk3y4qq5L8qUkV3V9dyb5sdbaj7bWvlJV/zaTE2pJ8rOtta8M\nmPmtSZ6e5M5uf7m7tfZjVfVdSd7bWrsiq+xPA2beVVUvymQq9cPp9pXpzKv9vplH5tVyt9ZuzOR3\n2gdO6rsQ25pxG3qfX4MVj63dleOs348nubn7D5svZkGO8Stprd1TVbdkckuP40k+meTAsKm+2Zkc\n84d2Jsf6wUJOOcXxEjbciMen08Y4Vp022nHrCWMZv05lG904dob8Cz2mnSH/wo9vpxnrAgAAsNXU\n4pxLAwAAAAAAAACA8RvTLasAAAAAAAAAAGDhKcgBAAAAAAAAAIAeKcgBAAAAAAAAAIAeKcgBAAAA\nAAAAAIAeKcgBAAAAAAAAAIAeKcgBAAAAAAAAAIAeKcgBAAAAAAAAAIAe/T99DmMtE9Tg3QAAAABJ\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 2880x2880 with 25 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uYemRqMspsQB",
        "colab_type": "text"
      },
      "source": [
        "**Frequency Distribution of Categorical Features**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0UuCmapcpsQB",
        "colab_type": "code",
        "outputId": "70001d3e-ca3c-43ab-ba7a-5bc6c17b96a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "for col in dfC:\n",
        "    count = df[col].value_counts()\n",
        "    sns.set(style=\"darkgrid\")\n",
        "    sns.barplot(count.index, count.values)\n",
        "    plt.title('Frequency Distribution',fontsize=12)\n",
        "    plt.ylabel('Number of Occurrences', fontsize=12)\n",
        "    plt.xlabel(col, fontsize=15)\n",
        "    plt.show()\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\naGiofVn37t155plnHC51FhER+T1DRzJFRUXccsstDstatGjBiRMnTAklIiLOwVDJ3HHHHbz88suc\nO3cOgLNnzzJr1izat29vajgREandDE2X/eUvf+HZZ58lPDycBg0acOLECdq3b1/uF5qJiIiAwZLx\n9/dn+fLl5Obm2q8uCwwMNDubiIjUcoZK5jeBgYEqFxERMaza78IsIiLOSyUjIiKmuWLJlJWV8dVX\nX1FSUnI98oiIiBO5YslYrVbGjBmDm5vb9cgjIiJOxNB0WceOHdm9e7fZWURExMkYurosODiYJ554\ngs6dOxMYGGj/mmSAuLg408KJiEjtZqhkiouL6dKlCwBHjx41NZCIiDgPQyUzc+ZMs3OIiIgTMvxh\nzIyMDLZs2UJBQQEJCQn8/PPPlJSUONyZWURE5PcMnfjfvHkzQ4YM4ejRo6xduxaAM2fO8PLLL5sa\nTkREajdDRzJ/+9vfePPNNwkNDWXz5s0AhIaGcuDAAVPDiYhI7WboSKawsJCQkBAA+5VlFovF4Soz\nERGR/2SoZFq1asW6desclm3cuJG2bduaEkpERJyDoemyF154gREjRrBmzRrOnj3LiBEjyMzMZPHi\nxWbnExGRWsxQydxyyy1s3ryZbdu20alTJ4KCgujUqRM33XST2flERKQWM3wJs6enJx06dKBJkyYE\nBASoYERE5IoMlUx2djYTJkzgu+++o379+pw8eZLbb7+d2bNn07hxY7MziohILWXoxP/kyZNp1aoV\nO3fu5KuvvuJf//oXrVu3Jj4+/pqGmTdvHiEhIfzwww8A7N69m169ehEdHc3w4cMpKCiwr1vRmIiI\n1AyGSub7779n0qRJ1K1bF4CbbrqJCRMmsHfv3msW5Pvvv2f37t32I6OysjImTpxIQkICaWlphIeH\n88orr1xxTEREag5DJdOuXTvS09Mdlu3du5f27dtfkxAlJSUkJSUxdepUh+27u7sTHh4OwMCBA9my\nZcsVx0REpOYo95zMnDlz7P9u2rQpo0aNolOnTgQGBpKbm8s///lPYmJirkmIOXPm0KtXL5o0aWJf\nlpOTQ3BwsP2xj48PZWVlFBUVVTjm7e19TTKJiMjVK7dkcnNzHR537doVuPjpfzc3Nx544AGKi4uv\nOsC3337L3r17mTBhwlVvq7J8fetd932K8/Pz86ruCCI1Rrklc71u779z504yMjLo3LkzcLHcRowY\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nDEOGiIgU8/8AFX8xCSrk4ZEAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaMAAAEeCAYAAAAnwXpfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XdYFOf+NvB7l2pBEJBijx4FewNJ\nYkcjFhT0qFjzC7YoKsSIiCVgsIvlKPZEjRpLIhYEjZhYEtuxJLFrEokiEZAmSpFdYOf9w5c5rsAy\nKMsie3+uy+ty55mZ5zvL7tw7s8/OyARBEEBERKRDcl0XQERExDAiIiKdYxgREZHOMYyIiEjnGEZE\nRKRzDCMiItI5hhFRBTR+/HgcOnSoTNZ19epVuLm5iY9dXV1x4cKFMlk3APTv3x+XLl0qs/WRfpLx\nd0ZUHlxdXZGSkgIDAwNx2vHjx2Fra6vDqnTDwcEBVapUgUwmg7GxMRwdHeHl5YV+/fq90bpOnDiB\nBg0aSF7G1dUVCxcuxIcffljq/gIDA2Fra4vp06eXelkiTQx1XQDpj02bNpW4A8zLy4OhYeV/WUZE\nRKBBgwZIS0vDL7/8gpCQEPz999+YOnVqmfajL88nvft4mo506p9//oGDgwP279+P7t274//+7/8A\nANeuXcPw4cPh5OSEgQMHqp0GiouLw+jRo9GuXTt4e3sjJCQE/v7+AIBLly6ha9euan28elpKpVJh\ny5Yt6NWrF1xcXODn54f09HS1Wg4dOoTu3bvDxcUFGzduFNeTn5+PTZs2oVevXmjXrh0GDx6MhIQE\nfPnll1i6dKlan5MmTcI333xT4vZbWlrC09MT8+fPx+bNm/H06VMAwJgxY7B//34AQGxsLEaPHo0O\nHTrAxcUFn332GQBg1KhRAAAPDw+0a9cOx44dE7d/y5Yt6NSpE2bPnl3kc3Lz5k3069cPzs7OmD17\nNhQKBQDg4MGDGDFihNq8Dg4OiI2NxXfffYfIyEhs3boV7dq1w6RJkwo9v0qlEosWLULnzp3RuXNn\nLFq0CEqlUu1vs23bNnzwwQfo3LkzDhw4UOJzRPqBYUQVwpUrV3Ds2DFs3boVT548waefforJkyfj\n8uXLmDVrFnx9fZGWlgYA8Pf3R4sWLXDp0iX4+PiU6ruVXbt24aeffsK3336Ls2fPwtzcHCEhIWrz\n/Prrrzh+/Dh27NiB9evXIyYmBgCwfft2HD16FFu2bMFvv/2GxYsXw9TUFIMGDUJUVBRUKhUAIC0t\nDRcvXoS7u7vkunr27In8/HzcuHGjUNuaNWvQqVMnXLlyBb/88gtGjx4NANi9ezeAl0dZv//+u3ia\nLyUlBc+ePcPp06exYMGCIvsrCJUff/wRDx48wIYNG0qs0cvLCwMGDMC4cePw+++/Y9OmTYXm2bhx\nI65fv46IiAgcOXIEN2/eVFt3SkoKMjIy8Msvv2DRokUICQnBs2fPSn6CqNJjGFG5mTJlCpycnODk\n5AQfHx+1tmnTpqFq1aowNTVFREQEunbtim7dukEul6NTp05o2bIlfv75Z8THx+PmzZvw8/ODsbEx\nnJ2d4erqKrmGffv2Yfr06bCzs4OxsTGmTp2K6Oho5OXlifNMnToVpqamcHR0hKOjI+7duwcA2L9/\nP/z8/NCoUSPIZDI4OjqiZs2aaN26NczMzHDx4kUAwLFjx9CxY0dYW1tLrsvIyAg1a9YscsdsaGiI\n+Ph4JCUlwcTEBE5OThrXJZfL4evrC2NjY5iamhY5z6hRo2Bvbw8LCwtMnjwZR48elVyrJpGRkZgy\nZQqsrKxgaWmJKVOm4MiRI2rbMmXKFBgZGaFbt26oWrUqHjx4UCZ907uNJ5Op3Kxfv77Y74zs7OzE\n/8fHx+P48eM4ffq0OC0vLw8uLi5ISkpCjRo1ULVqVbGtdu3aSEhIkFRDfHw8pkyZArn8f5/D5HI5\nUlNTxcevhkiVKlWQnZ0NAEhMTET9+vWLXO+gQYNw5MgRdOrUCUeOHMHHH38sqZ4Cubm5SEtLg7m5\neaG2mTNnYs2aNRgyZAjMzc3h7e2NIUOGFLuumjVrwsTERGN/9vb24v9r166NpKSkUtVbnKSkJNSu\nXbvYdVtYWKh9h/Xq80v6jWFEFYJMJhP/b29vDw8PDyxcuLDQfI8fP8bz58+RnZ0tBlJ8fLy4fJUq\nVZCTkyPOn5+fL57eA16G3uLFi9GhQ4dC6/7nn3801mhnZ4dHjx6hadOmhdoGDhwId3d33Lt3DzEx\nMejVq1cJW6zu5MmTMDAwQOvWrQu11apVS3wurl69Cm9vbzg7Oxc7gu7V57I4r4Z3fHw8bGxsABR+\n/pKTk0u1bhsbG8THx6NJkyZiPwXrJtKEp+mowhk4cCBOnz6Ns2fPIj8/HwqFApcuXUJiYiLq1KmD\nli1bIiwsDEqlElevXlU7gnrvvfegUChw5swZ5ObmYuPGjeIX6AAwYsQI/Oc//8Hjx48BvPx+56ef\nfpJU19ChQ7FmzRo8fPgQgiDg3r174oADOzs7tGrVCjNnzkTv3r2LPT32uvT0dBw5cgQhISGYMGEC\natasWWieH374AYmJiQAAc3NzyGQy8cjO2toacXFxkvp61Z49e5CYmIj09HRs2rRJ/L7J0dERf/31\nF+7evQuFQoGwsDC15aysrDSGdv/+/bFx40akpaUhLS0N69evx4ABA0pdH+kfHhlRhWNvb48NGzYg\nNDQUM2bMgFwuR+vWrTF//nwAwMqVKzFr1iy4uLigbdu28PT0xPPnzwEAZmZmCA4Oxrx585Cfn4/x\n48ernQL8+OOPIQgCxo4di6SkJFhZWaFfv36SjmS8vb2hVCoxduxYPH36FI0aNcL69evFdk9PTwQE\nBGDu3LklrsvDwwMymQxGRkZwcHDA7Nmzi91p37x5E4sXL0ZmZiasrKwwd+5c1KtXD8DL77cCAwOR\nk5ODkJAQWFlZldg3ALi7u4vPQc+ePTF58mQAL8N8ypQp+OSTT2BqaorPP/8c3333nbjckCFD4Ofn\nBycnJ3Ts2LHQwAcfHx9kZWVh4MCBAIA+ffoU+n6QqCj80Su988LCwhAbG4sVK1botI4rV65g5syZ\nOH36tKRTZUT0PzxNR1QGcnNzsXPnTgwZMoRBRPQGGEZEbykmJgbOzs5ITk7GJ598outyiN5JPE1H\nREQ6xyMjIiLSOYYRERHpHMOIiIh0rtL/zujp0yyoVPxajIhICrlchpo1q5V7v5U+jFQqgWFERFTB\n8TQdERHpHMOIiIh0jmFEREQ6xzAiIiKdYxgREZHOMYyIiEjnGEZERKRzlf53Rq8zq2EKUxMjXZdR\nKjmKXGQ8zyl5RiKid5TehZGpiRFGBuzWdRmlsmf5KGSAYURElRdP0xERkc4xjIiISOcYRkREpHMM\nIyIi0jmGERER6RzDiIiIdI5hREREOscwIiIinWMYERGRzjGMiIhI58otjBQKBYKDg9G7d28MGDAA\nX3zxBQDgwYMH8PLygpubG7y8vPDw4UNxGU1tRERUeZRbGIWGhsLExATR0dGIjIyEn58fACA4OBgj\nR45EdHQ0Ro4ciaCgIHEZTW1ERFR5lEsYZWVl4fDhw/Dz84NMJgMAWFtbIzU1FXfu3IG7uzsAwN3d\nHXfu3EFaWprGNiIiqlzK5ardcXFxsLCwwLp163Dp0iVUq1YNfn5+MDU1ha2tLQwMDAAABgYGsLGx\nQUJCAgRBKLbN0tKyPMomIqJyUi5hlJ+fj7i4ODRv3hyzZs3C9evXMWnSJKxZs0brfVtZVdd6H+Wh\nVi0zXZdARKQ15RJG9vb2MDQ0FE+5tWnTBjVr1oSpqSmePHmC/Px8GBgYID8/H0lJSbC3t4cgCMW2\nlUZqaiZUKkF8/K7u1JOTM3RdAhHpAblcppMP8eXynZGlpSVcXFxw/vx5AC9HyaWmpqJhw4Zo1qwZ\noqKiAABRUVFo1qwZLC0tYWVlVWwbERFVLjJBEISSZ3t7cXFxmDNnDtLT02FoaIjPPvsM3bp1Q0xM\nDAIDA/H8+XPUqFEDy5YtQ6NGjQBAY5tURR0ZvYt3euWRERGVB10dGZVbGOkKw4iISLpKfZqOiIhI\nE4YRERHpHMOIiIh0jmFEREQ6xzAiIiKdYxgREZHOMYyIiEjn3iiMcnJyoFQqy7oWIiLSU5LCaNmy\nZbhx4wYA4MyZM+jYsSOcnZ1x6tQprRZHRET6QVIYRUZGokmTJgCA9evXIzQ0FBs3bsTq1au1WhwR\nEekHSVftfvHiBapUqYKnT58iLi4Obm5uAIDHjx9rtTgiItIPksKoYcOGOHLkCB49eoROnToBANLS\n0mBqaqrV4oiISD9ICqPg4GAsXrwYhoaGWLx4MQDg3LlzYjARERG9DV61+x3Aq3YTUXnR1VW7Jd/p\n9fz58zh69CjS0tKwadMm3Lx5E5mZmfjggw+0WR8REekBSaPpdu3ahfnz56Nhw4a4cuUKAMDU1BRr\n1qzRanFERKQfJIXRjh07sH37dkycOBFy+ctFGjVqhAcPHmi1OCIi0g+SwigrKwv29vYAAJlMBgDI\ny8uDkZGR9iojIiK9ISmMnJ2dsWXLFrVpO3fuhIuLi1aKIiIi/SJpAMO8efMwadIk7N+/H1lZWXBz\nc0O1atWwefNmbddHRER6QFIY2djY4MCBA7h58yYeP34Me3t7tG7dWvz+iIiI6G1ICqO7d+/CwsIC\nrVu3RuvWrQEACQkJePbsGRwdHbVaIBERVX6SDm1mzpyJvLw8tWm5ubmYOXOmVooiIiL9IunIKD4+\nHvXq1VObVr9+/VJdKNXV1RXGxsYwMTEBAPj7+6NLly64du0agoKCoFAoUKdOHYSGhsLKygoANLYR\nEVHlIenIyM7ODrdv31abdvv2bdjY2JSqs7Vr1yIiIgIRERHo0qULVCoVZs6ciaCgIERHR8PJyQkr\nVqwAAI1tRERUuUgKo08++QQ+Pj7YtWsXfv75Z+zatQtTp06Ft7f3W3V+69YtmJiYwMnJCQAwfPhw\nHD9+vMQ2IiKqXCSdphs2bBjMzMwQHh6OxMRE2NnZYdasWejTp0+pOvP394cgCOjQoQM+//xzJCQk\noHbt2mK7paUlVCoV0tPTNbZZWFiUql8iIqrYJF8otW/fvujbt+8bd7R7927Y29tDqVRi0aJFCAkJ\nwUcfffTG65NKF1ef1YZatcx0XQIRkdZIDqNz587h7t27yM7OVpvu5+cnafmCywkZGxtj5MiRmDx5\nMj7++GPEx8eL86SlpUEul8PCwgL29vbFtpVGUbeQeBfxFhJEVB4q9C0kQkJC8MMPP8DFxQVVqlQp\ndSfZ2dnIz8+HmZkZBEHAsWPH0KxZM7Rs2RI5OTm4evUqnJycsG/fPvHUn6Y2IiKqXCSFUVRUFCIi\nIsSjm9JKTU3FtGnTkJ+fD5VKhcaNGyM4OBhyuRzLly9HcHCw2vBtABrbiIiocpEURjVr1oSZ2Zuf\n3qpXrx4OHz5cZFv79u0RGRlZ6jYiIqo8JIWRt7c3/P398emnn8La2lqt7fUfwxIREZWWpDCaP38+\nAODMmTNq02UyGe7evVvWNRERkZ6RFEb37t3Tdh1ERKTHSnUPiISEBFy7dk1btRARkZ6SFEbx8fEY\nPnw4+vbtK14C6Pjx45g7d65WiyMiIv0gKYyCgoLQvXt3/PbbbzA0fHlmr1OnTrhw4YJWiyMiIv0g\nKYxu3ryJiRMnQi6XQyaTAQDMzMyQkcGrAhAR0duTFEZWVlaIjY1Vm3b//v03/hEsERHRqySF0dix\nYzFp0iQcOHAAeXl5iIqKwvTp0zFhwgRt10dERHpA0tDuIUOGwMLCAt999x3s7e1x+PBh+Pn5oVev\nXtquj4iI9ECJYZSfn49169Zh8uTJDB8iItKKEk/TGRgYYM+ePeIoOiIiorImKWE8PT2xd+9ejBo1\nStv10FuqaW4MQ2MTXZdRKnlKBZ4+U+q6DCLSIUlhdOPGDXz77bfYunUr7OzsxOHdwMs7uFLFYWhs\ngl+Xj9d1GaXSIeBrAAwjIn0mKYyGDRuGYcOGabsWIiLSU5IGMDx69AiTJ0+GsbFxedRERER6hgMY\niIhI5yT96LVgAAMREZE2cAADERHpHAcwEBGRzkkKo0GDBmm7DiIi0mOSwig8PLzYtiFDhpRZMURE\npJ8khVFERITa45SUFMTFxaFdu3YMIyIiemuSwmjXrl2FpoWHhyMmJqbUHa5btw5hYWGIjIxE06ZN\nce3aNQQFBUGhUKBOnToIDQ2FlZUVAGhsIyKiykPS0O6iDB48GAcOHCjVMrdv38a1a9dQp04dAIBK\npcLMmTMRFBSE6OhoODk5YcWKFSW2ERFR5SIpjFQqldq/rKwsfPfddzAzM5PckVKpREhICObPny9O\nu3XrFkxMTODk5AQAGD58OI4fP15iGxERVS6STtM1b95c7bdFAGBra4uQkBDJHa1ZswYDBw5E3bp1\nxWkJCQmoXbu2+NjS0hIqlQrp6eka2ywsLCT3S0REFZ+kMDp58qTa4ypVqsDS0lJyJ7///jtu3boF\nf3//0lVXBqysqpd7n9pQq5b0o9B3UWXfPiLSTFIYGRoawtTUFObm5uK0Z8+eIScnB7a2tiUuf+XK\nFcTExKBnz54AgMTERIwbNw5jxoxBfHy8OF9aWhrkcjksLCxgb29fbFtppKZmQqUSxMfv6k4vOTlD\n0nyVffuISLvkcplOPsRL+s7Ix8cHiYmJatMSExMxdepUSZ1MnDgR586dw6lTp3Dq1CnY2dlh69at\nGD9+PHJycnD16lUAwL59+9CnTx8AQMuWLYttIyKiykXSkdGDBw/g4OCgNs3BwQF///33W3Uul8ux\nfPlyBAcHqw3fLqmNiIgqF0lhZGVlhdjYWDRo0ECcFhsb+8YDCU6dOiX+v3379oiMjCxyPk1tRERU\neUg6Tffvf/8b06ZNw+nTp3H//n2cOnUKvr6+GDp0qLbrIyIiPSDpyGjixIkwNDTEsmXLkJiYCHt7\newwZMgTe3t7aro+IiPSApDCSy+UYP348xo8fr+16iIhID0k6TbdlyxbcuHFDbdqNGzfw1VdfaaUo\nIiLSL5LCaOfOnfjXv/6lNq1x48bYsWOHVooiIiL9IimMcnNzYWiofkbPyMgISqVSK0UREZF+kRRG\nLVq0wJ49e9Sm7du3D82bN9dKUUREpF8kDWCYPXs2vL29ceTIEdSrVw9xcXFITk7G9u3btV0fERHp\nAUlh1KRJE0RHR+PMmTNISEhA79690b17d1SrVk3b9RERkR6QFEYAkJycjNq1a6NFixZo2LChFksi\nIiJ9U2IYnThxAkuXLhWvoC2TyWBvb4+AgABeuJSIiMqExjA6c+YMZs+ejUmTJqFv376wsbFBUlIS\njh07hnnz5sHExAQ9evQor1qJiKiS0hhGGzZsQEhICPr37y9Oq1u3LiZOnIjatWtjw4YNDCMiInpr\nGod2//XXX/joo4+KbOvduzfu37+vlaKIiEi/aAwjY2NjZGZmFtn2/PlzGBsba6UoIiLSLxrDqEuX\nLli5cmWRbatWrULnzp21UhQREekXjd8ZzZw5EyNGjMCAAQPg5uaGWrVqITk5GSdOnEBmZmahqzIQ\nERG9CY1hZGtri0OHDmH79u04e/Ysnj59ipo1a8LV1RWffPLJG9/plYiI6FUl/s7I3Nwcn332GT77\n7LPyqIeIiPSQpAulEhERaRPDiIiIdI5hREREOldsGA0bNkz8/7p168qlGCIi0k/FhtHDhw+hUCgA\nANu2bXvrjnx8fDBw4EB4enpi5MiRuHv3LgDgwYMH8PLygpubG7y8vPDw4UNxGU1tRERUeRQ7mq5n\nz55wc3NDnTp1oFAoMGrUqCLn2717t6SOli1bBjMzMwDATz/9hDlz5uDQoUMIDg7GyJEj4eHhgYiI\nCAQFBWHnzp0AoLGNiIgqj2LDaMmSJbh69SoeP36MmzdvYsiQIW/VUUEQAUBmZiZkMhlSU1Nx584d\n8Y6x7u7uWLBgAdLS0iAIQrFtlpaWb1ULERFVLBp/Z+Tk5AQnJyfk5uZi0KBBb93Z3Llzcf78eQiC\ngK+//hoJCQmwtbWFgYEBAMDAwAA2NjZISEiAIAjFtjGMiIgqF0l3eh0yZAguXbqEw4cPIykpCTY2\nNvDw8MD7779fqs4WLVoEADh8+DCWL18OPz+/0ldcSlZW1bXeR3moVcus5JneYZV9+4hIM0lhtH//\nfqxatQpDhw5FmzZtkJCQgBkzZsDPz09t1J1Unp6eCAoKgp2dHZ48eYL8/HwYGBggPz8fSUlJsLe3\nhyAIxbaVRmpqJlQqQXz8ru70kpMzJM1X2bePiLRLLpfp5EO8pDD6+uuvsX37djg6OorT+vbtC19f\nX0lhlJWVhefPn4tBcurUKZibm8PKygrNmjVDVFQUPDw8EBUVhWbNmomn4TS1ERFR5SEpjNLT09G4\ncWO1aY0aNcKzZ88kdfLixQv4+fnhxYsXkMvlMDc3x6ZNmyCTyTB//nwEBgZiw4YNqFGjBpYtWyYu\np6mNiIgqD0lh1L59eyxduhT+/v6oUqUKsrOzsWrVKrRr105SJ9bW1vj++++LbGvcuDH2799f6jYi\nIqo8JIXRl19+ienTp8PJyQnm5uZ49uwZ2rVrV+yN94iIiEpDUhjZ2Nhg9+7dSExMFEfT2dnZabs2\nIiLSE5LCqICdnR1DiIiIyhyv2k1ERDrHMCIiIp0rMYxUKhUuXrwIpVJZHvUQEZEeKjGM5HI5fHx8\nYGxsXB71EBGRHpJ0ms7Z2RnXrl3Tdi1ERKSnJI2mq127NiZMmICePXvCzs4OMplMbCuPi50SEVHl\nJimMFAoFevXqBQB48uSJVgsiIiL9IymMlixZou06iIhIj0n+0WtMTAyOHz+O1NRUBAUF4e+//4ZS\nqVS7kjcREdGbkDSA4YcffsCoUaPw5MkTHD58GMDL20IsXbpUq8UREZF+kHRktHbtWnzzzTdwdHTE\nDz/8AABwdHTEvXv3tFocERHpB0lHRmlpaXBwcAAAcSSdTCZTG1VHRET0piSFUYsWLRAREaE27ejR\no2jdurVWiiIiIv0i6TTd3LlzMW7cOISHhyM7Oxvjxo3DgwcPsG3bNm3XR0REekBSGDVu3Bg//PAD\nTp8+je7du8Pe3h7du3dHtWrVtF0fERHpAclDu6tUqYIOHTqgbt26sLW1ZRAREVGZkRRG8fHx8Pf3\nx/Xr11GjRg08f/4cbdq0QWhoKOrUqaPtGomIqJKTNIBh1qxZaNGiBa5cuYKLFy/i8uXLaNmyJQID\nA7VdHxER6QFJR0a3b9/Gtm3bYGRkBACoVq0a/P394eLiotXiiIhIP0g6Mmrbti1u3LihNu3WrVto\n166dVooiIiL9UuyR0Zo1a8T/16tXDxMnTkT37t1hZ2eHxMRE/Pzzz3B3d5fUydOnTxEQEIBHjx7B\n2NgYDRo0QEhICCwtLXHt2jUEBQVBoVCgTp06CA0NhZWVFQBobCMiosqj2COjxMRE8Z9SqUTv3r1h\nbGyMtLQ0GBsb46OPPoJCoZDUiUwmw/jx4xEdHY3IyEjUq1cPK1asgEqlwsyZMxEUFITo6Gg4OTlh\nxYoVAKCxjYiIKpdij4zK8rYRFhYWat8vtW3bFnv37sWtW7dgYmICJycnAMDw4cPRs2dPLFmyRGMb\nERFVLpJ/Z/TixQvExsYiOztbbXr79u1L1aFKpcLevXvh6uqKhIQE1K5dW2yztLSESqVCenq6xjYL\nC4tS9UlERBWbpDA6fPgwQkJCYGRkBFNTU3G6TCbDmTNnStXhggULULVqVYwePRo//vhjqZZ9E1ZW\n1bXeR3moVctM1yVoVWXfPiLSTFIYhYaGIiwsDJ06dXqrzpYtW4bY2Fhs2rQJcrkc9vb2iI+PF9vT\n0tIgl8thYWGhsa00UlMzoVIJ4uN3daeXnJwhab7Kvn1EpF1yuUwnH+IlDe02MjJCx44d36qjVatW\n4datW1i/fj2MjY0BAC1btkROTg6uXr0KANi3bx/69OlTYhsREVUuko6M/Pz8sHTpUkyZMgWWlpal\n7uSvv/7C5s2b0bBhQwwfPhwAULduXaxfvx7Lly9HcHCw2vBtAJDL5cW2ERFR5SIpjBo2bIi1a9di\nz5494jRBECCTyXD37t0Sl2/SpAn++OOPItvat2+PyMjIUrcREVHlISmMAgIC4OHhgX79+qkNYCAi\nIioLksIoPT0dfn5+vM04ERFphaQBDIMHDy5023EiIqKyIunI6MaNG9i9ezc2btwIa2trtbbdu3dr\npTAiItIfksJo2LBhGDZsmLZrISIiPSUpjAYNGqTtOoiISI9JCqPw8PBi24YMGVJmxRARkX6SFEav\nD15ISUlBXFwc2rVrxzAiIqK3JimMdu3aVWhaeHg4YmJiyrwgIiLSP5KGdhdl8ODBOHDgQFnWQkRE\nekrSkZFKpVJ7/OLFCxw5cgRmZu/mFaKJiKhikRRGzZs3L3T1BVtbWyxYsEArRREVp4a5CUz+/1Xf\n3xUKpRLPnyl0XQZRhSYpjE6ePKn2uEqVKm909W6it2VibIxPtvvpuoxS+cZ7DQCGEZEmksKoTp06\n2q6DiIj0mMYwGjNmjMaLo8pkMuzYsaPMiyIiIv2iMYwGDhxY5PQnT55g165dyMnJ0UpRRESkXzSG\n0dChQ9UeP336FFu2bMH333+Pfv36YcqUKVotjoiI9IOk74wyMzPx9ddfY/fu3ejevTsOHTqE+vXr\na7s2IiLSExrDKCcnBzt27MC2bdvg4uKCPXv2oEmTJuVVGxER6QmNYeTq6gqVSoXx48ejZcuWSElJ\nQUpKito8H3zwgVYLJNInFmbGMDI10XUZkuXmKJCeodR1GVQJaAwjU1NTAMDevXuLbJfJZIV+g0RE\nb87I1ATHPvbWdRmS9du5HWAYURnQGEanTp0qrzqIiEiPvfGFUomIiMpKuYTRsmXL4OrqCgcHB/z5\n55/i9AcPHsDLywtubm7w8vLCw4cPJbUREVHlUi5h1LNnT+zevbvQZYWCg4MxcuRIREdHY+TIkQgK\nCpLURkRElUu5hJGTkxPs7e3VpqWmpuLOnTtwd3cHALi7u+POnTtIS0vT2EZERJWPpB+9akNCQgJs\nbW1hYGAAADAwMICNjQ0SEhKw5GAuAAAcCklEQVQgCEKxbaW9WriVVfUyr10XatWq3PeO4va9uyrz\ntlH50VkYlZfU1EyoVIL4+F194yQnZ0iaj9tXMVXm7ZO6bfRukMtlOvkQr7Mwsre3x5MnT5Cfnw8D\nAwPk5+cjKSkJ9vb2EASh2DYiIqp8dDa028rKCs2aNUNUVBQAICoqCs2aNYOlpaXGNiIiqnzK5cho\n4cKFOHHiBFJSUuDt7Q0LCwscPXoU8+fPR2BgIDZs2IAaNWpg2bJl4jKa2oiIqHIplzCaN28e5s2b\nV2h648aNsX///iKX0dRGRESVC6/AQEREOscwIiIinav0Q7uJqGIwr1EFxibv1i5HqcjDs+cvdF2G\nXni3XhlE9M4yNjHE4rnhui6jVOYsGqLrEvQGT9MREZHOMYyIiEjnGEZERKRzDCMiItI5hhEREekc\nw4iIiHSOYURERDrHMCIiIp1jGBERkc4xjIiISOcYRkREpHMMIyIi0jmGERER6RzDiIiIdI63kCAi\nKgPmNYxhbGKi6zJKRalQ4Nlzpa7LAMAwIiIqE8YmJlg1+1Ndl1Eqny/ZDKBihBFP0xERkc4xjIiI\nSOcYRkREpHMVPowePHgALy8vuLm5wcvLCw8fPtR1SUREVMYqfBgFBwdj5MiRiI6OxsiRIxEUFKTr\nkoiIqIxV6NF0qampuHPnDrZv3w4AcHd3x4IFC5CWlgZLS0tJ65DLZYWmWdesVqZ1loeitqM4xjWs\ntFiJdpRm+6yrS/vbVySl2b4q1u/W368022ZuUVWLlWhHabavhsW79bcDCm9faba3LMkEQRB00rME\nt27dwqxZs3D06FFxWr9+/RAaGooWLVrosDIiIipLFf40HRERVX4VOozs7e3x5MkT5OfnAwDy8/OR\nlJQEe3t7HVdGRERlqUKHkZWVFZo1a4aoqCgAQFRUFJo1ayb5+yIiIno3VOjvjAAgJiYGgYGBeP78\nOWrUqIFly5ahUaNGui6LiIjKUIUPIyIiqvwq9Gk6IiLSDwwjIiLSOYYRERHpHMOIiIh07p0OI1dX\nV/z555+Fpk+YMAGPHj0CADx8+BCenp7w9PTEkSNHJK9bqVRi/vz56N+/PwYMGAB3d3dERkZqXObm\nzZuYMWNG6TZCS1xdXdG5c2fxN1oAcPDgQTg4OODbb78t1boCAwPFZdasWYNjx469cV2vrkuKstyO\nf/75By4uLqVaBgC6d+8Od3d39OvXD82bN0fXrl3RpUsXzJ49u9TrAoALFy5g2LBhpV7u+vXrCAgI\neKM+S+p39erV+PDDD+Hp6Qk3NzcMGTIE3377LVQq1Rv39yaUSiWWLl2KXr16oU+fPvD09MRPP/0E\nALh7926h156DgwOysrKKXV9R+4jBgwfj0qVLZV/8WwoMDETXrl3h4eEBNzc3LFiwoNyff12q0Nem\ne1NfffWV+P8TJ06gXbt2CA4OLtU6du7cifT0dBw5cgQGBgbIyspCcnKyxmVatWqFlStXvlHN2mBj\nY4Nz586hW7duAIBDhw699WWU/Pz8yqK0UimL7cjLy3vj/uVyOVatWoWqVavi3//+N3755Zc3Xtfb\naNOmDdq0aaO19Q8ePBj+/v4AgNjYWPj7+yMuLu6NQ7co+fn5MDAwKLZ9/vz5yM7OxtGjR2FiYoI/\n//wT48ePh7m5OeLi4nDmzBn069evzOoBXr42DA0rxq5w4sSJGD16NDIzMzFo0CB06NChzLe3NMrz\nuakYf4Ey5urqik2bNuHevXvYsWMHVCoVfvvtN4SFhcHU1BQLFy5EfHw8FAoF+vfvj0mTJhVaR2Ji\nIqytrcU3TrVq1VCt2v8usLp582ZERUVBJpOhatWq2LNnD65cuYJly5bh4MGDAICff/4ZGzduhFKp\nhJGREWbPno22bdvi0qVLWLx4Mdq0aYPff/8dMpkMq1evRuPGjQEA4eHh2LlzJwDAyMgImzdvhrW1\ndbHr+/vvvzF79my8ePECKpUKgwYNAgAMGjQIBw8eRLdu3RAXF4fs7Gw0bdoUwMtPoKtXr8aVK1eg\nVCrh4OCA+fPno1q1anjy5AkCAgKQnJyMOnXqQC7/3wF0YGAgWrZsidGjR4vrOHv2LORyOerVq4f1\n69fjjz/+wJdffokXL15AoVBg2LBh+OSTT97476lpOy5evIj//Oc/UCgUyM/Px6RJk9C/f38AwJgx\nY+Do6Ijr16/D3Nxc7QOJUqlEQEAA7OzsMGvWLCQnJxf5uti4cSOSkpLg6+sLmUwGlUqFsLAwZGdn\nY9asWTh48CC2bt2K5ORk5OTkwMjICF999RXat28PhUKBkSNH4o8//oChoSGqVauGDh06YPjw4cjL\ny8O8efNw/fp1GBgYYPXq1Xjvvfdw4cIFrFixAs2bNy+y7T//+Q++//57AMBPP/2EDRs2IC8vD3K5\nHKGhoWjSpAmmT5+OR48eQalUomHDhli0aBFq1KhRque8QYMGWLRoEQYPHgxfX19Uq1YNp0+fxubN\nm6FUKmFsbIw5c+agdevWAIAVK1bgxIkTsLCwQIcOHfDrr7/i+++/x4ULF7B8+XI0bdoU9+7dw4wZ\nM9C+fXssXrwYf/31FxQKBT788EPMmjULCQkJOHbsGN5//32MGjUKCoUCAwcOxKRJk7B27VrExcUh\nMzMTHh4ecHZ2xrx58wAAu3btwo8//oj09HQEBATAzc0NwMsjyeTkZHz22WcwNTWFr68vunfvjtzc\nXEyePBleXl7Yt28fPDw8MH/+fPE1M3bsWPTo0QNjxoxBixYtcOPGDTx+/Bgff/wxbG1t8e233yIp\nKQkzZ85E3759AQAzZszAgwcPkJubi/r162Px4sUwNzcv8b1enOrVq6NFixaIj48Xp5Xm/T9u3Dhk\nZWVh4cKFuHnzJgDAw8MDEyZMAPC/fWTB++jVx66urujXrx/++9//omnTpli8eHGZ7JPGjRun+UUn\nvMN69Ogh/PHHHxqnr127Vli6dKnY9sknnwiXL18WBEEQFAqFMGLECOHcuXOF1nHv3j2hU6dOgru7\nu/DFF18IP/74o9h28OBBYdiwYUJGRoYgCIKQlpYmCIIg/Pe//xUGDRokCIIgxMbGqs3z559/Ct26\ndRPna968uXD79m1BEARhw4YNwueffy629erVS0hKShIEQRAyMzOFnJwcjetbsGCBsGnTJrG+9PR0\noUePHsK9e/eEPn36COnp6cKaNWuEnTt3CrNmzRJ27dolrF+/Xli/fr24zPLly4VVq1YJgiAIU6dO\nFcLCwgRBEIRHjx4Jbdu2FXbt2iUIgiAuLwiCEBYWJkyZMkVQKBSCIAhCamqqIAiCkJGRIU7LzMwU\n+vbtK9y/f7/Q8lKUtB3p6elCXl6eIAiCkJycLHTp0kVIT08XBEEQRo8eLXz66adCbm6uIAiCEBcX\nJ3Ts2FF4+vSpMHr0aGHHjh1iP5peFwWvp4LlX31NhYaGCs2bNxdiY2MFQRAEb29v8e8yffp0wcnJ\nSUhPTxdycnKEQYMGCdOmTRPOnz8vtGjRQrh79674PAYEBAiCIJTYNnToUEEQBOH+/fvChx9+KPar\nUCjE10bB36GgvoK/66vLv27VqlVCaGhooelt27YVbt26Jfz999+Cl5eXkJmZKQiCINy9e1fo0aOH\nIAiCcOLECcHT01PIzs4W8vLyhEmTJon9nD9/XnB0dBSuX78urnPWrFlCZGSkIAiCkJ+fL/j6+grh\n4eHCqVOnhLZt2wq//vqruE1eXl7Cvn37hI4dOwoHDhwQpk2bplZf06ZNxdfT1atXhc6dOwuCIAjP\nnj0TPDw8hK5duwpubm5Cv379hObNmwv9+/cXWrVqJTRt2lQ4evSoMHr0aOHUqVPi+l59PHr0aMHP\nz0/Iz88XEhMThdatW4vP5fXr14UuXbqIy736nL/6XGp6r7/u1fdGSkqK0KdPH/F9U9r3vyC8fE8H\nBAQIKpVKyMjIEPr16yecOXNGEITC+85XH/fo0UMIDg4W28pqn1SSSnlkVJzs7GxcvnwZaWlp4rSs\nrCzExMSgU6dOavM6ODjg5MmTuHLlCn777TcsWLAAv/zyC0JCQnD69GmMGDEC1atXBwDUrFmzUF9n\nz57Fo0ePMGrUKHFaXl4eUlJSAADvvfcemjdvDgBo27YtTp8+DQA4c+YMPDw8UKtWLQAQj8Y0rc/Z\n2RmhoaF48eIFXFxc8P777wMAZDIZ+vbti6NHj+Lo0aPYt28fbt++DQA4deoUMjMzER0dDeDlkYKj\noyMA4NKlS+Knznr16uGDDz4o8vk8ffo0AgMDYWxsDADiZZpycnIwf/58/PHHH5DJZEhKSsK9e/dK\n/DRYHE3bkZaWhjlz5iA2NhYGBgZ49uwZHjx4gLZt2wIABgwYoHaaQalUYuTIkZg2bZr4qbY0r4vX\n3blzB3K5HNOmTQMApKen49mzZwCAy5cvw93dHebm5gBefjL99ddfAQCNGzcWn+82bdrg/Pnz4jo1\ntRU4d+4cXF1dUb9+fQCAsbGx+Hc4ePAgjh49iry8PGRlZaFJkyYlP8nFEP7/b+LPnj2L2NhYjBw5\nUmxTKpV4+vQpLl26hL59+6JKlSoAAE9PT2zdulVtewqOoICXr73bt2+Lp9NzcnJQv359VKlSBdnZ\n2fjyyy/FebOyshAXF6exxoLTWG3btkVSUhIUCgV+//13/PPPP3jx4gXq1asHQ0NDWFtbY8mSJZgz\nZw4ePHiAvn37Yu/evRrX3adPH8jlctja2sLCwgK9evUCALRo0QJPnjyBQqGAiYkJIiIiEBkZidzc\nXGRnZ6Nhw4biOop7rxdly5Yt+O677/DgwQOMGDFCfM+8yfv/4sWLmDNnDmQyGapXr47+/fvj4sWL\n4uluTTw9PcX/l+U+SRO9CiOVSgWZTIbw8HAYGRmVOL+JiQk6d+6Mzp07o1u3bvD29kZISIjk/rp0\n6YLly5cXmh4TEyPuOICX30lI+U6juPW5ubmhbdu2OH/+PL766iscOHBAbBs0aBCGDh0KZ2dntdAU\nBAHBwcHFBs3bWLVqFWrVqoWlS5fC0NAQY8eOhUKheKt1Frcd8+fPh6urK9atWweZTAY3Nze1vqpW\nVb9/jpGREdq0aYNTp06hd+/eMDAwKPXr4nX16tVDREQEgJdBcObMmRKXMTExEf9vYGCgNkBDU1tJ\n/vvf/yI8PBx79uyBpaUlDh8+jMOHD0te/lV//fUX8vLy0LBhQ1y9ehXdu3fHkiVLSr2e1/8GgiBg\n8+bNqF27ttr0e/fuAQC2bt0Ka2trcfqePXvg4OBQ7PoLnq+CU+p5eXkQBAEODg5ISEjA2rVrxdNR\nBYyNjSGTycS/f4HXX6ev/y2K6uvmzZvYu3cv9u3bB0tLS0RGRoqnUgv6KlDSe73gO6O///4bI0aM\nEPc9QOne/ytWrCi2j4L6NW3363+z4pRlTe/0aLrSql69Ojp06IAtW7aI0xISEoocmHD16lWkpqaK\nj2/fvo26desCAHr06IG9e/ciMzMTAPD06dNCy3fq1Alnz57FX3/9JU67ceNGiTV2794dERER4hFU\nVlYWFAqFxvXFxsaiVq1aGDx4MKZMmSKeIwZe7iinT58OHx8ftX5cXV3xzTffICcnBwCQmZmJmJgY\nAMD7778vBlpcXBwuXrxYZK09evTAjh07oFQqAUA8ssjIyICdnR0MDQ3x559/4urVqyVud0mK246M\njAzUqVMHMpkM58+fR2xsrMb1yGQyLF68GNWrV8f06dORm5tb4uuiWrVqyMjIKHJ9zZo1Q3x8PJ48\neQLg5QeegiOjjh07IioqCs+ePYNCoShxNGZpdO7cGadOnRJHjSqVSmRlZSEjIwNmZmawsLCAQqFQ\n+2BSGnFxcZg3bx5GjRqFatWqoXPnzvj555/F14ggCOLrr2PHjjh+/DhycnKQn59f4qhVV1dXbNmy\nRQzZtLQ0xMXFwdHREdbW1vD29hZ3jufOncOGDRswdepUVK9evdi/w+vatWuH2NhYtZ3sjRs3xCO9\nAvXr1xffL/fv38fdu3clrf9Vz58/R/Xq1WFhYQGlUvnGz/mrGjVqBF9fX6xevRqCILzR+/+DDz7A\ngQMHIAgCMjMzcezYMXz44YcA1Lf74sWL4v6mKGW9TyrOO39k5O3trTY6p6Q3/IoVK7BkyRIMGDAA\nwMsdzaJFi8RD0AL//PMPFi5ciNzcXMjlclhZWSE0NBTAy0PYJ0+ewMvLC4aGhqhatSp2796ttnzD\nhg0RGhqKuXPnIicnB7m5uWjfvr3a6YqiuLi4YOLEifD29oZMJoOxsTE2bdqkcX0//PADIiMjYWRk\nBJlMhjlz5qid6vDy8irUz8SJE7Fu3ToMGTIEMpkMMpkMU6dORePGjTF37lwEBAQgKioKdevWLXY4\n9MSJE7Fy5Up4enrCyMgIDRo0wNq1azF58mQEBAQgPDwc7733HpydnTVus1RFbceMGTPw5ZdfIiws\nDK1atdL4CbqATCZDcHAwli1bhilTpiAsLEzj6+Ljjz/GnDlzIJfLCw21bdy4MRo3boxPP/0UKpUK\nT58+hZmZGQBgyZIlGD58ODp16iS+Tl7/hP6mGjdujC+//BK+vr5QqVQwNDTE8uXL0a1bN0RGRqJP\nnz6oWbMm2rdvL3kHe/DgQZw7dw4vXrxA9erV4eHhgdGjR4v9LVmyBLNmzYJSqURubi6cnZ3RunVr\nfPTRR7h27RoGDBgAc3NztG7dWvyQU5QvvvgCy5cvh4eHh/ganzt3LurVq4d9+/Zh/Pjx6NChAwDA\n0NAQM2bMQMeOHZGRkYFt27Zh4MCB6Nixo3gquSjm5ubYsGEDRo0ahWnTpokDbDZt2qQ234QJE+Dn\n54eTJ0+iefPm4um00ujSpQuOHDkCNzc31KxZE05OTpJ2viXx8vLCzp07cfLkSfTq1atU738A8PHx\nwYIFC8TX9MCBA9G1a1cAL0fFFvzM4v333y90lPqqstonlYQXSiXSoszMTFSvXh1KpRKTJ09Gnz59\nMHToUF2XVeYKtjM/Px9z5sxB3bp1xe/RiKR454+MiCoyb29vKJVKcQhzwbD7ysbf3x+JiYnIyclB\nq1at4O3treuS6B3DIyMiItI5vRrAQEREFRPDiIiIdI5hREREOscwogotLCwMDg4ORf4r+KFpUXx9\nfTFmzJhyrPR/zp07h2+++abQ9MDAQAwePFgrfRZcyfz1fx999JE4T9euXUv84eHr9u/fDwcHhxJ/\ntOzj4/NW1x8k4mg6qvDMzMzw9ddfF5pecCmciub8+fOIjo4utHP28fHR+PubsrBjxw6YmpqKj1+9\ngsCmTZuKvHQVUUXAMKIKz8DAQLzW3LusPMKzVatWaleXf9Wb/KCTqLzwNB298xISEjBhwgS0bt0a\nrq6u2L9/f6F5ijpF9s8//8DBwUHtwpX5+fnYvHkz3Nzc0LJlS3Tt2hWBgYFi+5kzZ+Dt7Y0PPvgA\n7du3x7Bhw3Du3DmxPSwsDNu2bcPjx4/FU2UFyxdVw927d/F///d/aNOmDZydnTFjxgy1S7MU1Hjs\n2DEEBQWhQ4cO6Nq1K9auXVvqG68VdZru8uXLGDVqFNq0aQMXFxcEBQVpvFkdADx+/Bjjxo0Tn++y\nuPwNEY+M6J1Q1MUlDQ0NIQgCfHx88PTpUyxatAgmJiYICwtDenq62pWTpQoKCkJERATGjRuHjh07\n4tmzZ+KVzYGX4dCjRw+MHTsWcrkcv/zyCyZMmIBvv/0WHTp0wNChQ/Hw4UNcunQJ69atA/C/q5m/\nLi0tDWPGjEHjxo2xcuVKZGVlYeXKlfD29saBAwfULrC5YsUK9O7dG2vXrsXFixexfv16/Otf/yp0\n4zWVSqX2XBkYGEAmkxXZ/5UrVzB27Fj07t0bEydORFpaGlauXImMjAysXr26yGUEQcDkyZORmZmJ\nxYsXw8jICGvXrsXz58/f+KrsRADDiN4B6enpRd7Z9eTJk4iJicGdO3fw/fffi3dBbdGiBT766KNS\nh1FMTAzCw8Mxd+5cfPzxx+L0V3f4BddqA17u+F1cXHD//n2Eh4ejQ4cOsLOzg42NDYyNjUs8tbht\n2zYAL69SXXA7koYNG2LYsGE4ceIE3N3dxXmdnJzEI6yCC1T++OOPhcLIyclJ7fHChQuLvfzQihUr\n4OzsjFWrVonTatWqhfHjx4vXKXzdqVOn8McffyA8PBytWrUC8PL0X+/evRlG9FYYRlThmZmZYfv2\n7YWm29jY4NChQ7C2tla7HXedOnXe6Pbqly5dAgCNI94SExOxevVqXLhwAcnJyeJVoNu3b1/q/m7c\nuIFOnTqJQQS8vH9RnTp18Ouvv6qF0ev3VfrXv/6ldhfQArt371YbtFCnTp0i+87KysL169cREhKi\ndiTl7OwMuVyO27dvFxkuN27cgK2trRhEwMsrqjdr1kzCFhMVj2FEFZ6BgYHazu9VycnJRZ4Gs7Ky\nKvG7j9elp6ejatWqauHwKpVKhcmTJyMrKwu+vr5o0KABqlSpgrVr16rdbkSq5OTkIm98Z21tLd6G\nosDrtw03MjIqcrh1s2bNih3A8Kr09HQIgoAvvvgCX3zxRaH2xMTEIpdLSUmBlZVVoemWlpaS7slF\nVByGEb3TatWqpXaH1gKpqalqQ5yNjY2Rm5urNs/z58/VHltYWCA7O1u8AvXrYmNjcefOHXz11Vfi\npfgBvPFw7Vq1ahUZYikpKW90ZFcaBXef/eyzz9C5c+dC7ba2tkUuZ21tXWTNaWlphQKTqDQ4mo7e\naa1atUJKSgquX78uTouPj8edO3fU5rOzs8Pjx4/VjiZeHQUHQLw1cnF3Ri1Y9tWBBY8fP8bvv/+u\nNl9xRy2va9OmDc6dOyfepBF4eRrs8ePH4v18tKV69epo1aoVHj58iFatWhX6Z2NjU+RyrVq1wpMn\nT3Dr1i1xWlxcnHiXVqI3xSMjqvDy8/Nx7dq1QtPt7e3RrVs3ODo6ws/PD/7+/jA2NkZYWFihU3e9\nevXC2rVrMXfuXAwePBh37twpNCS5UaNG8PLywtKlS5GamgpnZ2c8f/4c0dHRWL16NRo1agQ7Ozss\nW7YMfn5+yMrKwtq1awvtuBs1aoSUlBQcPHgQTZo0Qc2aNcW7BL/K29sbe/fuxfjx4zF+/HhkZ2dj\n5cqVaNq0KXr37l0Gz5xmAQEBGDt2LACgd+/eqFq1KuLj4/Hzzz/D39+/yN9Fubq6omnTpvD19cWM\nGTNgaGhY5PNNVFoMI6rwMjIyirzLq5+fH3x8fLBx40Z88cUXmDNnDqysrPDpp5/iwoULareDb9q0\nKRYvXowNGzbgxx9/xPvvv48lS5ZgxIgRausMDg5G7dq1sX//fnz11VewtLQUBw8UBF1ISAh8fX1h\nZ2eHSZMm4fLly/jzzz/FdfTt2xeXLl1CaGgo0tLSMGjQICxdurRQ/ZaWlti5cyeWLl2KGTNmwMjI\nCN26dcPs2bPVjr60pWPHjti1axfWrVuHmTNnQqVSoXbt2ujatWux4SKXy7Fx40YEBwcjMDAQ1tbW\n8PHxwenTp5Gdna31mqny4v2MiIhI5/idERER6RzDiIiIdI5hREREOscwIiIinWMYERGRzjGMiIhI\n5xhGRESkcwwjIiLSOYYRERHp3P8DtWPFL69n6t8AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nIiIiNvk/qOuCg8zXfkYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rDG2S6cipsQD",
        "colab_type": "text"
      },
      "source": [
        "### Encoding Categorical Features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jNa2jtu2psQE",
        "colab_type": "text"
      },
      "source": [
        "**Mapping Nominal Variables**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "leoiHCt7psQF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfCat = df[['Attrition','BusinessTravel','Department','Education','EducationField','EnvironmentSatisfaction','Gender','JobInvolvement','JobLevel','JobRole','JobSatisfaction','MaritalStatus','OverTime','PerformanceRating','RelationshipSatisfaction','StockOptionLevel','WorkLifeBalance']]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "38AuPJuQpsQG",
        "colab_type": "code",
        "outputId": "1cb68e2d-97df-4ded-e2e7-954ef82ae247",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        }
      },
      "source": [
        "dfCat['Attrition'] = dfCat['Attrition'].map({'Yes':1, 'No':0})\n",
        "dfCat['Gender'] = dfCat['Gender'].map({'Male':1, 'Female':0})\n",
        "dfCat['OverTime'] = dfCat['OverTime'].map({'Yes':1, 'No':0})"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
            "  \n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TlGwjQPSpsQI",
        "colab_type": "text"
      },
      "source": [
        "`Mapping used since column have only 2 type of values`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vhEm8vVQpsQJ",
        "colab_type": "text"
      },
      "source": [
        "**One Hot Vector**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tJqcWfq_psQJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfname = ['BusinessTravel','Department','EducationField','JobRole','MaritalStatus']\n",
        "\n",
        "for col in dfname:\n",
        "    data = pd.get_dummies(df[col], prefix=col)\n",
        "    dfCat = pd.concat([dfCat,data], axis = 1)\n",
        "    dfCat.drop(col, axis = 1, inplace=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kLN_sNjRpsQL",
        "colab_type": "text"
      },
      "source": [
        "`One Hot Vector used since column have more than 2 type of values`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MtrkDaH5psQO",
        "colab_type": "code",
        "outputId": "cd531541-ee18-4759-dda4-ebcc9fb0f005",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        }
      },
      "source": [
        "dfCat.head(10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Attrition</th>\n",
              "      <th>Education</th>\n",
              "      <th>EnvironmentSatisfaction</th>\n",
              "      <th>Gender</th>\n",
              "      <th>JobInvolvement</th>\n",
              "      <th>JobLevel</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "      <th>OverTime</th>\n",
              "      <th>PerformanceRating</th>\n",
              "      <th>RelationshipSatisfaction</th>\n",
              "      <th>StockOptionLevel</th>\n",
              "      <th>WorkLifeBalance</th>\n",
              "      <th>BusinessTravel_Non-Travel</th>\n",
              "      <th>BusinessTravel_Travel_Frequently</th>\n",
              "      <th>BusinessTravel_Travel_Rarely</th>\n",
              "      <th>Department_Human Resources</th>\n",
              "      <th>Department_Research &amp; Development</th>\n",
              "      <th>Department_Sales</th>\n",
              "      <th>EducationField_Human Resources</th>\n",
              "      <th>EducationField_Life Sciences</th>\n",
              "      <th>EducationField_Marketing</th>\n",
              "      <th>EducationField_Medical</th>\n",
              "      <th>EducationField_Other</th>\n",
              "      <th>EducationField_Technical Degree</th>\n",
              "      <th>JobRole_Healthcare Representative</th>\n",
              "      <th>JobRole_Human Resources</th>\n",
              "      <th>JobRole_Laboratory Technician</th>\n",
              "      <th>JobRole_Manager</th>\n",
              "      <th>JobRole_Manufacturing Director</th>\n",
              "      <th>JobRole_Research Director</th>\n",
              "      <th>JobRole_Research Scientist</th>\n",
              "      <th>JobRole_Sales Executive</th>\n",
              "      <th>JobRole_Sales Representative</th>\n",
              "      <th>MaritalStatus_Divorced</th>\n",
              "      <th>MaritalStatus_Married</th>\n",
              "      <th>MaritalStatus_Single</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Attrition  Education  ...  MaritalStatus_Married  MaritalStatus_Single\n",
              "0          1        2.0  ...                      0                     1\n",
              "1          0        3.0  ...                      1                     0\n",
              "2          1        2.0  ...                      0                     1\n",
              "3          0        4.0  ...                      1                     0\n",
              "4          0        1.0  ...                      1                     0\n",
              "5          0        2.0  ...                      0                     1\n",
              "6          0        3.0  ...                      1                     0\n",
              "7          0        1.0  ...                      0                     0\n",
              "8          0        3.0  ...                      0                     1\n",
              "9          0        3.0  ...                      1                     0\n",
              "\n",
              "[10 rows x 36 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DjCak6kKpsQP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dfNum = df[['Age','DailyRate','DistanceFromHome','HourlyRate','MonthlyIncome','MonthlyRate','NumCompaniesWorked','PercentSalaryHike','TotalWorkingYears','TrainingTimesLastYear','YearsAtCompany','YearsInCurrentRole','YearsSinceLastPromotion','YearsWithCurrManager']]\n",
        "\n",
        "dfCombined = pd.concat([dfNum,dfCat], axis = 1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EiVXsJbepsQR",
        "colab_type": "text"
      },
      "source": [
        "###  Skewness Check"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vpgCfPBspsQR",
        "colab_type": "code",
        "outputId": "efb21a40-d6aa-4e04-d153-53649da8cec2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 884
        }
      },
      "source": [
        "for i in range(0,len(dfCombined.columns)):\n",
        "    print(dfCombined.columns.values[i],'--- {:,.2f}'.format(dfCombined.iloc[:,i].value_counts(normalize=True).values[0]*100), '% skewed ')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Age --- 9.86 % skewed \n",
            "DailyRate --- 5.44 % skewed \n",
            "DistanceFromHome --- 13.74 % skewed \n",
            "HourlyRate --- 7.14 % skewed \n",
            "MonthlyIncome --- 5.37 % skewed \n",
            "MonthlyRate --- 5.31 % skewed \n",
            "NumCompaniesWorked --- 33.13 % skewed \n",
            "PercentSalaryHike --- 18.03 % skewed \n",
            "TotalWorkingYears --- 17.96 % skewed \n",
            "TrainingTimesLastYear --- 37.07 % skewed \n",
            "YearsAtCompany --- 17.55 % skewed \n",
            "YearsInCurrentRole --- 23.61 % skewed \n",
            "YearsSinceLastPromotion --- 37.55 % skewed \n",
            "YearsWithCurrManager --- 22.38 % skewed \n",
            "Attrition --- 85.17 % skewed \n",
            "Education --- 42.11 % skewed \n",
            "EnvironmentSatisfaction --- 34.49 % skewed \n",
            "Gender --- 61.56 % skewed \n",
            "JobInvolvement --- 61.16 % skewed \n",
            "JobLevel --- 40.20 % skewed \n",
            "JobSatisfaction --- 34.90 % skewed \n",
            "OverTime --- 73.27 % skewed \n",
            "PerformanceRating --- 85.51 % skewed \n",
            "RelationshipSatisfaction --- 34.76 % skewed \n",
            "StockOptionLevel --- 45.65 % skewed \n",
            "WorkLifeBalance --- 63.06 % skewed \n",
            "BusinessTravel_Non-Travel --- 90.48 % skewed \n",
            "BusinessTravel_Travel_Frequently --- 82.38 % skewed \n",
            "BusinessTravel_Travel_Rarely --- 72.86 % skewed \n",
            "Department_Human Resources --- 95.92 % skewed \n",
            "Department_Research & Development --- 67.01 % skewed \n",
            "Department_Sales --- 71.09 % skewed \n",
            "EducationField_Human Resources --- 98.23 % skewed \n",
            "EducationField_Life Sciences --- 55.78 % skewed \n",
            "EducationField_Marketing --- 89.86 % skewed \n",
            "EducationField_Medical --- 69.66 % skewed \n",
            "EducationField_Other --- 94.90 % skewed \n",
            "EducationField_Technical Degree --- 91.56 % skewed \n",
            "JobRole_Healthcare Representative --- 91.43 % skewed \n",
            "JobRole_Human Resources --- 96.67 % skewed \n",
            "JobRole_Laboratory Technician --- 83.33 % skewed \n",
            "JobRole_Manager --- 93.54 % skewed \n",
            "JobRole_Manufacturing Director --- 90.68 % skewed \n",
            "JobRole_Research Director --- 94.90 % skewed \n",
            "JobRole_Research Scientist --- 81.16 % skewed \n",
            "JobRole_Sales Executive --- 73.67 % skewed \n",
            "JobRole_Sales Representative --- 94.63 % skewed \n",
            "MaritalStatus_Divorced --- 78.91 % skewed \n",
            "MaritalStatus_Married --- 51.22 % skewed \n",
            "MaritalStatus_Single --- 69.86 % skewed \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iSVhtoOApsQS",
        "colab_type": "text"
      },
      "source": [
        "`No feature is 100% skewed`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2BD0WO6WpsQT",
        "colab_type": "text"
      },
      "source": [
        "### Data Preparation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RRp0WZ3xpsQT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = dfCombined"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tb3kDF-npsQV",
        "colab_type": "code",
        "outputId": "381109b3-bec9-4b05-a8c6-fc1c2ed5f1bf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1470, 50)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0xtTEAwWpsQY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "feature_columns = ['Age',\n",
        " 'DailyRate',\n",
        " 'DistanceFromHome',\n",
        " 'HourlyRate',\n",
        " 'MonthlyIncome',\n",
        " 'MonthlyRate',\n",
        " 'NumCompaniesWorked',\n",
        " 'PercentSalaryHike',\n",
        " 'TotalWorkingYears',\n",
        " 'TrainingTimesLastYear',\n",
        " 'YearsAtCompany',\n",
        " 'YearsInCurrentRole',\n",
        " 'YearsSinceLastPromotion',\n",
        " 'YearsWithCurrManager',\n",
        " 'Education',\n",
        " 'EnvironmentSatisfaction',\n",
        " 'Gender',\n",
        " 'JobInvolvement',\n",
        " 'JobLevel', \n",
        " 'OverTime',\n",
        " 'PerformanceRating',\n",
        " 'RelationshipSatisfaction',\n",
        " 'StockOptionLevel',\n",
        " 'WorkLifeBalance',\n",
        " 'BusinessTravel_Non-Travel',\n",
        " 'BusinessTravel_Travel_Frequently',\n",
        " 'BusinessTravel_Travel_Rarely',\n",
        " 'Department_Human Resources',\n",
        " 'Department_Research & Development',\n",
        " 'Department_Sales',\n",
        " 'EducationField_Human Resources',\n",
        " 'EducationField_Life Sciences',\n",
        " 'EducationField_Marketing',\n",
        " 'EducationField_Medical',\n",
        " 'EducationField_Other',\n",
        " 'EducationField_Technical Degree',\n",
        " 'JobRole_Healthcare Representative',\n",
        " 'JobRole_Human Resources',\n",
        " 'JobRole_Laboratory Technician',\n",
        " 'JobRole_Manager',\n",
        " 'JobRole_Manufacturing Director',\n",
        " 'JobRole_Research Director',\n",
        " 'JobRole_Research Scientist',\n",
        " 'JobRole_Sales Executive',\n",
        " 'JobRole_Sales Representative',\n",
        " 'MaritalStatus_Divorced',\n",
        " 'MaritalStatus_Married',\n",
        " 'MaritalStatus_Single']\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xxaZ56iVpsQZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "X = data.drop(['Attrition'],axis=1, inplace=False)\n",
        "\n",
        "y = data['Attrition']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "taCw1k8OpsQc",
        "colab_type": "text"
      },
      "source": [
        "### Split the Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JD4y-cAKpsQd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train_org, X_test_org, y_train, y_test = train_test_split(X,y,random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gpzibF_VpsQe",
        "colab_type": "code",
        "outputId": "1e1e26ea-5e12-48b5-bf9d-7c56402714a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "print('X_train shape is', X_train_org.shape)\n",
        "print('X_test shape is', X_test_org.shape)\n",
        "print('y_train shape is', y_train.shape)\n",
        "print('y_test shape is', y_test.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train shape is (1102, 49)\n",
            "X_test shape is (368, 49)\n",
            "y_train shape is (1102,)\n",
            "y_test shape is (368,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Mbv8fYOpsQf",
        "colab_type": "text"
      },
      "source": [
        "**Correlation Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6dlzMtlqpsQg",
        "colab_type": "code",
        "outputId": "2e030fb8-97ef-41bf-f06d-8005dc5b22ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "f = plt.figure(figsize=(19, 15))\n",
        "plt.matshow(data[feature_columns[:14]].corr(), fignum=f.number)\n",
        "plt.xticks(range(data[feature_columns[:14]].shape[1]), data[feature_columns[:14]].columns, fontsize=14, rotation=45)\n",
        "plt.yticks(range(data[feature_columns[:14]].shape[1]), data[feature_columns[:14]].columns, fontsize=14)\n",
        "cb = plt.colorbar()\n",
        "cb.ax.tick_params(labelsize=14)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABI0AAAPqCAYAAAAenq9YAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3XlcleXW+P/P3puZrYgCMinIrDIl\noDigOOCY84Dm0cqyzikrM4fmzDqenLVMSXNWcNZwVsQJc8YB54xEEUQcEJAZ7t8fvvb9YHW+r+f3\nZG7A9f6nRDevde97vNa9rnVpFEVREEIIIYQQQgghhBCiEq2xAxBCCCGEEEIIIYQQVY8kjYQQQggh\nhBBCCCHEH0jSSAghhBBCCCGEEEL8gSSNhBBCCCGEEEIIIcQfSNJICCGEEEIIIYQQQvyBJI2EEEII\nIYQQQgghxB9I0kgIIYQQQgghhBBC/IEkjYQQQgghhBBCCCHEH0jSSAghhBBCCCGEEEL8gSSNhBBC\nCCGEEEIIIcQfSNJICCGEEEIIIYQwEkVRjB2CEP+VibEDEEIIIYQQQgghnkeKoqDRaDh79iynTp3C\n1dWVxo0b06BBA2OHJgQgSSMhhBBCCCGEEMIoNBoNCQkJjB07Fnd3d9LT0wkPD2fo0KG0bNnS2OEJ\nIdPThBBCCCGEEEKIZ8kwJe327dvs2LGDjz/+mM2bNzNt2jSKioqIiYnh8OHDRo5SCKk0EkIIIYQQ\nQgghninDlLR169aRl5dH27ZtAWjfvj3m5uYsWbKEBQsWoNFoaNWqlZGjFc8zqTQSQgghhBBCCCGe\nsUuXLrF//37OnDnDnTt31J+3atWKESNGYGlpyfTp0zl69KgRoxTPO93EiRMnGjsIIYQQQgghhBDi\neeLv74+dnR0pKSlkZmbSqFEj6tWrB0CDBg2oXbs2GRkZdOvWjdq1axs5WvG80iiyvp8QQgghRI1n\nWKFHCCHEs2e4Bqenp1NcXExpaSl+fn4ArF+/nuXLlxMQEMArr7yCt7e3+rnCwkIsLS2NFbYQkjQS\nQgghhKipPv/8cwAmTZoESOJICCGMwXDt3b17NzNnziQ/Px9TU1Pc3d2ZOXMmtra2rFu3jhUrVhAc\nHMxLL72kJpSEMDbpaSSEEEIIUQPl5+dTr149kpKSmD59OvC48aq8LxRCiGdLo9Fw/Phxxo8fzyuv\nvMLs2bP54osvyMzM5NVXXyU/P5+BAwcybNgwDh48yPr16ykpKTF22E9FRUWFsUMQf5GsniaEEEII\nUQPp9XqGDx+OtbU1a9euRVEUxo0bpyaOpOJIVCcVFRVotY/fd+fk5FCnTh0jRyTEf5eamoqHh8cT\nPzt+/DitW7dm8ODB6s8aN27MsGHDGDt2LDExMQwcOBAzMzOaNWuGmZnZsw77b2E4b7/66itsbW0Z\nNWqUkSMS/39JpZEQQgghRA1TXl4OgK2tLX5+frRp04bFixfz/fffA1JxJKofw8Bz1qxZzJo1i4KC\nAiNHJMSfi4+PZ/jw4Tx69OiJn9+8eZOMjAz1z6WlpdSvX5/33nuP3377jRs3bgDQu3dvGjRo8Exj\n/jtUvsccOXKEgwcPEhYWZsSIxP+VJI2EEEIIIWoYnU4HwJQpU5g7dy7379/HycmJxYsXy1Q1Ua1U\nntpy8OBBdu3axYABA7CysjJiVEL8d927d2ft2rVYW1vz4MED9eddu3YlLy+Pbdu2AWBqago8rgot\nLS3FxKRmTQIyVLMmJCSwdetWevbsSYsWLeS+Uw1J0kgIIYQQogbas2cP69atY8KECcycOZPY2Fj+\n8Y9/sGXLFmbOnAlI4khUfYYKo23btnHs2DE6d+5MQECAWk0nRFWiKAomJiY4Oztz+fJlOnTowIED\nBwDw8vLCx8eHn376ia1btwKPq41OnjxJnTp1amQiNC0tjR9//JFdu3aRl5cHyH2nOtJNnDhxorGD\nEEIIIYQQT9f+/fvJyMhg9OjRaLVa9Ho9Hh4e3L17l1WrVqHVagkNDZXeRqLKKy0t5f333ycxMZE6\nderQo0cPtFqt9OYSVUJFRcUfesWVlZXh4ODAxYsXWbp0KX5+fgQEBNCoUSOSk5OJj48nNjaWhIQE\nDhw4wLfffltjpqRVPifr1KmDvb09N2/e5NSpU/j4+NCwYUPprVfNSNJICCGEEKIGMQxgsrKySEpK\nonnz5tjZ2QGPp0HUqlWLbdu2kZSUhI2NDUFBQUaOWIgnVR5MKoqCTqejf//+pKSkcOnSJVxdXXFz\nc0On08nAUxidRqMhIyOD3bt306RJE7Zt28asWbPo3r07Xbp04ddff2XevHk0btyY0NBQXnjhBZo3\nbw5As2bN+OCDD/D29jbyVvx1lZvV5+Xl8ejRIywtLXF3d8fFxYVff/2V06dP4+TkhKurqySOqhFJ\nGgkhhBBCVGOGJJFB5cF2fHw8RUVF+Pj4oNfrgccrT2VnZ/P222/Tt29f9SFfiKqg8sCzoqICRVHQ\narWYmpoSFRXF3r17OX78OC4uLri6ukrFkTC68vJypkyZwp49e7h06RJz5szhtddew9/fH61WS/v2\n7fntt9+YN28eTZo0oWnTpri4uNCmTRsCAwNrxEqAlc/bBQsWMG/ePGJjY9m5cydeXl6EhIRgZ2fH\n2bNnOXnyJE5OTri4uMh5W01I0kgIIYQQopqq/KC+fv16du3axerVq6lXrx6BgYG4uroye/ZscnJy\nKCoqory8nBkzZmBtbc1bb72FVqulvLxcEkeiSqh8PC9btoy4uDgWLVqEhYUFFhYW2Nvb0717d+Lj\n4zly5Aiurq5q4kgIY9FqtXTs2JHt27ezZ88e+vTpw7vvvgs8TiiZmJioiaOFCxfi5eVFo0aNjBz1\n02VI/syePZvY2Fhef/11XnnlFZYtW8bx48dp3749jRs3xtbWlpSUFHbv3k1gYCD29vZGjlz8b0jS\nSAghhBCimjI8qE+dOpXly5fj4uJCWVkZM2fOpKysjCFDhtCoUSMOHTrEhg0bSExMRFEUYmJi1Kk9\nMuAWVYXheJ4xYwbLly8nIiKC2rVrs3btWu7fv4+zszNOTk706NGDbdu2ER8fT0hICI6OjkaOXDzP\nSkpKKCsrIyEhAVtbWx4+fEhxcTFNmjTBxMTkicTR2bNnWb9+PdHR0erqaTXFrVu3iImJ4ZNPPqFr\n165cvnyZzZs388Ybb9CiRQsA3NzcsLCwQKvV0qdPH6k0qiY0irQuF0IIIYSothITE5k0aRIxMTH4\n+flx7tw5Bg0axIwZM+jRowcADx48IDc3l7y8PJo0aYJWq6WsrKzGLfEsqr/4+HjmzJnD7NmzCQgI\n4PTp0wwZMoQGDRrQvHlzRowYgaenJ/n5+XzzzTd8+eWX6HQ6Y4ctBBUVFZSWljJ+/HgyMjLo06cP\n0dHR6nW2pKQEMzMzsrKyqF+/vpGjffouX77MW2+9RWJiIgcOHGD06NGMHz+eIUOGkJ+fz9atWxk8\nePATn6lcXSiqLqk0EkIIIYSoxs6cOcOjR48YPnw4W7ZsYfTo0Xz00Uf079+f/Px8bt26hZOTE3Xq\n1MHBwQGNRkNFRYUMtEWVU1FRQWpqKh4eHnTt2pWEhARGjx7NxIkTadKkCYsXL6a4uBh7e3tcXV3p\n0KGDTLEURmHoo3XhwgX279/PL7/8QklJCS4uLrRq1Yrk5GROnTpFaWkpgYGBzJo1i9jYWLp160at\nWrWMHf5f9md9xExMTNi9ezdXr15l9uzZfPTRR2qS6ObNm8ybNw8XF5cnVomTSqPqQV4vCSGEEEJU\nE5Uf1A1vaDMzM7l//z5Hjhxh4sSJjB07lpdeegmAhIQETp8+zdixY58YqMgAW1QFv18lTavV0qxZ\nM3Q6HdnZ2cyfP59//etf9OvXj8LCQhYvXszevXtp0KAB/v7+6uclASqeNY1Gw65du/j8889xdHSk\nqKiIGzduMG7cOEaMGMHEiRP56quvWLlyJatXr+bOnTv88MMPNeLa+/um1/Xr16dbt26Ym5vj5+fH\nxo0befHFFxk0aBAAxcXFTJ06lVq1aqnT1ET1IkkjIYQQQohqoPIAe/78+VhaWvLKK6/QpUsXduzY\nwauvvspnn32mJoyKiorYuXMntra26sppQlQVlQeejx49ori4mLp166r9iS5evEheXh4BAQEAZGVl\nER4eTrNmzejXrx8gVQrCeK5evcoXX3zBBx98QK9evcjLy2Pr1q1Mnz4dnU7Hyy+/zOeff86hQ4e4\ne/cu7dq1w93d3dhh/2WVz9s7d+5w6NAhrl69iqWlJZ07d2bEiBGkp6dz/vx5Pv30UxwcHDhx4gQ5\nOTls3LgRrVYrU9KqIUkaCSGEEEJUYatXr2bw4MFoNBrKysqoqKhQp+0AODs706VLFyoqKrh48SJp\naWncuHGDZcuWkZWVxdy5c9FoNLIsuagyfl+pcOjQITIzM/Hx8WHYsGGEhIRQXFxMWVkZZ8+eRVEU\nFi9ejImJCQMHDgQer0olFUbCWLKysrC3t6dz587q6n6vvvoqZWVlzJgxgxYtWuDn56f2laspDOft\n1KlTSU5Opk6dOpiZmTFhwgRKS0vp0aMHX3zxBQkJCezatYuHDx/SuHFjxo8fj4mJifTSq6Zkjwkh\nhBBCVFGnT59m4sSJXLp0iS+//FJ96C4sLFQHzJaWlgwbNgwrKys2bdpEr1698PT0xMHBgY0bN6qr\n98gAW1QVhoHnnDlzWLduHaNHj+aFF15g2LBhPHjwgNmzZ/PCCy/QuXNnVq5ciUajoX79+qxYsQJ4\nXHUnx7MwpvLycn755RcePnxInTp11Gts165dWbVqFbdu3cLPz8/YYf4tNm/ezOrVq1m+fDlubm4U\nFBTw7bff8tFHHwHQo0cP3njjDUaOHPnEiwrDKnKi+pG9JoQQQghRRQUEBDBnzhw+/PBDFEVh0qRJ\nmJiYPFE1VFpaio2NDS+//DIvv/wyly9fxsHBATs7O7U6SR7URVVQUFCAlZUViqKQnp5OYmIikydP\npm3btpw8eZLCwkL69eunriz14Ycf0rdvXzQaDV5eXrLqnzCKP6vSbNy4McHBwSxYsIC33noLFxcX\nAGxsbLCysqKsrMwYoT4TWVlZBAUFqX3FatWqxddff01xcTETJ07EzMyMyMhITE1Nn/icJHqrL5lM\nKIQQQghRBVVUVGBiYkKXLl2YNm0a27dv5+OPP6asrAxLS0ssLCwAMDU1pbS0FJ1OR3FxMU2bNsXe\n3l5dJU0G2KIq2LZtG9OmTQMe9yIqLCykqKiItm3bkpiYyMiRIxk/fjwDBw7k0aNHbN68mdLSUnx9\nffHx8VFXSZPjWTxLhoTR6dOn2bBhA/Hx8QDUr1+fHj16cPXqVb799luuXLnCrVu3WLRoEbm5uWov\nrprq4sWLVFRUqC8mNBqN2tvp008/5dixY8Dj+5io/uSqK4QQQghRBRmm8MTFxeHo6MjkyZP54IMP\nuH//Pnl5ebzzzju4u7tTUFBAUVERpqamtGrVigkTJvzhdwhhbBkZGZw/f179s62tLQD//ve/2bhx\nIxMmTFCX505PT2fdunW4uroSGhqqfkYqFcSzptFoSExM5N1338XHx4eLFy+yfft2Jk2axLBhw9Bq\ntezYsYPevXvj7e1Nfn4+P/zwA87OzsYO/S/7bw2rO3fuzNatW/niiy/48MMPsba2Bh6f08OHDyc/\nP59x48axbds26tat+6zDFn8DSRoJIYT4A2mYK4TxVH5QX7FiBfPnz2fx4sV4enoyffp0Jk+eTHl5\nOR9++CFlZWUUFxcDYGJiQu/evY0ZuhD/Vf369blz5456fNeqVYs2bdqwYcMGunfvriaMSkpKmDVr\nFtbW1jRr1szIUYvnmaIoVFRUsG3bNr744gu6detGeno6I0eO5P3332fGjBkMHTqUvn37kpKSgoWF\nBU5OTjg4OBg79L+s8n3o5MmTFBUVYWVlRbNmzWjYsCH9+/dn+/btfPLJJ4wZM4bCwkK+++476tat\ny8iRI0lMTOTUqVNERUUZeUvE0yBJIyGEeI4ZkkMPHjyguLgYvV6PXq9Xp7VIlYIQz57hvLt8+TJZ\nWVl8/PHHakPV9u3bo9VqmTBhAhcvXmT8+PF/+Lz0fBFVgeH+YriXhISEYGpqyo0bN3B3d8fCwoK+\nffty69YtTp48yddff41er+f06dPcv39flueuQSq/iKoOL6UMMebk5KAoCo6OjgQHB6PX6/Hz8yMu\nLo4hQ4YwduxYJk+eTMOGDWnRooWxw35qFEVRz7lZs2axefNm9Ho9qampDBs2jDfeeIOhQ4diaWnJ\nunXr6NKlC87OztSuXZsffviBe/fuUbt2bfR6vZG3RDwt8kQhhBDPKcNDUUJCAj/++CMZGRn4+Pjg\n5ubGJ598Ig/pQhiJoiicOnWKf/zjH5iZmfHVV1+pf2dmZkb79u2ZPHkyH3/8Menp6Xz77bdPfF4S\nRqIquHjxIm5ubgDo9XpsbGwoKirizJkzuLu7A+Dv78/o0aNJSkrip59+ws3NDV9fX1meu4YwPGc8\nevQIS0tLysrKMDc3r/KJI41Gw+7du/nuu+8oKysjPT2doKAgvL29AXB1dSUuLo7hw4fz3nvvMWfO\nHBo2bGjkqJ8ew76JiYlhw4YNzJkzh5CQEObOncvcuXPJy8tjzJgxREdHEx0dzbFjx6hTpw7e3t5o\nNBqWLFmCmZkZHh4eRt4S8bTIVVgIIZ5TGo2GQ4cO8cEHHzBmzBjatWvHhg0bWLhwIWFhYXTt2tXY\nIQrxXNJoNISGhvLhhx/yzTffkJycTEREhNobwsTEhKioKIqKiti0aZNUYtQgf7Yvq/oA+8+cP3+e\nf/7znwBYWFgQGhqKg4MDHh4e3LlzB3i86p+pqSl+fn74+fnx6quvPtGzSJpeV2+G4/bAgQPExsaS\nl5cHwLhx43jhhReMHN3/26VLl5g8eTI9e/bE0dGR+fPns2TJEho0aEDjxo2Bx4mjZcuW8eabb9bI\nXls3b97kwoULfP7554SEhLBnzx6WL1/O0KFDWbNmDQAjR47Ew8NDrbI6ffo0W7ZsIT4+nhUrVqir\nIIrqTzdx4sSJxg5CCCHEs6UoCqWlpcTExBAZGcmbb76Joih8+eWX9O3blxEjRhg7RCGeG4YVaH4v\nODgYU1NTfvzxR+rWrYu3tzfm5ubA4ylsPj4+9OvXT50CVN0SC+JJlRNGS5cu5eDBg7Ro0aJa7lcr\nKysGDhxI27Zt1Wbt586d4+rVqyQnJ9OhQwfs7OwoLy9Hq9U+MR3GQBKh1ZuhgfTo0aPp2bMnXbt2\nJTU1lVmzZtGpUyfq1atn7BD/1C+//MLhw4dxc3Pjgw8+IDAwkG7durFkyRJSUlLw9fXF3t4eABsb\nG6Kjo6lTp46Ro376NBoNOp2OyMhILly4wCeffMI///lP3nnnHYqLi4mLiyM7O5sXXnhBnYZ269Yt\nbty4wRdffIGPj4+Rt0A8TZK+F0KI55BGo8HMzIzs7GwiIyO5ffs2gwYNIjIykk8//RSAhIQETE1N\nadeunZGjFaLmqpwoWLduHZcvXwbA19eXQYMG8eabb1JaWsq0adPQaDQMGjRIfUCvPKiWAXb1Z9iH\nU6ZMYceOHQwZMoSMjAx1FabqUHGUn5+v9sY7ceIEzZs3JzAwUP37mzdvMnXqVIYMGcLKlSvx8fGR\nSrkaqrCwkFWrVvH222/zxhtvkJmZyZUrV+jXr98TCYWqsv8VRaGoqIhRo0aRlpb2RLW1k5MTsbGx\nvPTSS0yfPp3Ro0erx3VNqIb7s31Qu3ZtOnTogJWVFXv37iUwMJABAwYAYG5uTqtWrXj48OETTb9D\nQ0MJDAzEzMzsmcYv/n7GP0OFEEI8c+Xl5RQVFaHVajlw4ADDhg2jbdu2fPnllwDk5uayZ88erl+/\nTnl5uZGjFaLmMjyoT506lenTp1NQUMD58+f58ccfee211wAYNWoU7777LjNmzGDJkiUUFBQYM2Tx\nN1q9ejWbN29m7ty5vPnmmzg7O6MoCmVlZVU+YXTo0CGio6MpLi5m8uTJfPXVV+qUJMN9pEGDBowf\nP56QkBCGDx/OxYsXq0TCQPw1MTExLF269ImfFRcXc/36ddq3b8+DBw8YNGgQrVq1YtKkSQCsX7+e\nBw8eVIn9b0jIWlpaEhMTQ5MmTbh69SpHjhxR/42LiwtxcXGcOnWK+fPnU1JSYsSIn57KVX67d+9m\n9erVHDhwgKKiIvR6PSUlJaSmplJeXo5Op6O8vJyUlBSGDRvG0qVL1Wb1BpIwqplkepoQQjwHKq8E\nYmZmRnl5Oebm5jg4OPDtt99iZ2fHwoUL1UHJvHnz2L9/P6NHj8bW1tbI0QtRs504cYLvv/+eOXPm\nMHz4cHr37o2Liws7d+7k+PHjdO/enbCwMIqLizl27BiDBw+u8gmEp+G/TbmrSVPxfr8ta9euxd/f\nn/79+3Pt2jUSEhL49NNPWbNmDTY2Nmoj3qrI3Nyc+Ph4lixZwpkzZ1i6dClubm5/mHpmY2NDs2bN\nOH78OKdOnaJXr15GjFr8VaWlpSQlJfHtt99ib2+Pv78/AKamphw5coScnBy+/PJLIiMj+eyzz9Dp\ndDx8+JBFixah0WjUHkHGYHg2Ki0tRafTUVJSgp2dHaGhoWzfvp1ffvkFZ2dnXFxcAKhVqxZ9+/Yl\nPDy8yk6v+/+jcvXilClT+OGHHzh9+jTHjh3j/PnztGzZEisrK8rLy1mwYAEnT55kyZIl5ObmMm7c\nuP86tVTUPJI0EkKI54BhlbTPP/+cjRs3kpGRgaurK02bNqVWrVps3LiRixcvkpiYyJ49e9i6dSsL\nFizAy8vL2KELUeMcPXqUmzdv0qBBAwDOnDnD4cOHGTVqFBYWFuh0OlxcXKhduzb79u0jKCgIBwcH\nWrZsSf/+/dFoNNViqtJfUXm6xNmzZ7l+/br6ndWU7a882Fq6dCmWlpbcvn2btWvXYmJiwvz587lz\n5w6tW7emuLiYTZs2MWDAgCr7Jl+v13PlyhWOHTtGw4YNefnll7GwsPjT/VSrVi0iIyMZNGhQtd+P\nzzudTkdQUBCWlpZ888031KtXj4CAABRF4dy5cyxfvpyAgABmzpypNoyeN28eycnJvPXWW9SqVcso\ncRuuIQcPHuT7778nLi6OlJQU7Ozs8PPzIzw8nDVr1nD16lVcXFzUaaJ6vb5G9DCqfA29fPkyW7Zs\nYcqUKbz++utYWVlx7NgxkpKSaNu2LYGBgXh4eFBcXIyfnx+zZs3CxMRE7Ukmaj5JGgkhxHPg0qVL\nvPvuu/Tr1w+tVsvly5c5dOgQzZo1o02bNjRv3pwrV65QWlqKq6srn332mTQxFOIpUxSFe/fu8c47\n7/Do0SPatm2LVqslNzeXffv2ERgYiKurK/C4T0atWrWIiYkhPDwcT09PgBqTMPl/qZxMmTFjBosW\nLSIhIYEjR46wfft2OnfurDYEr64qJ8Xi4uKYP38+Xbp0oXHjxhQVFbFt2zb69u3LoEGD6Nq1K05O\nTpw7d47OnTtjZWVl5Oj/x+8rpRwcHOjcuTPHjh3jp59+om3bttSqVetPj1krKytp4l5DmJmZ0bRp\nU8zMzJg6dSq2trYEBQURGhrKuXPnuHPnDleuXOH69eusWbOGn376iZiYGKMuya7RaNi7dy/vvvsu\n4eHhaLVaMjMz+e677wgMDCQ4OJgWLVqwceNGTpw4gZeXF05OTkaL92kznHNbt25l2bJl1KlTh+jo\naKysrGjcuDGmpqYcP36cn3/+mbZt2+Lv70/r1q1p3bo1Wq2WsrKyGtHPSfzvSNJICCFqqMoP6b/9\n9huWlpaMHj2aTp06YWVlxblz59QqBn9/fyIjI+nZsyctW7ZUl/YWQjw9Go0GKysrKioqWLx4Ma1a\ntVIHITt27CAzMxNvb2/1/CspKeHgwYO0a9cONze3J35PTWbYviVLlrBs2TJmz57NuHHjKCwsZP36\n9bRu3VpNrlXXBJoh5pSUFA4cOMBLL71EREQE9erVIzIykn79+hEeHq6uMPbZZ5+h1+sZMGBAldne\nyomvVatWkZycTFBQEE2aNKFNmzZs2bKFnTt30r59e7V5e1xcHN7e3k8MNqvK9oj/G8M5aGpqSuPG\njTE3N2f69OnUqVOHkJAQOnXqRHZ2NteuXeP8+fPY2toyefJkfH19jRp3bm4ukyZNon///rz//vtE\nRUURHh5Obm4us2fPJjIyEl9fX8LCwkhISGDAgAFGq4r6u5SUlLBmzRpOnjxJYWEhQ4YMAR732jOs\n1nny5Em2bNlC9+7dn0jWS4XR80WSRkIIUQMZHuKSk5NJSkri3LlzlJeXExERAYC3tzeWlpakpKSQ\nlJSEv7+/uoQsyEO8EH+n4OBgzp07x5YtW4iKiqJ+/fo0btyYmJgYUlNTuXv3Lo8ePWLq1KkUFxfz\nwQcfPHcP6GVlZaxdu5YBAwbQoUMHEhIS+M9//sNnn31Gly5dKCwsxNTUtFpfq/bt28dHH33EtWvX\n6NatG25ubup0DzMzMwoLC9m3bx///ve/uX//PkuWLEGn01WZRJkhhqlTp7JixQo6duxIgwYN0Ov1\n1K5dm8jISOLj49m8eTP16tXj3//+N6dPn2bIkCFVIv5n4fdVVDVpOo/hOCwuLqa4uBgzMzPMzc1p\n1qwZWq1WTRyFhoYSHh5Onz596Nu3L1FRUdjZ2RklXnh83JaXl1NaWqpW+Pn5+QGPq9+aNm3K2bNn\nycvLIywsDHt7e/r27VvjpqTB46mFoaGhFBYWcubMGbKysmjRogU6nU5NHJWWllJRUUFUVNRzc96K\nP5KkkRBC1EAajYbdu3czatQorly5wokTJ/jtt9/o1q2b+qbMy8sLa2trNanUpUsXdDqdPBQI8ZTt\n3buX3377Db1ej7W1NfB4OsfRo0fR6XQ0bdoUV1dXWrRowalTp0hISODEiRPo9XqWLVv2XPSO+LPB\ndUxMDEFBQdy/f5/333+fcePGMXjwYMrLy1m2bBkZGRlGr1b4Kxo1akRaWhpnzpzB1NSUsLAwLCws\n1IHdr7/+ytGjR1EUhR9++AFTU1PKysrUvjBVQVxcHCtXruTHH38kIiICvV5PaWkpOTk51K9fn27d\nurFnzx6OHDmCubk5y5cvx8QJE3acAAAgAElEQVTE5LmZkmbYxs2bN+Pt7V2l9t1fYThG9+/fz7//\n/W+WL1/O3r17sbCwwNXVldatWwMwffp07OzsCAgIQKPRqMkIY9BoNGg0Gg4cOMDx48fx8/Pj+PHj\nFBQU0LJlS0xMTNBoNOj1enbv3k1+fj4vvvgiQI3Yb5UrA+/fv4+iKJSUlKDX6/H39ycnJ4cTJ05w\n69YtmjdvjlarRavV0rRpUzp27KiukvY8nLfijyRpJIQQNYjhQS4/P5/4+Hj69u3LxIkT8fLyIjU1\nlW3bttG6dWtq164NgKenJ3Z2dvTr169GvEUToqpJT0/nlVdeISkpibt371JQUICPjw+enp4kJyeT\nkJBA7969sbS0pH79+nTo0IEBAwbQtWtXXnrpJXQ6XY3vHVG5h9H27dsxMzPDxsaGa9eu8fPPP7Ni\nxQrGjRunTp148OABK1aswN7enqCgIGOG/r/23wZb7dq14/bt25w6dQpFUdQpIQB2dnb4+PjQs2dP\ndanrqnYcbNmyBRcXF6Kjo0lLS2Pv3r188skn7N69m4KCAsLDwxkwYABt2rRh+PDh6vFcEwbh/1u3\nbt1izJgxWFlZERAQYOxwngpD8mXUqFHqtK7U1FT2799PUVERTZs2pXnz5piZmTFlyhScnJxo0qSJ\nscPm/PnzjBgxgq5du9K4cWNu3rzJzz//jJWVFV5eXupxuX//fmxtbWndurWabKrOKieMFixYwMKF\nC1myZAm//fYb9erVo0GDBgQEBJCZmcnx48fJzMwkNDRUTfIZeunV5BcX4v9NkkZCCFGDaDQazp07\nx8svv0xRURH9+vXD0dERT09P7O3t1Skxbdq0USuOPDw81CSSEOLpsra2Ji0tjVu3btGnTx+mT59O\nVlaW+vZ27dq1XLlyhS5dugCPG2BbWlpSq1YttUlwTR1gp6amYmtrq27n6dOnmTBhAq+++irW1tbo\n9XoWLlyIp6cnr7zyCra2tmRlZfHxxx/z8OFDvvzyy2oxiKk8YDt8+DDHjh0jJycHeLz8fPv27bl4\n8SKHDh2ioqICb29vdYU0S0vLKjlgq6ioQFEUdu/ezbVr18jIyGDJkiVkZ2fj5eVF/fr12b59O+3b\nt6d27drY2NjU+OP5vzE1NeXs2bPcvXuXzp07Gzucv0xRFAoLC/nmm2/o0qULY8eOJTAwkD59+nD9\n+nX27t2Lu7s7Hh4e+Pr6YmNjQ3h4uNF7JV6+fJmbN2+qK/tptVq1unPv3r2kpKSQlZXF+vXr2bVr\nF5MmTcLOzq7aJ4zgfyreZs2axcqVKxk5ciRBQUHq4gI+Pj40atSIgIAAsrKy2LZtG5aWlk8kOWvC\n9yD+7yRpJIQQNUxaWhoXL14kJSWFwYMHU69ePQDc3d2pV68ely5dYsWKFXTq1KnGNXUUoqrRarWE\nhYWxefNmfHx8GDNmDLGxsSQnJ5OZmUmbNm04dOgQtWrVwtvb+w8P5jX1QX3u3LnExMTg4+ODk5MT\nGo2G7OxsDh8+rFZYubi44O/vz4YNGzh8+DBLly5l//79PHr0iNjY2Goxba9ysmf69OnMmzePa9eu\nsW/fPi5dukTdunVxdXWlY8eOXLhwgcOHD/Pw4UMCAgIwNTVVf4+xj4PfV0oZqi8MFXPnz5+ne/fu\n9OvXj/79+1NYWMiVK1fo37//E81zjb0df7c/qygzNTXF2dmZWbNmqYPz6spQzazT6YiLi8PT05Pm\nzZtTUlKCTqcjIiKCrVu38uuvv9KjRw/Mzc154YUX1OeQZ+HP9kF+fj4DBgxg06ZNODs7ExUVpf5d\n586dycvLIy0tjaSkJLUfU01ZQdawzxISEli1ahVz5syhXbt2PHjwgGXLllG3bl127dqFv78/7u7u\nNG3aFL1eT3R0dJW+topnS5JGQghRwzg5OeHm5saFCxfYtGkTPXr0UJdodnd3R6/Xq4NVGxsbI0cr\nRM1z5MgR7ty5g4ODA1qtFgsLC7V/WOfOnXnxxRcpLCzk2LFjbNy4kbKyMvLy8mjZsiUWFhbGDv+Z\nyM7O5vr165w4cQIXFxecnZ3Jysri6NGjDB48GHg8+HN3d6dNmza4u7vj6OhIp06dGD9+PCYmJtVi\n2p5h8Lp48WLWrl3LzJkzGTNmDDk5OWzevJm0tDQcHBxo2LAhHTp0ICkpiaKiIrp27VplEiyVK6X2\n7t3LwYMH+eWXX7CwsKBRo0a0b9+eXr16qau9lZSUMHPmTPR6PX369Kky2/EsGLb15MmT1KpVS02Y\n1apVi2vXrnH//n3atm1b5ZOd8D/Jl5KSErRarZoALS8vR6fTsXXrVu7du6dOnzQkjjIyMkhNTaVX\nr17q1KZnGbNWqyUjI4MtW7Zw+PBhioqK8PLyolWrViQnJ3P37l0iIiKwsbFRtzE0NJQXX3yRXr16\n0bNnTxwdHZ9ZzH+Xa9euUbduXfX7z83NpbS0lP79+7N//37GjRvH+PHj6dWrF1u2bCEpKQlPT0+8\nvLwIDAxU93VVP07FsyFJIyGEqMYMb5CuX7/OrVu3yMjIwMnJCWdnZxo3bsyJEydYs2YNXbt2VRNH\nHh4edOjQwSirlwhR0xUUFDB8+HCSkpJITU0lNDQUMzMzrK2t2bt3L3l5ebRp0wZfX186duxIbm4u\nhw8fpk6dOrz00ks1foC9atUqAgMD8fHxwcbGhnPnznH8+HHc3d0pLCzk0KFD9OvXDxMTE3WwYujt\nExYWhqenpzqYqeoJI4N79+6xZs0aoqOj6dSpE4mJiUybNo2+ffty48YNTp06haurK66urnTv3p0O\nHTqog3RjHw+VK6WmTZvG4sWLSU9PJy0tjbi4OEJCQnB2dsbc3Jy8vDx27NjBnDlzyMzMVFd7e96a\n516+fJlBgwZx4cIFzp8/T7NmzdDr9SiKwty5c+nTp0+VnxJuSL6kpqYyefJk4uLi1J6Ier0eADc3\nN2JiYrh79y5t27ZVpx2uX78eMzMzunTp8kwTDoaYL1++zGuvvcavv/7KoUOHWLduHXXr1qVDhw40\na9aM9evXk5KSQkREhPpcZGBubl5triv/Lz/99BMjRoyguLiYVq1aAeDo6Ii/vz8ajYavv/6a7t27\n8+qrr+Li4kJiYiIPHjzg3r17dO3aVb32SMJIGEjSSAghqinDTX3Xrl2MGTOGvXv3smjRIlJSUqhd\nuzYtWrTAx8eHEydOsG7dOqKiotSVmypPexBCPB2KomBmZkafPn0oKCggKSmJZcuW4eLiQlBQEPXr\n1+fTTz8lPDwcV1dXzMzMiIiIoHnz5rz99ttVJlHwd9m4cSP79u1TV2p0d3fHysqK8+fPk5ycTE5O\nDhkZGWRnZ3Pu3DlOnTrF8ePHSUhIwMLCAhcXF/V3VafBjKHJeVBQENevX2fChAn885//5N133yUv\nL4/t27dz9uxZ/Pz81Kl6lat7jMlwLC5btozVq1czZ84c3nnnHR49esSWLVvYvn074eHh1K9fn7y8\nPGJjY7G0tGThwoVVcrW3v8Pvk2J2dnZERUWh0+nYs2cPsbGxpKWlERISws2bN7lx4watWrWqEvv3\nz1ROvgwdOhQfHx+1J+KmTZvo168fZmZm1KtXDwcHB3744QeOHTvGhQsX2LFjB7t372bq1Kk4ODgY\nJebBgwfTv39/vv76azp16kRFRQULFy4kIiKCpk2b0rJlS5YuXUpycjIRERFYWlo+sziflR07dnDq\n1Cn1utq2bVsALCwsyM7OZsGCBfTs2RNvb2/u3bvHiRMneP311/nXv/5VIxp/i6dPkkZCCFFNaTQa\nkpOTee+99/jggw9444036N27t9rQ0d7enrCwMNzd3dm/fz979uyhX79+8kAgxN+g8iDf0tKS0NBQ\nwsPDSU9PZ8mSJVy4cIHw8HAaNmxIfHw8LVu2VN9yu7i4PBdTARwdHdUqosOHD9OwYUM8PT2xtLQk\nJSWFEydOkJWVhbOzM8nJyaSlpXH37l3y8/MZMWJEtfhu/qyqRqPR4OjoiLW1NevXr6e0tJRx48Zh\nYmLClStXKCwsJCIigp49e6qfrUrX6Pv377N27VqGDBlCZGQk+/fv54svvuCf//wniqKwaNEiWrVq\nhbu7O+Hh4fTo0aPKrvb2tFU+7y9dukRubi7l5eU0bNiQgIAAhg4dSnl5Oenp6XzzzTdkZ2eTn59P\nnz59MDU1rZJJYo1Gw9WrVxk0aBCvv/46H374IRERERQVFbFr1y4CAwPx8PBAp9PRqFEj2rZty+nT\np7l//z5arZapU6fi6+v7zGPOysoiOjqa1q1b89VXX2Fubo6dnR2mpqYkJCTQtWtXXFxcsLOzo1Wr\nVqxatYp9+/bRqVOnGpc4Kisr48aNGwwbNozY2Fhu3bpFZGQkAMXFxZw+fZorV64Aj/vL5efnM2bM\nGLRa7XNXGSj+dyRpJIQQ1cDvb+KGP2/dupVHjx7x6aefYmtri6OjI82aNWPHjh389ttvdO/eHUdH\nR5o0aUK/fv2oU6eOPAwI8ZRVHjiuWrWKX375BTc3N5ycnOjSpQu2trZcvXqV77//nsLCQvLy8nBw\ncMDb2/uJ31MdkiL/VyUlJej1erRaLSdPnuS9997j3r17tGnTBk9PT6ytrcnKysLOzo733nuPN954\ng/79+9OrVy9efPHFapFUq3wcbN68mYMHD7J161bs7e2xsrLC3NycpKQkLl26pK4mFRMTQ+vWrRk5\ncmSV3UZLS0scHR3x8PAgMzOT8ePHM2rUKF5//XWKiorYuXMna9eupVOnTri4uFTJ1d7+Lob76YwZ\nM/jmm2/Ytm0b8fHxhIaGqpU2wcHBREVF0axZMywtLTl58iQajYawsLAqeT/Ozc1lzJgxlJaWMm/e\nPODxtWnPnj2cPXuW4OBg9Xi2tramfv36aj+gDh06PNMKo8quXr1Kamoq9+/fx8PDA2dnZwBycnLY\ntGkTffv2xcnJCXhcDRYaGsrWrVvp3r17tV8UxJB8NFw/3Nzc2LRpExUVFbz55pvMmTOH7Oxs2rVr\nh5WVFYqicOnSJRISErCxsWHhwoWYmJhUmQpHUfVI0kgIIaoBjUbDrVu3OHDgAG5ubur0soMHD5Ka\nmkp0dDTw+O2SnZ0d7u7uzJgxg06dOmFvb4+Tk1OV76EgRHVlGPhNmzaNFStW8MILL+Dh4aG+vW7a\ntClBQUE0atSI+Ph4bt68qS61/jw4cuQI06dPJzw8HEtLS7Rarfr2Pz09nTZt2uDh4YG5uTkXLlwg\nKSkJOzs7GjZsCDweEEHVTqpVTpJMnTqVJUuWYGtry/Xr11m9ejUVFRWEhoaSl5fHsWPH2LJlC7Gx\nseTk5PCf//wHnU5XZRItf1b94ujoiI2NDXv27CEnJ4cPPvgAU1NTbt++jU6nUxMGhvirYjLkaar8\nHZ04cYLvvvuOadOmERYWRk5ODjNnziQsLAxnZ2f1JU+DBg0ICQmhoqKClJQUOnXqhE6nq3LfVUVF\nBfn5+WRkZHD69Gk6derE0qVL+fHHH+nSpQvp6els2bKF+fPnk52dTVpaGp6enpiZmT3zxtfwP/vC\nsAjIxYsX2bp1K82bN8fKyopBgwbRv39/BgwY8MTnHBwcGDhwIHXq1Hmm8f4dUlNTqVu3LvA/556D\ngwNHjx6lR48e+Pv7891335GdnU1kZCR+fn506NCBXr16MXjwYHVhgZo+lVT830nSSAghqonJkyez\nfv166tWrh4eHh3qTX7RoEV5eXnh7e6s3/Hv37nH8+HH69+8vK6TVMP+tdLwqTnN4nixfvpyVK1ey\nePFiOnTogKWlJWVlZRQVFWFqaoqNjQ1NmzalU6dO2NjYMHbs2CqRIHgW9u3bx9GjR7lw4QJhYWHY\n29vj5uZGeXk5O3fuJCMj44mKo0OHDlFaWkpERARAtZhSa4hv165dLF68mAULFhAdHY2joyMrV65k\nyJAheHl54enpiZOTE66urnh4eDB9+nRMTEyqRIXR1atXKS8vVxsd/5mjR4+yfft2evXqhYWFBTNn\nzsTZ2Zl3330XrVZLWVmZ0bfjWTDs79WrV3P79m2Cg4Pp2bMnXl5ehIaGkpGRwZw5cwgLC8PFxUXd\nv2ZmZhQVFbF27Vr69Omj9hk0JsO9Q1EUKioqMDMzIyAgAI1Gw759+4iNjWX//v0sWrSIl19+me7d\nu9OtWzd0Oh3Xrl1jw4YNDBw4EGtr62d2nlZe2c0wBfLChQv4+Pjg5uZGamoqsbGxfPfdd/Tt25cP\nP/zwic8Z1IQkyfbt23n55ZdJTU3l5s2buLq6otfrsbCwIDY2Fnt7e/r164erqyvz5s3j7t27tGvX\nDnNzc/R6vdpDrSZ8F+LvI0kjIYSoJiIjIzl79iz79+9Xlzr29PTk4cOHzJ49Gzc3N3UgtmbNGn79\n9VeGDBlS4+bqP88ql47fvHmTmzdvYmFhgUajUUvLq/rguiZSFIWNGzcSEhJCz549SUtL48CBA3z6\n6accP36c/Px8mjZtSkVFBXXr1qVFixbP1QA7ICAARVE4efIkp06dokWLFmolUUVFBTt37iQzM5PW\nrVvj4eGBh4cHgwYNqhbHclJSEvfv31eX6D527BgVFRUMGzaMLVu2MH78eD766CP69u1Lfn4+WVlZ\nBAUFERwcTFhY2BNLmBvTL7/8wqhRo3j48CG+vr5YW1v/aSLa0tKSK1euMGfOHLZt28bDhw/59ttv\n1Sbuxt6OZ+n27dtMnz6djRs3EhgYSIsWLaioqECv1/PCCy+QkZHBd999R1BQkFo1B4+TqGfOnOGl\nl16qEvdnjUbDvXv30Ol0mJqakpiYyNWrV3nxxRdRFIVz587h5uamNkkuLy/HwsKCkJAQoqKiGDp0\nKLa2ts885oyMDEaOHEmXLl3Yt28fb7/9NhEREQQHB2NnZ8eNGzfIysri7bffxsXFpUZOvSopKVGb\nXut0OqytrZk0aRJmZmZqa4JFixbRsWNHgoODcXNzY/r06ej1eoKDg9XfUx2utcK4JGkkhBDVQFlZ\nGSYmJnTu3JkzZ86QmJiIlZUV3t7eBAUFUVJSwpQpU9i9ezebN2/m6NGjzJs374kHVVG9VZ66MmvW\nLObPn8/KlSs5duwYKSkphISEYGFhYeQonz+GgXVcXBwpKSmYmJgwf/580tLS8PDwIDc3l0uXLtGx\nY0fMzc2feDivaQOYP2NIiAQGBqLRaNi0aROpqamEhoZib29Pw4YNURSF3bt3c+XKFdq3b6/2xanK\nSdCKigoKCgoYMmQIvr6++Pv7A7Blyxby8/NxcXFh9OjRjB07lpdeegmA+Ph4jh49SlBQ0BMrWFaF\n46BevXpkZWXx888/k5ubi5eX158mjuzt7fH29iYwMBAvLy8mT55cZSqlnjW9Xo+7uztZWVkcPHhQ\n7Y2jKArW1tY0a9aMixcvcvz4cfr06YOiKBQUFLBz504mTJhQZe7P+fn5vPjii9y/f5/79+/z/vvv\n061bN3x9fdUK5uTkZM6cOUOnTp3QarWUlJSg0+nU6iljKC0tZfPmzSxbtoz169fz9ddfq82eDQ2v\ns7Oz2bp1Kz4+Pri4uNSoilxFUTAxMcHb2xsrKyt27NjBqFGjiIiI4MSJE8ybN4/ffvuNtLQ0mjdv\nTsOGDXF3dyc0NJTu3bs/d+er+GskaSSEEFWM4aGmqKgIExOTJ0rHDeXg27ZtIz09HSsrKwICAmjX\nrh3Nmzenfv36NGvWjDFjxuDl5WXsTRFPkeFBd8GCBaxatYqvvvqKzz//nMOHD7N//35atWqlNvkU\nf58/a0qv1Wpp1aoVCQkJ/Pzzz3Tt2pUBAwYQHR2trnLYu3dvzM3NjRj5s/PLL7+g1WrVKgrD9zV/\n/nwyMzMpKSnhzJkzNG/eXE0c5ebmcv/+fTp37lwlVxD7M2ZmZpw6dYq6desSEhICPE6+LFiwgOXL\nlzNp0iQGDRoEPF6xaO7cuZiYmBAVFVVltk1RFPUe06pVKzIzM0lMTCQvL+9PE0e5ubkcOXKEHj16\nEBISUmUqpf5uvz/vDUkyZ2dnGjRowIULF4iLiyMqKuqJxFHbtm2fqJozMzOjdevW1K9f31ib8gdm\nZmY0btyY//znP+zdu5eJEyfSu3dvdaqat7c3Go2GgwcPkpKSQocOHarEqniWlpZYWFiwadMmHBwc\nGDNmDHq9Xj1eDYmjGzdusHLlSoKDg2vMPbLyOXnu3Dn8/f0xMTFh6tSpDBw4kFdffZUWLVpw4cIF\nysvL6dOnD/Xq1UOn09GwYcPnqtJVPB2SNBJCiCpGo9GQnZ1Nz5498fb2xs3NTe3pERMTw/Lly5kz\nZw63b99m//79WFpa0qhRI9zd3QkODqZp06bSx6gGUhSFR48esXDhQl577TWioqL4+eefmT9/PhMm\nTKBTp06UlJRIb4K/UeXpDevWrWPdunVs3bqVnJwcwsLC6N+/Py+++CJt2rTBwcGBsrIyZsyYQb16\n9Z5YTr2mqqioID09nW7duqHRaNRpTgDvvPMOaWlpLF68GBsbG06cOMHp06fVxFHjxo3p3bu3miCv\nqt+VoSm3Ib5Tp05x5swZ+vTpg0ajwcLCgqKiIjIzM9UVxy5dusSkSZPIyspi3rx5atNrY2+j4XjW\naDRkZmZSq1YtWrZsyZ07d9TEkaenp9rj6O7du7z++uvqcuyG+Gv6wPP35/2aNWtITEykuLgYHx8f\nnJ2dadSoEefOnSM2NpaoqCg1eWFpaalWzRl+R1X7vioqKigvL2f58uUoioKHhwehoaHqSytD4kin\n07F582bS0tLUih5jqHzumJqa4ufnR0ZGBrGxsbRq1Yq6deuqST4XFxfs7e25e/cuHTp0qBHPRpWP\npenTp7N48WL69OlDmzZtePToEf/5z3/w9vYmPDycdu3aqavG/T7xWdWOQ1G1SdJICCGqoOLiYi5d\nusSCBQsIDg7G1dWVH374gSVLljBlyhTatWtHp06dOHbsGIcPH0aj0eDn5yfJghpMo9FQVlZGbGws\nr776KqdPn+a9995j/PjxREdHU1JSQnx8PCUlJepSw+LpMjxwT506lVWrVuHl5YWrqytTpkyhuLiY\n0NBQ9Ho9+fn57Nq1i9mzZ5OZmcmPP/5YZRIFfyeNRoONjQ22trZ89913WFlZERwczPvvv8/169f5\n/vvvadiwIU2aNKGsrIzk5GT27dtH+/btqVOnTpVPGMEfm3Ln5ORw8uRJBg8eDIC5uTkNGzbEzMyM\nuLg4VqxYQXJyMtbW1ixfvhxTU9MqMZWr8sBzwYIFbNu2DQcHBxwdHQkPDyc7O5u9e/eSn5+Pj48P\nAG+99Rb5+fmsXbv2iSrYmq7y6ogrV67E2dkZS0tLpk+fjo2NDUFBQTg7O+Pm5sb58+eZM2cOAwYM\nwMrK6g+/oyrSaDTY2toSFRVFZGQkkydPJi8vjxYtWjyROPLz88PW1paePXsaLfliOOaOHj3Kzp07\n8ff3p0WLFkRGRrJ37142bNhAmzZt1JXE9u/fT7NmzYiKilJ/Vt0ZjqW7d++yc+dO/vWvf+Hv74+l\npSXBwcEUFBQwbdo0fHx88PPzw8zMrMqszCiqL0kaCSFEFWRpaUl4eDi3b99m9uzZ3Lhxg/j4eDVh\nVFZWhqmpKZ07d2b37t1cvnyZbt26PTfTX54Hf9bPRVEUVq9ezeHDh4mLi2P8+PHqYDUrK4v58+fj\n6uqKr6+vMUKusSoPjo8cOcKCBQuYNWsW0dHRlJWVER8fT//+/dW+Nnfu3GHz5s0oisLixYsxNTWt\n8csZVz5eAwMDqVOnDtOmTVN7/Pz444+4uLio30PTpk3Jzc1FUZRqMyVt7969jBo1iosXL3Lr1i0K\nCgqoX78+69ato127duqgtHbt2gQHBxMdHU3Lli0ZOHAgQ4cOVVe8rApTewzf85QpU4iLi+O1116j\nUaNG1K5dG4Dw8HCysrJITEzkzp07fP/99+Tm5vLTTz89F8fz723cuJHY2FjmzJnDP/7xD0pLS9m+\nfTuHDh0CoHnz5jg7O+Pk5IROp6Nz585VepBuuKZlZmaSnp5OvXr1sLe3x93dHXd3d2bOnElBQQFh\nYWGYmJiwYsUK7ty5Q69evYyeMNq1axfvv/8+gYGBuLm5UbduXaysrOjYsSN79uxhw4YNODs7s27d\nOr799lt69er1zBt1/x0qX2M3btzIG2+8QVlZGf369VOvPRYWFgQFBVFYWMjMmTNxd3dXpxcK8Zco\nQgghqpSKigr1/7Ozs5XPP/9c8fX1VRYsWKAoiqKUl5criqIopaWl6n8zMzOffaDib2PYx4qiKDdu\n3FByc3OVgoICRVEU5dChQ0rr1q2VYcOGKYqiKCUlJUpeXp4ycuRIZejQoUpZWZlRYq6Jpk2b9oef\nxcfHKyNGjFAURVF27typBAcHK3FxcYqiKMrDhw+VlJQURVEU5cGDB+q5/DztkyVLlqjXow0bNii+\nvr7KpEmTlLy8PPXfGL6PiooK9TuqfMxXRRUVFcqePXuUb775Rvnss8+ULl26KBEREUqHDh0UX19f\nZdOmTU/8+z/bnqq2jTt37lQiIyOVCxcuqD/Lz89XkpOT1T/PmjVLady4sdK3b1+lpKREUZT/ufc8\nL4qKipS5c+cqK1euVBRFURITE5WQkBBl5cqVyoIFCxRfX19l6dKlf/hcVT/vd+3apURGRiqtW7dW\nevTooSQkJCiPHj1SFEVRtm/frjRt2lR58803lbFjxyqBgYHK5cuXjRyxopw8eVJp3ry5smHDhid+\nnpOToyiKojx69EgZOnSo0rFjR6Vz587K+fPnjRHmU1f5ufDIkSPK/8feeQZUca1t+9pU6SBVei+C\ngILYQECJJQoaiRpLqhpT9EuO5iSedI8aNSIxsZeAgiWCGixgRJBii4AFEImoWFFRsBekre+H754D\nxvOWE5UtzvUnsvfsybPKrFlzz1POnTsnRo8eLTw9PcW+ffv+dPyNGzfE3//+dzFy5MhnaaZMK0b2\nNJKRkZFREcR/vUWrrUKGa24AACAASURBVK2loaEBDQ0NdHV18fLy4u7duyQkJODv7y+VqVZXV5eO\nU+ackGkdKN8K/vDDD8ybN4+EhATu3LmDubk5/v7+aGpqkpyczO7du/ntt9/YvHkz169fZ+3atS9s\nJaMnTUlJCRs3biQqKqpZX546dYrDhw8jhODbb7/l008/ZcSIEQDs27ePVatWERAQgJmZmRRu9aKM\nxb179/jqq6+4fPkyYWFheHl5YWlpyY8//oiamhoeHh7o6OigpqbWLJ+OqveR8npydnYmODiY8PBw\nXnnlFUaNGoWvry9mZmbExsZibW2Np6cn8HiPKVV725+fn8/Zs2f58MMPKS8vJzk5mW+++YakpCRK\nSkro378/Xbt2xdbWli+++ELyMFIFT6mniXgk7E5DQwM7OztsbGy4d+8eU6ZM4e233+aNN95AQ0OD\nlJQUcnNzsbCwwNvbW/qdKs5pZdtOnDjB559/zqhRo3jrrbcoKytj27ZtGBsb4+DgQPv27QkMDGTf\nvn1SgmXl3G5Jdu7cyf3795kyZQo1NTXs3r2buXPnkpKSwpUrV+jWrRtDhgyhW7duvPHGGypToe6v\n0HQ+/vjjj8THxzNgwAD69+/PgQMHyMnJISQkpJkHWJs2bejWrZtUjEFG5q8ii0YyMjIyKoJCoWDX\nrl1MmzaNtLQ0rly5QkBAAPr6+vj7+3P16lViY2Pp2LEjdnZ2Kv+gJfPXSE9PJy4ujilTpqCnp0dB\nQQFFRUW4ubkRHh5O7969qaysxNramo4dOzJt2rQX5qHuWWBhYcErr7yCuro6aWlpuLm5AXD//n3S\n09P59ddfef/993n77bcBqKmpYe7cuRgaGkpJkUH1hIKnibq6OteuXaOkpIQ+ffqgpaWFt7c3FhYW\nzJkzB21tbdzc3KTkwEpUuY+arrM7d+7ExcUFeGizjo4Otra2dO/enXv37hEbG6uy4aGPCiEA58+f\nZ+/eveTm5pKYmEibNm3o1asXw4cPZ968eQQGBmJra4unp6dUbam1ry1Ncz3du3cPTU1NGhsbMTQ0\nxNjYmKNHj7Jv3z7+/ve/o6ury61bt6irq2PChAn069dP5e/JCoWCoqIiysrKMDExYcKECVhbWxMZ\nGUlhYSFpaWkYGxtjb2+Pk5MT/fr1o2/fvlhZWbWo3cr5m5+fz6FDh1BXV2fhwoUcO3YMADc3N9av\nX0/nzp2xtLTE1NRUqt74vKO8bo8fP87WrVuZNGkS7du3R19fn7CwMLZu3cqOHTvo0aNHM+FIS0tL\nSsKuymuszPOBLBrJyMjIqAiHDh3io48+okuXLujp6ZGYmEhFRQWhoaHo6enRqVMnqqurmTlzJl27\ndsXGxqalTZZ5gjy6sTt+/Dh2dnYMHTqU4OBg2rRpQ0FBAYcPH8bR0ZH27dsTFhZGjx498PX1lUpf\nt/aHumeJQqGgoqKC0aNHU1RURGRkJJaWlty9e5eSkhLMzc0BOHv2LDNnzuTy5cssW7bshUh6/bgH\nEYVCgZOTEz/++COGhob4+fkB4O3tjaWlJd9//z0ODg7NvDFUmaYCQnl5OaNHj+b69euEhoairq7e\nrGR19+7defDgAbNmzcLPzw8HB4eWNL0Zjwoht2/fRkdHB3t7e3R1damuriY6OlpaawAKCwsZOHAg\npqam0nlUXRD5qzQVCJctW0ZcXBwbN27kwoULODo6oq+vz4ULF4iLi8PHxwc9PT1mzpxJfX09H3zw\nwXNTxnzs2LEkJSVhZGRE//79JXv79u3L4cOH2blzJ9ra2jg7O6Orq6sS9xTlWmNvb8+BAwfYv38/\nTk5OjBgxgnfffRdTU1MOHDjAoEGDMDY2bmFrnzyJiYnEx8dTW1vLqFGj0NHRobGxEQMDA3r16sWW\nLVtIT0+na9euf2p/a74PyTw7ZNFIRkZGpgVp+mBZXl6OnZ0dkydPJiwsDB8fH+bPn8/58+cJDw9H\nT09PSnDYpUuXVlMJRKb5w0pycjLp6ekUFhbSrl07OnbsCIC7uzva2tocOnSIo0ePYm1tLb39Vc4j\nVX9YeR7R09MjMDCQdevWceDAASIjI+nUqRPwMIRt+fLlXLhwAUNDQ+Lj41WmOtbTpOl8zc7O5ubN\nm9JcVFaPy8/PJyQkBC0tLdTU1PD29sbLy6vZQ6oq07SNK1euJCsri0uXLpGXl8eVK1cIDw//k0jQ\nrVs3TE1N6du3r8q0sWk7Fi1aRFxcHHPnzuX8+fMIIYiKiiIiIgIvLy90dHS4e/cu33zzDUIIxowZ\n88I8cDYV1pYvX87SpUvp378/9+/f59ixY/zyyy+Ehobi7e3N9evXiYmJISsri9ra2mbVEZ+H5OBD\nhw6loKCA0tJS/P39sbKyaiYc5ebmUlBQwODBg1usuIbynlZaWsrevXspLy+nsbERe3t7IiIi6Nev\nH1FRUdLLszVr1nD69GmGDRvWrGrd88qjovy1a9fYsGEDFy9eJCgoCHt7eym0VykcxcXFcfXqVSIi\nIlrQcpnWikIIIVraCBkZGZkXEeWmqLi4mMrKSrZt24abmxsffvihdExOTg4ff/wxAwYM4Ntvv0VD\nQ6PZ5lbm+afpeMbGxrJmzRrc3NwoKyvD2NiYBQsW0L59e+n4tLQ0Fi5cSK9evZg8eXJLmd0qefTa\nUv5dX19PQUEBkyZNwsfHh2XLlgFw584dqqqqaNu2LQYGBigUilYfwtO0j/bt28eHH36Iu7s7enp6\nfPrpp9ja2nLx4kVGjhzJkiVLCAwM/FOfPE99tGDBAhITE5kxYwbq6urk5+fzyy+/0LdvX2bOnAk8\nvj2q1sZ58+axfv16vvzyS0xMTJgzZw719fUsXLgQe3t77t+/T1paGtu2bePmzZusX79eCs16ke43\nJ0+eZOHChQwePJjQ0FDgoRfwwoULuX79OitXrsTAwIDi4mLu3r1LUFCQ5HWmSuOtRLnPuHv3Lhoa\nGjx48ABDQ0Pq6uqIjo6mvr6e7777Dj8/v2YiRWVlJZaWli1qc3p6OtOnT6dt27a0adOGqqoqZs6c\nSefOnaVjc3Jy2L9/Pxs2bCAxMREvL68WsflpUVhYiKurqxSiPmnSJPz8/Pjggw+ktir769q1axgZ\nGT0XwqXM84fsaSQjIyPTQigUCjIyMhg7dixlZWVSnH737t3R09MDwNHREW9vb2bPns2NGzcIDQ19\nYd78vig09TQrKChgypQpfPjhh7i4uHD27Fn27t2Lp6cnZmZmwMPcDc7OzkRHR7eahzlVCOV61LNk\n/fr1pKam4uHhgampKba2tnh7e5OYmEh+fj4DBw5ES0sLY2NjtLW1pbe+rXnD3rSPZs6cSVFREV9/\n/TWBgYEcPHiQX3/9lczMTDw9Pbly5QoHDx7kpZde+pO3wvMyb2/evMmyZcsYPXo0gwcPxsnJiQ4d\nOmBpacmKFSuoqqoiNDRUCg1t2i5VauPp06dZunQp06dPp1evXlRWVrJy5Uo+/vhjunXrRmNjIwBH\njhzBwMCAmJgYKT9aa57Pj5KSksLnn39OVVUVgwcPlkQTS0tLzM3Nyc3NxdnZGUdHRywtLbGzs1Pp\nsGDlupqdnc1PP/3EihUrKC4u5s6dO/j4+PDqq6+yadMmduzYQYcOHbCwsJDW4ZYsrqFQKDhw4ACf\nfvopEydOZMaMGdjY2JCYmEhqaiq+vr7Y29tz584dEhISOH36NPPmzVOJRN1PkuzsbL788kuEEHh5\neeHg4IC7uztr166lsrISe3v7ZgUXdHV1H7sWycg8CWTRSEZGRuYZ0/StUGxsLO+99x7jx48nKCiI\nlStXUlVVRWBgIG3atAHAwcGBgIAAunXrJoektVK2b9/O5MmTuX37NiNGjEBPTw9nZ2f09PQ4evQo\ne/bsaSYcNX1Yed43h009GWpra5slkH5WCTyb2qCsTmNjY8Pp06f5+eef8fDwwNHRURKOVq9ezc6d\nO3n11Vebnaelha+njbJ958+fJzExkbFjx9KxY0dsbW0ZNGiQlKA/JiaGGzduUFFRQUREBKamps9t\nMtbly5djZmYm5frR1tbG0dFRSkpbXV1NWFgYampqKiF+Po5bt26xbds2Pv30U3bs2MFHH33ElClT\nGDZsGDU1NaSnp2NlZUVAQAA9evRQaSHkaWJvb8/vv/9OSUkJNjY2+Pr6oq6ujkKhwMrKivj4eCws\nLJp5uoBqCYRNURbX+Oijj4iKiiI8PJxLly6xYMECevbsibW1NdHR0aSkpJCUlESXLl1azLuoKTU1\nNSQkJBAQEMC4ceOorKzk/fffJzw8HDs7O+bPn09QUBCOjo4EBQXx0ksvYWtr29JmP3HatWvH8ePH\nOXjwIDU1NXh4eODi4oKbmxurV6/mypUrWFlZYWlp2WzdUdX5KPN8I4tGMjIyMs8YhULBnj17WLp0\nKQqFgtGjR9OuXTucnJzw8/Nj3rx5VFZWNhOO7OzsZMGoFXP27FkuXbpEaWkpkZGRUvJZFxcX9PX1\nKSkpYfPmzXTv3r1ZksvnfXPYVKyJj49n3bp1xMfHc/HiRczNzZsl4X2aKDfcN27cYO/evXzyySe8\n8cYbDBkyhHPnzrFgwQI8PT0l4cjV1ZWysjIGDBigkiLB02Tp0qX88ssvGBoaMmLECLS0tKS8Pg4O\nDnTr1o3w8HCcnJwoLCyksrKSl156SeX76d+JWhcvXqS8vBxXV1cp8bmWlhbl5eUYGhpSUFDA/fv3\nCQwMVIk2Pk64qqysZO3atdTV1TF37lwmTZrEyJEjASgtLWX16tW4uLg0K67wvK8t/xOPG29NTU36\n9u1LYWEhhw8fxtTUFHd3d+ChkLF161Y6deqEr69vS5j8f+bOnTvExMQwdOhQxo4di6mpKTExMURG\nRjJ8+HAaGxvR0NBgyJAhZGdnM2DAgGbVt1oKDQ0NTE1Nsba2xsjIiHHjxhEQEMDMmTPR19dn8+bN\nbNq0iY4dO+Lq6toqqqQ9bj5qaGgQGhpKYWEh+/fvp7a2Fk9PT0k4io2NxdzcnKCgoBayWuZFQhaN\nZGRkZFqAyspKvv/+e86dO0efPn2kJLJ2dnb4+fmxYMECTp48Sffu3SXhSKZ18LjNobOzMxYWFpw8\neZK0tDQCAwMlwcTZ2Rl1dXU0NTVbnUihbEtMTAyJiYkMHToUGxsb0tLSyMrKYsCAAWhpaT0TW1JS\nUhg5ciS1tbUMGDCAtm3boq6uTu/evTl79iyLFi2ShCMHBwciIyNfyHLGFy5cYNWqVdy+fZsBAwZg\naGj4Jy8bU1NT2rdvj6WlJenp6YSEhGBoaNjClv97moqXJ06c4Nq1axgYGKCpqYmGhgYpKSlUV1dj\nbm4uVc/75Zdf6N69O0ZGRhQVFREREdFiSYMf1447d+5I146ZmRmXLl1i+fLlvPHGG7z33nvAQyHk\nn//8J42NjYwbN+6FmcdNwyw3b97M9u3buXv3LpqampiamtKnTx8yMzP57bffKC0tpaKiQvIC/u67\n71RWUFOmqVWO44MHD1i+fDmjR49GTU2N6OhoevbsydSpU4GHHq61tbVYWVkRHR39TAWj/8krz8LC\nAhsbGw4ePEheXh7/+Mc/MDIykvLIhYWFERQU1Gpepin74tdff6WiogInJycUCgXq6ur07NmT4uJi\nMjIyUFNTw8PDA2dnZ0JCQnj55ZdVdj7KtC5k0UhGRkamBbCxsSEkJISUlBRu3ryJn58fBgYGwEPh\nyMvLizVr1hAdHS3lN5J5/mn6ULd//37Kyso4ceIEzs7O2NvbY2dnx7Fjx0hNTaVTp06ScOTu7k5I\nSAgKhaJVhKQ1pbi4mJ9//pnY2Fh69+7N3bt3SUpK4oMPPsDf3/+ZhfxoaWlRUVHBkSNHiIqKwtLS\nUurriIgIzp8/z/fff0/37t1p166d9LvW/KD9uL739PTE3d2dX3/9lbq6Orp27YqGhsZj+0GhULBu\n3Tr69+//zLzG/hOUts+dO5fvvvuOLVu2kJKSQteuXfH19cXW1paUlBSys7PZvHkzycnJXLt2jVmz\nZnHu3Dny8vIYOnToMxM4/6d2LFu2jCVLlpCdnY2GhgaOjo64urpy6dIlUlJSqKurIycnh1WrVnH5\n8mUSExOlIguteT4rUbZx3rx5LF68mJs3b7Jt2zYuXbqEhYUFdnZ29O/fn99//52dO3eiq6uLj48P\n8+bNU+mwYIVCIeVKPHfuHObm5uzfvx8DAwO+/PJLQkJCmDp1KgqFgqtXr7J+/XoMDQ1xdXWVfv8s\naBqif+PGDWnv8zhKSkpISEhgyJAhmJmZsWbNGm7evMnnn3+uEqF0f5Xbt29z+/ZtdHV1qamp4ZNP\nPqG4uJh27dpJFdLU1dWJiIhg48aNFBUVcfv2bfz9/bGxsVHp+SjTupBFIxkZGZmnjHKDdOnSJc6f\nP099fT3wMH9Cx44dmTdvHlVVVXTo0EHaPDk4ODBixIhmoUgyzz/KTfns2bNZsGAB+fn5bNy4kb17\n92JtbU3Xrl2xsLDg2LFjbN++nQ4dOkh5jJQ875vDRze45eXlZGdn88knn5Cens4nn3zCp59+yvDh\nw7l//z47d+6kXbt2T/SB/HEPx0ZGRnTo0IHS0lKSkpJ46aWXMDIyko7t1asXmpqaz03J+L9KU4Gz\nurqaW7duSclxlSLnvHnzqKmpoXPnzo9NmJyZmUlGRgZjxoxp0cS6/46m8yA3N5clS5YwY8YMevbs\nyZkzZ1i6dKmUT65Tp07Y29tTW1tLQEAAs2bNQl1dnaSkJHR1denXr59K5ABavXo1y5Yto3///hw5\ncoTDhw9z48YNwsLCCA0NRVNTk9zcXGpra3F1deWnn356YZJeK8dbCMGdO3dISkpi6tSpTJw4ETMz\nM/bv38+xY8ewsbHB1taWPn36cOTIEe7evUt4eDguLi7Av8QZVUK5zzh+/DhvvPEGXbp0ITAwkOPH\nj/PTTz8REBDAnDlzpDFeunQp+/bt491338XIyOiZtkehUHDz5k0mTJhAWVkZnp6e/9YTUVdXlzNn\nzrBgwQJyc3PJyMhg9uzZWFtbPzN7nxY7duxgyZIlxMXF4eXlhZ2dHQMGDGD79u3k5+dLAqZyHT5y\n5Ajnzp3DwsKCXr16SWP2ItyPZFoeWTSSkZGReYo0LR3797//nV9//ZVt27axd+9eOnTogK+vL506\ndSI2NpYbN27g5eUlbZ40NTVb2HqZp0FycjLx8fGsWLGCN998kxEjRpCWlkZeXh4eHh4EBARgbGzM\n77//TkVFBb17925pk58YTcNC8vPzsbGx4dy5cxw6dAhtbW2+/vprPvnkEynfypEjR/jtt9/w8PB4\nYmEITcWQo0ePUllZyc2bNzEzM8PY2JjOnTvz+++/k5iYSEREBEZGRpLQFRgYiJqampTDp7XStI8W\nLVrEjz/+SEJCApmZmbi6umJiYiJV85k7dy41NTUEBgY2E01qa2spLi7m448/xsHBoaWa8t+ifOja\nuHEjDx48wNfXl8jISJydnenduzfFxcWsWLGCwMBAfHx88PT0JDw8nICAAM6cOUNcXBxbtmxh1qxZ\nUojxs+ZRAXTXrl1ER0czcuRIBg0axMmTJ9m3bx/Xr18nKCiIrl278vLLLzNkyBCCg4NfmKTXTef0\nhQsXqKurIy8vj4EDB6Kjo4OHhwc6Ojrk5eVRWlraTDjatm0b+/fvR19fXwoXVjUUCgVFRUVcunQJ\nV1dX3nrrLQCCg4OpqKiQhMKCggK2bNnCr7/+ytKlS3F2dm4Re9u0acOlS5fIz8/nypUrODs7P1Y4\nMjAwwNnZGWdnZ4yNjfn6669xc3NrAYufLBs2bGDmzJkMHz6cl19+mS5dutDY2Iiuri69evViy5Yt\nHDx4EAsLC2xtbVFTUyMzM5P33nuPUaNGqXTifZlWipCRkZGReark5eUJX19fsWrVKlFaWio2btwo\n3n77bREeHi5OnTolHePh4SG++uorUVdX18IWyzxNvvvuOzFx4kQhhJDG+tq1a6J///7igw8+kI47\ncuSIaGhoaBEbnwY7d+4UEyZMEEIIMWPGDDFkyBBx+/ZtIYQQkZGRwsPDQyQkJEjH379/X4wbN05M\nmDDhifVDY2Oj9O8ffvhB9O7dW/Tp00f4+/uL+Ph4cffuXSGEEOfOnRMjR44UvXv3FufOnXsi/+/n\nhUf7qEePHmLjxo3i3LlzIiIiQgwbNkzs2rVLPHjwQAghxLZt24SHh4dYvXr1f3suVeG1114T27dv\nl/6+evWqCA8PFx4eHuKnn34SQghpvt2+fVu8//77okePHiI/P1/6TX19vZgzZ46IiooSpaWlz7YB\nTWjav9nZ2SIzM1N89tlnIi8vT/r89u3bYurUqeLVV18VCxYskMbtced4EZgzZ44ICwsTnTt3Ft27\ndxdHjx5t9n1qaqoYPXq0GD16tCgrKxNCPFyLBg8eLEaPHi3u3LnTEmY/lqZjd/XqVTF48GDh4eEh\nvv32WyGEELW1tdL3sbGx4q233hJDhgwRU6ZMkdrWEjRdz5cvXy4GDhwopk+fLs6fPy+E+Fe7Ghsb\nRWNjo9ixY4eorq5uEVufBrt37xZdunQRKSkpzT5vbGwU9fX1QgghqqurxciRI8WgQYPE66+/LkaM\nGCFefvll6fvWtDeQeT6QPY1kZGRknhLiv94CJScnY2RkxJQpUzAzM8PLywsXFxdKSkrIy8sjPDwc\nR0dHevToQZcuXf4UjvQi8t/l1nie8m48amtjYyObNm3i1q1bDB48GDU1NR48eIC+vj7t2rUjISGB\nvn37YmRkhJWVVatJtCyE4OLFiyxevFjyqlqyZImUG6hDhw7k5eVx5swZFAoFxcXF/Pjjj1y5coX4\n+HjU1dWfSD8of79gwQLWr1/P7NmzmTx5MtXV1SxevBg1NTV8fX0xMzMjKCiItLQ0SktLefnll/9y\nH6g6p06dom3btlIf5eXlkZCQwPTp03nppZcoLS0lOTmZxsZGcnJycHFxwdraGi8vLzp27Ejfvn3/\n5H2livO2sbGR/v37S94iOjo6BAQEcPr0aSmflY6ODg0NDbRp04awsDBycnI4duwYAwcOBB6Gg3Tu\n3Jl+/fphb2/fIu0QTbwMZs6cyU8//URmZiaFhYUIIYiIiAAe5upSekZt374dY2NjvLy8pPOo4hg9\nSZr20/79+1m4cCHffPMNdnZ2XL58WfLwtLCwAJC8WOrr6xk8eDAKhQINDQ0GDx5Mjx49VC43l0Kh\n4Pfff+fUqVN06tSJixcvcvbsWUaMGIG6ujq1tbWoq6vTrVs3+vbty7BhwwgPD5cqAbaUzUo6derE\nnTt32LVrF9XV1Tg7O0sJuevq6pg6dSqrVq0iOjpaJUNc/y8o72Hx8fHY2toybty4Zh5+CoVC8mTV\n09PjpZde4t69eygUCtq1a8fChQul3GOt2dNVRjWRRSMZGRmZJ4xyk1pVVYWenh45OTkUFxczdOhQ\n6UZvYWHBnTt3yM7O5pVXXkFHR4d27dq1mkogf4WmG6Lk5GRSU1NJSUkBHvbb81JNrmk7cnJyUFdX\nx9jYGB0dHX7++WfMzMzw9vaWNo0nTpygpKSE4cOHNysh3Boe6hQKBQ4ODhQXF3Pw4EG6dOnC22+/\nLX1vbm5OaGgo+/fvZ//+/Zw5cwY7OzuWLFnyxPOtnDhxgg0bNjBp0iSCg4PJyspi8eLF9OnTh7Vr\n16KmpoaPjw/m5ub06dOHIUOGtPoN+sKFC1m8eDGurq5SrpCqqirMzc3p378/+/bt429/+xuff/45\ns2bNIjExkdLSUgwNDXF0dMTR0fG5Cdvz9vZGXV2dxYsXc/ToUTp27IiFhQVeXl5kZWWxadMmBg0a\nhLa2Ng0NDWhrazNw4ECioqKka1FZqlxXV/eZ29/Y2Aj8a104ffo0mzZtYvbs2YwePRpNTU2OHDlC\nRUUF3bt3Bx4KRx07dkRTU5Nhw4ap/Bg9SZT9lJKSwqFDh+jRowdDhgyhc+fOmJqaUlpayp49e3B3\nd5eEFC8vL8LCwiTRvrGxES0tLZWrAKhQKCgoKOCNN96QRC1ra2t27dpFRkYGr7zyChoaGpJwpKmp\nibq6eouF1yn3RpWVldy6dYsrV67Qtm1bAgICmglHLi4uGBoaMmPGDLZs2UJcXFyLhdE9SZSFLL7/\n/nv8/f0JDg7+U4iZEAJ1dXWqq6sxMTEhMDCQ3r17ExoaKq2xqhgeKdP6kUUjGRkZmSeMQqEgNTWV\n6dOn061bN+7du8ehQ4dwcnLCyspKuuHX1tayY8cO+vXrJye8boJyA/X999+zcuVKOnTowPXr19m8\neTPnzp0jODhY5TdNoknunpiYGFatWoUQAl9fX9q2bUtdXR1r165FU1MTZ2dnrl27xqJFi9DV1WXY\nsGGtQih6HPfv36dHjx5s3bqVkpIS+vXrBzxMjm1iYsKgQYOIiooiMjJS8gapr69/ovlWGhoaEELQ\nt29fDh06xBdffMEHH3zAJ598wvnz51m3bh33798nKCgIIyOjF6I6zY0bNzh9+jR5eXnY2NhgbW2N\nhYUFVlZWaGlpMX36dMLDw3n77bepra0lKyuLoqIiFApFMy8sVe6jR8cwOzub+fPnY2ZmRocOHTA3\nN8ff35+MjAw2bdpEVFQU2traNDY2oqmp2czrr6WuzwsXLjRLWrxp0yYWLVqEmZkZr732Gm3btqVD\nhw5UV1ezd+9eLly4IAlH2tra+Pv7vxDz+VHOnTvHggUL2LVrFx06dCAoKAgAFxcXdHV1OXbsGPv3\n78fR0fFPuamU3h+qyPnz5ykrK6N9+/YMGzYMLS0tbG1tcXBwICMjg/T0dF555RXU1dVbfMyV4khG\nRgbTp09n3bp15OTkcOTIESIiIggICODevXtkZmZSVVXFli1bSE1NZc2aNfj4+LSY3U8aNTU1kpKS\naNOmDS+99JKUmF15TSsUCm7fvs3777+Ps7PznxJ+q+pclGn9yKKRjIyMzBNC+UBx//59Zs+eTb9+\n/ejZsyfu7u6kbs8NXQAAIABJREFUpqaye/dubG1tsbKyQkNDg8TERK5cucLIkSOfG++ZZ0VOTg5x\ncXEsWrSIQYMG0aZNG9avX88bb7zRLLRCVWla+nr16tXMnz+fsLAw9PT00NHRkUJa5s+fT3JyMtu2\nbaOhoYGVK1c+sVCsluZxbWjfvj2+vr64u7sTFxcnCUfKjXB2djbu7u5SpTTlW9cnaYOenh6Ojo7o\n6uqyfPlyrK2tmTBhAurq6hw8eBB1dXUqKyubiXetfaPu4uKCkZERRUVFknBka2uLvr4+t27dYvXq\n1YSEhODt7Q3AwYMHiY2NZejQoSo/T5VzQDmGO3bswNLSkvDwcDQ1NZk9e7Yktpibm9OxY0cyMjJY\ntmwZI0eObFaQoCXbOnv2bEnMamhooKamhoyMDA4fPszdu3cZNWoU8DDBsLe3N9XV1fz+++8cO3aM\nsLCwZudq7fP5Ue8NIyMjTExMuHjxInv27KF79+5SGLiLiwt6enrk5uZy584devbs2VJm/5+4evUq\nvXr1IjMzE19fX7p16waAuro6tra22NrakpWVxYYNGxg+fHiLj7lCoWD37t189NFHjB07lg8//BBD\nQ0OWLFmCq6srrq6udOrUifv377NmzRrKy8tZs2aNtOa0BoQQNDY2SlUN27dvj7W1teSBpByjqqoq\n9u7dS0hISIuGEcrINEUWjWRkZGT+Q5QPI0rXb4VCwd69e5k/fz66urq8+eab6Ovro6amRlRUFKmp\nqezatYuEhARycnLIyclhwYIF2NnZtXRTWpxHH+4PHjzIxYsXGT9+PGlpaXz22WdMmTKF6Oho7t27\nR2FhIRYWFi2+Ef7vuH37NnFxcYwYMYKIiAi0tLSkt4rGxsYEBQXRv39/vLy8eOmll5g0aRIaGhqt\nwv28aWjeli1byMzMJDMzExcXFwwMDHB0dMTDw4O4uDiOHDmCi4sLn332GUVFRc3CgP7KQ3pTG/bs\n2UNJSQlVVVVYWFigp6fH/fv3iYuLw9LSkt69e1NfX8+6det49913+eijj/70Bri1omyjo6MjRkZG\nFBcXk5eXh62tLdbW1mhra5OUlMTx48e5e/cu8+bN4/z584wfP17lvVaUc0AZNpeVlcXMmTMZM2YM\nCoVCqoY3Z86cZsKRt7c3165de2yeppbC3Nyct956C4VCwY0bNzA0NMTd3R01NTX27NnDpUuXCA0N\nBf4lHJWXl1NbW9usPHdrp+l1X1tby/3799HS0sLJyQlra2vKy8vZsWOHlLsMwNnZGRcXF5X38my6\nHunp6eHi4sK+ffvQ0tKiZ8+eaGtrA/8SjszNzTly5Ag9evRo8dC6xsZGEhIS6Nq1K+PGjaOmpoYv\nvviCgQMHMnbsWOm4Tp06YWBgwKRJk3B3d29Bi58MTfc2SvHa3t6ehIQEKioqcHJywtLSUpqzd+7c\n4ZtvvgGQrncZGVVAFo1kZGRk/gOUG9M//viDadOmERQUhI6ODkePHiUuLo4LFy4wYsQIDAwMqK2t\nRUtLi6ioKCwtLbGwsMDNzY1PP/20VZSOfRIoN0bl5eWYmJhw4MABrly5grm5OZMnT2by5MlSGfas\nrCz27duHt7d3i+QU+d9SU1PD/Pnz8fPzw9/fv9nGsaamhmvXrmFra4ubmxsODg6tqvS1sq1z5sxh\n1apV1NfXc+nSJZYsWYK7uzv29vY4Ojri5+dHYmIimZmZUoJQdXX1vyzWNA0PnDlzJvPnz2fv3r3s\n3buXjRs3EhYWRtu2bbl+/TrLly+nvLycZcuWcePGDSZNmvRClDNWtq9pGx0dHTEwMODo0aPk5eXR\nrl077Ozs6NWrF1u3buX06dPo6+uzatUqKSGrqgqcM2bMICYmhuHDh0vX1OXLlzly5AhDhw6VxNnO\nnTujpqbG3LlzMTU1xcfHB0tLS/r06aMyolh6ejoaGhrY2NiQmprKW2+9RXh4OHZ2djg5OaGhoUF2\ndjanT5+WPGW0tbUJDAykX79+L4wA2lQwWrFiBYsXLyYxMZGioiIcHR3x9fXFysqKkpISfvvtN/z8\n/CThyMbGRuULDygUCvLz86moqMDKygp3d3dsbW35+eefqampoWvXrtL1qK6ujoODA5GRkSqRvLux\nsZGlS5fi5+eHnZ0d0dHR9OzZk2+//RaFQsGmTZs4e/Ysrq6u+Pj4YGJi0tIm/2Vqa2ultefUqVPU\n1dVRW1uLnZ0dLi4uxMfHU1xczPXr1zEyMiIzM5Mff/yRy5cvN1tjVXU+yrxYyKKRjIyMzP+RpoJR\ndHQ0/fr1Izw8HIVCgb29PW5ubmRkZFBVVUVERATq6urU1dWhqamJi4sLQUFB+Pv7y3mMeBgqkpWV\nRUBAADNmzCA7O5t+/fphZmZGbGwsSUlJzJo1i+joaAAePHhATEwMCoWCyMhIldlMPe6B7N69e+ze\nvZs2bdoQFBTUTAw6evQoK1asoGPHjs2Er5Z+OH2SrFmzhrVr17J48WLGjBlD27ZtSU5OZs+ePVLy\nZFtbW4YNG0ZgYCAffvjhE/G0ajoWBw4cICkpiZiYGMaMGUNQUBCFhYWsWLGCqKgoQkJC0NfX59Kl\nS7i6ujJ//nw0NTVVQih4mjR9uK6oqKC6uhoNDQ20tbVxcnJCX1+fo0ePkp+fj7W1NR4eHgwdOpS+\nffsSHR0t5ZpSVcGooaGBu3fvUlBQQHp6OpGRkaipqVFYWCit2/Cv661z586oq6sza9YsPDw8cHFx\nkc7V0vNg/fr1fPbZZ0RGRmJnZ8edO3e4cOECa9eupWvXrtja2uLs7Czlmjp79iwhISEAzbwbVWWt\nfJoo2/jDDz+QmJhI37598fLyIj09nb1792JjY0P37t0xNTXlxIkTJCQkEB4eLlXranoOVWXSpEms\nW7eOTp06YWlpibu7O46OjsTGxnLv3j26dOnSTDhShvo+a5Rz7ubNmwgh0NLS4sSJE1y4cIEffviB\nkJAQpk2bJoX0Jycn09DQgL+/v8quK/9bFixYgL29vTSvfvjhB+bMmcOmTZvIz8/Hx8eHwMBAOnfu\nzL59+8jMzGTVqlVcunQJJycnli5d+sQLQMjI/GWEjIyMzHNCQ0PDv/2usbHxmdpQWloqfH19RWxs\n7J+Oqa+vF6mpqcLPz0988803f/qtzENqamrETz/9JDw8PMSbb74p/P39xR9//CF9n5SUJAICAsQ3\n33wjCgsLxe7du8U777wjBg4cKOrq6oQQz27c/zuajuvly5fF7du3JbsSExOFp6enWL16tbh165YQ\nQohbt26J8ePHi/Hjx7faOXHz5k0RExMjfv31VyGEEDt37hQdO3YU69evF5MmTRLdunUTWVlZoqam\nptnvnmR/bN++XUyePFlMmTKl2ecVFRVi2LBhYty4caK2tlYIIaT/CiGkudVaadrH8+bNE0OGDBF+\nfn5i4sSJYvXq1dJ3GRkZYsyYMeKdd94Ru3fvbnYOVbju/ifq6upEZmamiIqKEqNGjRJ1dXVi8+bN\nYuTIkf/2Nxs3blSp8d+wYYNo37692LVrV7PPCwsLxbhx40R4eLg4fvy4EEKIqqoqsWTJEtGtWzex\ncuXKljC3xWlsbBSnT58WERERIjs7W/r85s2b4rXXXhNDhw4VN2/eFEIIsWPHDjFz5kxRX1/fUub+\nx4waNUqEh4eLvLw8yX7lnuOrr75qtp61BMr1YdeuXWLChAnSWKSnpwsPDw8RFRUlLl68KIR4uPbG\nxsaKsLAwcebMmRaz+UlRUFAg+vbtK9555x1x7do18fvvv4vg4GCxa9cuER8fL8aNGydCQ0NFaWmp\nEEKI6upqcfXqVVFUVCRu3rwp9Z0qrUMyMkIIIXsaycjIPBc0fTOem5tLSUkJR48excbGBm1t7Wf2\ndlChUFBeXk5UVBRjxozhb3/7m/RdUlISd+/elUIGHB0dWbBgAVVVVYSGhqr8G8xnjYaGBn5+fuzZ\ns4dDhw7x+uuvM2jQIOl7GxsbXFxcWLt2LVu3bqWwsBBjY2NWrlypUt4gynGdP38+c+bMYdu2bRQV\nFREaGoq/vz/19fX88MMPHD16lNTUVDZs2EB1dXWrdj/X1tZGW1sbLy8vrly5whdffMH48eMZOXIk\nurq6JCUlsW3bNoKDg5tVh3lS/XD//n1iYmLYt28fampqDB06FHj49tvQ0JAHDx6wb98+BgwYgI6O\nTrO3uaowp54mTefrunXrmDJlCm+99Ra7d+8mMzOTBw8eEBAQgLOzM/r6+uTm5lJbW9ssQbAqz9em\nia/v3buHm5sbe/fuJScnB3t7eyoqKqisrKS8vJxz585RVFREVlYW7dq1o0uXLs1yILUkW7duZcqU\nKbzzzjtSkmulXZaWljg4OHDy5EkSEhLo1q0bdnZ22NvbY2dnx9ChQ1vc/mdF07xFCoWCqqoqNmzY\nwLBhw7CwsKC2thZdXV169+7N/PnzMTAwwN/fHxcXF4KDg1UmBPFxiP/y1lHmTVTaOWTIELZv387m\nzZvx8fHBysoKDw8PLC0tSUxMJDo6ukVDt5VV0iZNmkS/fv0IDAzExMQEFxcX2rVrR0pKCidPniQt\nLY3MzEx+++03li1b1irC9a2trWnbti2HDx9m165dqKmp0aNHD6KiovD398fJyYlTp04RHx9P9+7d\nsbOzQ1dXFwsLC9q0aSN5BsoeRjKqhiwaycjIPBc0zZGybNkyKioqSEtLIzs7m7Zt2+Ls7PzMbNmz\nZw/p6en0798fHx8fFAoFy5cv57vvvuPVV1/F2toaNTU1nJyccHZ2Zs6cOdy9e5fg4OBnZuPzQk1N\nDWfPnsXLy4sNGzagoaFBp06dgIfCg7u7O6+++ip9+vRh0KBBDB8+/KmUYf9PaCr2pKSksHjxYiZM\nmICuri6HDh1i69atDB48mO7du+Pq6irlN+jUqROzZs1qNe7ne/fuZdOmTWzevBkDAwNsbW2Bh5tn\nAwMD8vLyKCsr48MPP5RCwUxMTOjVqxf9+/d/Ig9rjwpvmpqahISEUFlZKZWG79Chg9TX169fJysr\niwEDBrR4gthnibKfCgoKiIuLY/bs2fTo0YPy8nKWLFmCp6cneXl51NXV0bFjR5ycnJ6LBMFKRJNc\nVjNmzCA9PZ3o6GhcXV3Jzs4mOTkZLS0t7ty5w+7duyksLKSoqIjr168zcuRI6bctLSD88ssvfPHF\nFzg4OKBQKNDW1sbZ2bmZwKEUjk6dOsXq1asJDAzE0dERLy8vlRZCniSZmZnEx8ezYMECgoODMTY2\nRk1Njfj4eCwsLAgICJDCw3V1dcnOzsbS0pKgoKBm51GVfhKPhBEqFAoOHDjA559/TkhICAYGBtK4\nvvrqq6SmprJ9+3a8vLywsLDA29ub1157rcVD3ysrK/niiy8YM2YM48aNk/ITNTY24u3tjZeXF/X1\n9Vy/fh1vb28+++yzVpH0Winqurm5YWBgwMGDB9m5cyfdunXD19cXAAsLC5ydnTl9+jSrVq2ia9eu\nmJmZ/WncZWRUjhb1c5KRkZH5P7B+/XrRo0cPUVJSIoQQYvPmzcLDw+NPoRPPgoSEBOHh4SGSkpLE\n0qVLRVBQkNi7d++fjqutrRXp6eni5MmTz9xGVeTfhR9du3ZNzJ8/X/j5+YkVK1Y0++7EiRP/q3M8\nKx4NzcnKyhLx8fFi27ZtQoiH4Ym5ubni5ZdfFkOHDpXczB88eNDsd89jWMSjrF+/XnTr1k2MHTtW\nREZGCg8PD5GTk9PsmMTEROHr6ytOnz4tKisrxfjx48XXX38tff9X3fCbzoeTJ0+K6upqcePGDSHE\nQ9f/jz76SERHR4t58+aJ69evi9OnT4u3335bvP766y0+l54Vp06dEvfv35f+vnLlioiPjxcPHjwQ\ne/bsEV26dBFJSUni2rVrYsCAASI4OFjExMQ0O8fz1FcVFRXitddeE/n5+UKIh3Ns586dYtSoUSI6\nOlo6TnlNKq9pVWjj6tWrhYeHh/j999/FqVOnxOuvvy7eeecdkZGRIR3TdO0oLCwUQ4cOFRMmTBBC\nPB+hg0+CpKQkERwcLBISEkRqaqoQ4l/jt3TpUtGzZ0+RlJQkHV9fXy+ioqJEXFxci9j7P6G0vbq6\nWhQXF4u8vDwhxMM1LSgoSLz55pviypUrQoh/rZmlpaWiffv2Ijw8XBw8eLBlDH8M58+fF7169RKH\nDh2SPms6L1vjHL1+/br0b+W1mpaWJqKiosSAAQNEZWVls+NLSkrEsGHDxPvvv/9M7ZSR+U+RPY1k\nZGRUFvHIW7etW7fi6enJ4MGDSU1NZerUqUyZMoUBAwZQU1NDTU3NM0v66Ofnh76+PtOmTWP//v3S\nm85HUVdXx8XFhbZt2z4Tu1SZpiGGOTk5FBYWUlpaipeXFzo6Ojg5OdGmTRuWLFkieYZ88MEHnDp1\nivDwcOk8Lf0W7u7du2hpaSGEoLi4mH/84x/k5uby8ssv4+TkhJqaGjY2Njg5OZGVlcW2bdsYPHgw\nmpqazc6jKm+3/1PWr1/PtGnT+O6775g4cSJBQUHs2LGDEydOMGDAANTV1VEoFLi7u7N//37mzp3L\nzp07qampYeHChZLXz1/tB+V8iI2NZe7cuSQnJ3PmzBmsra2xt7cnMDCQoqIikpOT2bJlCydPnkRL\nS4sFCxagqanZKsMDm5KWlsasWbM4fvw4wcHBqKuro6enh5ubG1paWsydO5fg4GDefPNN9PT0KCgo\noK6uDmNjY8LCwppV/XseWLZsGQkJCRgaGjJixAi0tLRQU1PD1tYWExMTcnNzycjI4OWXX5buF8qQ\nkJa+Ji9fvszPP//M5MmTCQsLk0J69u7dS0lJCfr6+o/1OOrUqRMjRoz4UzW81kpWVhbffPMNX331\nFa+++mqzsCaFQoGFhQX37t1jxYoVnDlzhqNHj7JkyRLu3LnDzJkzW3ycH0V5bzx58iSffvopRUVF\nHD9+nPDwcMzNzYmIiCAxMZH9+/dLHkcAFy9e5MGDB2hoaNC/f/8W9zBScvHiRZYvX86gQYOwsbFp\n5vX2xx9/cPToUaytrVvcW/hJkZWVxZQpU+jVqxc//vgj8+bNY9iwYfj6+mJiYsKxY8fIycmhe/fu\n6OnpAWBubk5gYCAjR458Ia5ZmecfWTSSkZFRWZQ30pqaGjQ0NFi+fDnu7u5oa2szceJE/v73vzNy\n5EgaGxtZtWoVFy5coH379k/FlkcFLAB/f3/Mzc3Jzs7Gx8eHDh06qNxmVFVo+kAWExPDihUrpOpM\nW7dupXfv3piZmeHs7IyBgQHz5s0jLS2Ne/fusWjRIpUJ4crPz+ejjz6ic+fOmJqaoqmpiba2NiUl\nJVRXVzNgwADgoRBibW2Nk5MTSUlJXLhwoZnw9bxTUFDA//t//49PP/2UV199FTU1NUxNTfnll19Q\nV1dn2LBh3Lt3D21tbTQ0NIiOjsbBwYGQkBA+//xzqUrak7pesrOzWbFiBd9++y1t27bl5MmT7Ny5\nE3d3d5ycnOjcuTOXLl3i9u3b9OzZk3/84x9oaWk1K4ncGtmwYQP//Oc/GTt2LD169JBCB+FhZa2G\nhgZ+/vlnbGxsCAkJoba2lp07dxIdHc277777XFbeunjxImvXruXWrVtERUVhYGCAEAINDQ3s7Oyw\ntbUlOTmZK1euqFyeJj09PUJCQujQoQP19fUoFAqsrKz+rXCkvIbatm2r8uXinwRCCBoaGli0aBF+\nfn6MGTPmsWE9RkZG0rWfmZnJnTt3sLS0lKpSqVLonvLeeOLECUaOHEnfvn0ZP348Q4cOle57JiYm\nhISEsHbtWvbu3Uv79u3R0tJi8+bN1NfXExsb22Il6pXrQ9N1wtjYWBJKOnTogLm5uXT8okWLOHbs\nGOHh4c/92nvr1i20tbUxNTUlLi6OTZs2ceTIEdauXYudnR0Arq6u6OjocPjwYbKzs5sJRyYmJi/E\ndSvTOpBFIxkZGZUjLy+P6upqLC0tmT17NlevXsXb25uGhgaWLl1KQkIC06ZNk5Lb3rt3j+XLl6Ot\nrU23bt2euD3KzdDhw4fJzc1l586daGpqYmxsTMeOHdHX12fWrFno6uri5+enMptRVUK5IYqLi2Pd\nunXMnz+fv/3tb2hqavLLL7+wf/9+wsLCsLCwoEOHDvTr1w8PDw++/PLLJy4w/BXKyso4duwYGRkZ\n+Pr6Ymtri4uLC3p6euTm5lJaWkrv3r2BfwlHXbt2bXWJacvKyrh8+TInTpygS5cuGBkZMXHiRP74\n4w8sLS3ZtWsXy5Yt4/r169y8eRMrKyt8fHxwdXWVvCT+ygPDo5vsEydOYGZmxrBhwwgKCsLY2Jiy\nsjLS09Px8PDA0dGRgIAACgsLOXr0KEIIPD09/+T91ZrYt28fU6dOZdq0abzyyivNEo4r+6+xsZHi\n4mKOHz9OaWkpK1eulPKRqKmpNfMOVEUe97Dl4eGBm5sbKSkpUi65piXIbWxsCAgIUMlrUqFQcPXq\nVXR0dNDU1EQIAYCVlRWurq7s2bPnT8LRo79vzSgUCmpqapgzZw4RERH4+fn9SdRUCkKampr4+Pgw\nZMgQBg8eTEREhMrkw2uKQqHg+vXrTJ48mZ49e/LZZ59Jpdqbzm8TExN69+5NcnIya9asYevWreTl\n5fH5559jYWHRIrYr+1758ufgwYM4Ojqir6+Pnp4eBw8eJDMzE3Nzc86cOcMvv/xCSkoK06dPx8rK\nqkVsflK89957CCFwc3NDV1eXy5cvs2fPHhwdHRk0aBCGhobS2Lm7u6Ojo0NhYSEbNmygb9++6Ojo\nSOdq7detTOtAFo1kZGRUisuXLzNt2jTy8/PZs2cPGzZsYOLEiZiZmaGpqUl5eTlCCPr06YO9vT1n\nz57liy++4Nq1a8TExDyVhwCFQsGOHTv4+OOP0dLSkt6glZSU0LNnTwICAjA0NCQ2NhYhBIGBgfIm\n4DFcunSJzZs3M3bsWLp3786uXbv49ttvee+99zh+/Djp6emEhoZiZGSEqakpbm5uT0RgeBIoH0Sc\nnJywtrbmyJEjbN++nY4dO2JtbY2joyMaGhrs2rWLkpKSZsKRpaVlq0lMq2yDo6Oj1A9paWls27aN\nqqoqFi5cyDvvvIO3tzc2Njbs2rWLVatWUVlZSUREhHSeJxWStnbtWtLS0jh06BCmpqZSgltHR0eM\njIw4ceIEGRkZUkLnLl26cOTIETIyMtDR0XlqnomqQFpaGgYGBrz33ntSfxUUFJCSksJPP/3E1atX\ncXBwwM/Pj1OnTlFeXo6JiQnLly+Xqvqp8nxtat+JEyc4ffo0bdq0obGxEQ8PDxwcHPjpp5+4desW\n3bt3R01NTfI4UhYrUIVrsqkwkJaWxvvvv4+Hhwc2NjbN1j1LS0tcXV3Zv38/u3fvxsXFpZkQ+KLQ\n2NjIypUrpev50Xutmpoa1dXVvPHGGwQFBWFmZiZ9J1S0KtX58+fZtGkT48ePx8rK6k8hoUpxxtDQ\nkOHDh9O2bVu6dOnCRx99hKura4vZrVAoyMrK4t1336WhoYHNmzezZ88ebGxsCA0NxcLCgnPnzrFg\nwQKKi4u5du0a8+fPx9PTs8VsflLcuHGDIUOGSCGuenp6DBkyhN9++43s7Gz8/f0xNTWVxtDNzQ1t\nbW3q6uro16+fvEeUef54lgmUZGRkZP437N69W4SGhor27duLzZs3CyH+lThx37594uOPPxZ+fn4i\nLCxMREZGihEjRoja2lohxNNJLlxWVibCwsKkpJrnz58X3t7e4ocffmh2nDIhdtOEiDLN2b59u6is\nrBRFRUUiPDxcrFmzRgghRFxcnPDw8BBhYWGiurq6ha389xQWFgohhMjNzRXvvPOOGDJkiCgrKxNC\nCHHjxg2xatUqERkZKSWlba082g8+Pj7NEtIrk7revn1bnD59+oldl00TFc+dO1d07txZjB49WoSE\nhIjAwEBRWlra7Pjc3FwxdOhQ8eWXX0o2VFVViX/84x/i/PnzT8QmVeXLL78UUVFR0t8xMTFi1KhR\nIiIiQowePVp4eHiIr776SgghRE1NjWhoaJDW2b+anPxp0zSRbkxMjOjdu7cICAgQ4eHh4m9/+5s4\nffq0EEKI1NRU4ePjI7777juVbFPT+Zyamio2bNggPDw8xMCBA0V2drZ0X2tsbJTafPDgQTFt2jSV\nSNr9LGhsbGy2fjQ0NIjhw4eL4cOHN7uGm/ZHWVmZGDNmzHNzjf/666+iffv2zcb7Ue7du9ciRT8e\nh9K+mzdvikmTJonk5GQhxEMbR44cKQYPHiyys7Ol40+dOiWuXbsmbt682SL2Pk3i4+PFDz/8IKqq\nqoQQDxOZ9+rVS0RHR4vjx49LxzVNyi5E6yiEIfNiIXsaycjIqAzKN663bt2ioKAAc3Nzzp8/j62t\nLe3atQPAzs6OoKAgevXqhaenJwMGDODDDz+UQpiehkdKaWkpRUVFTJ06lbNnz/LWW2/Rp08fPv/8\nc+l7ExMTOnfuzLBhw1QmGWVLcujQIXbv3k1+fj5WVlbo6+sDD+P79fT02L59OzU1NUycOBEtLS3O\nnDmDsbExzs7O9OnTp8Xf/j+OnJwcvv76ayIjI/Hw8MDIyIiysjJSU1ObeRzV1NRw+/ZtIiIiWuXb\nRGU/REVF4e7ujpGREdXV1eTm5hIQEEDbtm1paGiQSoUry2A/Ca8OZX9evnyZI0eOMHnyZN577z28\nvb2pqKhgw4YNBAYGSt4FDg4OuLu7M3z4cCk0RV9fn/DwcCkEpLUh/ssrobGxkQMHDrB582ZWr15N\ncXExr7zyCh9//DFvv/02NTU1JCcnM2jQIIyNjaUkykJFvTEeRaFQkJCQwKpVq5gxYwbvvfeelHR2\n165dBAYGEhgYiIuLC7NmzcLIyAh/f/+WNrsZTZO4L1y4kK5du+Lr68u5c+fYunUrbm5u2NjYNBsP\na2trevbs+cLkQqmoqJDuqevWrcPQ0BAvLy+WLVtGbW0tXl5e6OvrS/1w//59pk+fjpaWFsOGDXsu\n+qeyspL59+2+AAAgAElEQVTffvuNTp06YWNj89h1MiUlhc2bN9OnT58WuT7z8/PR19enTZs2KBQK\n9u/fz9SpU6mrq2PIkCGSN3jfvn3ZuXMnubm5mJubY2tri5mZGTo6Omhraz9zu580mZmZfPvtt7zy\nyisAbNu2jU2bNqGjo4OtrS3m5uZERUWRmJjI7t27UVNTY968eWRkZDB69GhpPqriHkdG5r9DFo1k\nZGRaHOXGt2kSxejoaKysrDh06BD5+fk4ODhIMfA6OjpYWVnh6ekpbbCeZgjT4cOHpQper732GsHB\nwUydOhWFQkFBQQE7d+7E1dVV2lC96CQnJzN9+vT/z955xkV55X3/OxTpjPTeQZCOgIKgFAtBsWAv\n62Y/SXbd3HeqG5NsYtaU3Whi1Cw27Cai2FDRYEFFBEUBQbBLU0GwgQXERjnPizxzLSTuvSUoA5nv\nG2WYufifMtd1zu/8CyUlJRw7doydO3cyePBgDA0Npffs2rWLU6dO8dprr/Ho0SOWLVuGq6srM2fO\nVJqwkZ+ir6/PqlWr0NDQIDg4GEdHR3r27MmlS5fYs2ePJBz17t2b4cOHSzlhusKm5T9B0Q/q6urt\n+uHixYukpaURGBgoiTZt295R45mWlsaUKVN48OAB8fHx9OzZExsbG6ysrCgrK2Pbtm1SonJACvdo\nbW2VNlvdbUwAKisrkcvlyGQy0tLS6NOnDz179kQIgbm5OV9//TV9+/aVKjlWV1dTU1PDyJEjpcSs\noNx9c+PGDUkgePr0KatXr2bgwIFMnDgRuVwuVbXMzc3l0aNH9OvXD1dXV4KDg4mJiVG6ewr8GJo0\nd+5cPvnkE0aNGkVwcDDjx4/n8OHD7NixAzc3t3aVpp6V+Lm7cuHCBYYPH46npydbt25l3bp1TJgw\nAR8fH3R0dFi1ahVVVVUIITA2NiYrK4t58+ZRU1PD2rVrUVdX7xL3YENDQ7Zt28a9e/eIjIyUcq2J\nNvmaUlNTMTExITw8/IW3Jz09nTlz5hAfHy/l4lFTU2Pp0qWUlpYSFRWFo6MjQgi0tLR46aWXOHTo\nEHv27MHZ2RlHR8cXau/z5OrVqyQlJaGnp4evry8DBw6ksbGRjRs3oq2tLYlk8fHx7NmzhwsXLqCm\npsbmzZulsF9ln48qVDwLlWikQoWKTqVtXoqysjJu3rxJU1MTRkZGODo6oq2tzdmzZyksLJQ8jt54\n4w1aW1vp1auXdJ2O2gwoFmlnzpyhrq4OMzMzDAwMWLhwIYmJiYwfP55PPvlEeuivW7eOS5cuERcX\npxKM+LEM++eff86nn37KO++8g4ODA9u2baOlpYUBAwZI421ubs727dtZt24dqamp1NfXM2/ePGkc\nO3tzpxCtFPOhqakJAwMD1NXVyc7Opm/fvhgaGuLo6IiRkRElJSV8//33REdHY2ZmpjQlvH8p/00/\nfPfddz8TCTuSxsZG6uvrKS4uZvTo0VJlHoVwVF5eztKlS3nppZfaeRN154V6QUEBs2bNQl9fn23b\ntjFv3jxeffVVgoKCiIyMJCoqCn19fUk0e/r0KYsWLcLKyopRo0Z1ib7Jzs5m1qxZhIWFIZfLUVNT\nY9euXbS2trbLl+Xs7Mzp06fJzc1l4sSJyGQybG1t21UbUybu3r3Lli1bGDduHNbW1lJFv9jYWDZv\n3kxRURG2trbY2dkpne3PGx0dHTQ0NPjb3/7GpUuX2LFjh1SVytvbGxcXF7Zt20ZaWhqrVq2ivLwc\nKysrVq9eLVVJ6wpeczo6OhgaGrJ27Vpu3bqFn58furq6yGQyHj16xKJFi9i7dy8fffSRJPq+SFxc\nXBg8eDBmZmZUV1fz9OlTLC0tGTlyJHv27KG0tBR/f3/JNk1NTYYMGcLJkycZNWpUt/LqlMvlVFZW\ncv78eXx8fDA2NiYkJIT6+nqSk5Ml4cjY2JiRI0cSERHB1KlTJU/XrjAfVah4FirRSIUKFZ1GW8Ho\n22+/Zfny5axfv55z585x7do1+vbtK5UrPXfuHJs2bWLXrl1cvXqVzz77rMMfvoqNcXp6Ou+//z6N\njY14eXlhZWWFiYkJJ0+exNPTEw8PD6qqqli7di0pKSksXLgQGxubDrWlK5KZmcl7773HnDlzGDFi\nBFpaWlhYWJCcnIyFhQUvvfSStIg3MjIiIiICbW1t/P39mTNnDhoaGp3uYXT//n20tbUlGyorK+nZ\ns2e7zXZycjLBwcE4ODgAP4ZA6erqoq2tzUsvvSR9titsxP8Zv7QfOsqr41mnslZWVjg5OVFaWioJ\nVIrwFWtra4yNjdHT01Naz5LngaamJgUFBWzfvp3Tp0+zZcsW7O3tefr0aTtvi8ePH1NRUcGsWbO4\nefMmK1euRF1d/WcVqJSR1tZWFi9ejL6+vpQAuaioiNzcXAYMGNAuLLi2tpby8nJiY2OlRLXQ+WL0\ns/q5Z8+ebNq0ifr6egYNGiRtLgGOHj1KZWUlR48eZciQIRgaGv6qPBUUocuHDh2iqamJ4OBgnJ2d\ngR/HslevXgwfPpyRI0cyaNAgfve73zF27FilrJKmQDEHzp8/z7Fjx3j06BF6enr4+/ujqakphTVd\nvHiRo0ePsnXrVg4fPszy5cvbHZQ9bxTzTCG06uvrU1ZWxrRp09DW1sbBwQEzMzOGDh3KqlWrKC4u\nxs/PTxKOevTowfDhw7uFYHT79m3JG1NHRwdTU1OWLVuGmZkZgYGBAISEhHD//n22bNmCtrY2NjY2\nyOVyyTOyraerChVdEZVopEKFik5DsfBdvHgxycnJfP7557z22mucP3+ezZs3U19fT3h4OK6urlK+\nGFNTUxYvXoympmaHnxrLZDJOnDjBO++8w4cffsikSZOkMBsrKyssLCxYtWoVKSkpHD58mOrqapYs\nWdItKoF0BPv37+fGjRtoa2sTEhKCuro6M2fO5MKFC8jlcjIzM0lLS5MWX25ubvTr14+AgAApJK0z\nF1Vz587lyJEjeHt7o6enx/79+3nttde4fv062tra2NnZYWtrS1VVFampqcTExEjeZc7OzgwYMEBp\nQ+v+E5SlH9qKytnZ2Zw5c4bS0lIsLCywtbXFz8+Ps2fPsmbNGqKjoyXRwM7OjvDw8G4xFv8OLS0t\n6Ovrc+PGDbKysrCzs5NyObWtgtbY2Mjy5cvZsmULMpmM9evXS94YytpHig12c3MzJiYm6OrqsmrV\nKnr16oWjoyNhYWFs2bKFzMxMvLy80NLSQgjB/PnzpdwiykLb+Xzr1i1aW1ulHC/6+vrs3LmT2tpa\nQkNDUVNTk55HX3zxBQcOHODy5csMGTLkVyMYKZ7vdnZ2Ut6tzz//HAcHB9zd3aV5q6+vj6mpKQ4O\nDl1ig644mHrzzTcpLi5m586d1NTU4ObmxqBBgwgKCuLs2bNcvnyZe/fu0bt3b2bPno2bm9sLs1Ex\nV2/evMnZs2fR0dFBV1cXY2NjLl++zL59+9DV1cXW1lY6EFqxYgXnzp3D09NTCg3uDnM1LS2NN998\nk+bmZgIDA2ltbZUOCRMTE+nXr5+UczM0NJT6+noWLVpE7969260Nu0NfqPh1oxKNVKhQ0akUFxez\nZs0avvzyS0JCQjh79iyLFi1i4MCBZGZmcu/ePfr374+1tTU+Pj6EhIQ81xxGycnJ2Nra8sYbb6Cl\npYVMJqOlpQU9PT28vb0ZPXo0fn5+jB49mqlTp2Jvb9/hNnQ1FCeS/v7+NDc3k52dTVlZGcnJydTU\n1DBv3jwmT56MhoYGDQ0NfPfdd6xZswZ1dXWCgoKk63T2xvXYsWMUFhZSV1eHp6cn5ubm+Pn5sX//\nfo4fP8727duxt7enR48e3LhxAycnJ6ytrWlqamq3QensdvxSlKUfFIvsr776isWLF3PhwgW2bt1K\nfn4+WlpahISE4O3tzfnz51m7di0DBgz4WehGVx+L/wvF907RxtbWVuLj47ly5QonTpwAwMvLq13Z\n7vr6ejw9PZkxY8ZzLR7QUVy/fh0DAwOpjXp6ely4cIEbN27g7++PgYEBQ4cOZceOHezcuZOtW7ey\nZ88eGhsbWb16tVJ5USlsSEhIYOnSpaxatYqWlhYsLCzw9/enqamJzZs3k52dTUlJCUuWLOHatWu8\n+eabnDt3jnv37hEXF9fJrXi+ZGVlcfz4cby9vaUx19bWxsTEBA8PD1pbW/n6669xdnbG3d0d+PHQ\nSUdHBwsLC+k6yjDeP0UxD2tqali6dCnTpk1j9uzZyOVy8vLyOHXqFK6urvj6+hIXF8f48eOZMGEC\n4eHhL7S4hkIwKi0t5c0336SqqgpHR0csLCxQU1MjOjqayspKUlJS0NfXl4Sj2NhY5s6dS01NTacl\n634eHDt2jPT0dPLz8ykvL0cIgZWVFT4+Ppw8eZLy8nKCgoLQ1dUFfvQ4Mjc3Z/To0d36+aPi14dK\nNFKhQkWnYmRkxMOHD4mOjqagoID33nuP999/n9dff52cnBx2797NrVu3iIqKave55/EwFkKwcuVK\nAIYNG/azvDQ1NTVYWlpKbtmKRcKvHcUCva6ujrCwMO7du8ehQ4coKSlh6dKlBAQEoKenh4eHB1FR\nUQwYMIDQ0FDi4+OVYlGlWMyHh4dTW1tLZmYmt2/fxt/fHx8fH4YMGYKvry8lJSWkp6dz5swZTp48\niUwmk8JJugPK2A87d+5kzZo1rFy5kt///vdMmjSJEydOUFBQgJGREYGBgbi6unL8+HHOnDnD8OHD\nO9wGZaSt18qVK1cAMDc3x8HBAT8/P06ePElBQQEymQxPT08ANmzYQGxsrLQhf57FAzqCzMxMxo8f\nD/zoTWVnZ4eJiQmPHj1i7dq1BAUF4ejoiJ6eHpMnT8bY2Bh3d3cCAgL49NNPJW/Uzvx+CiHaiVZb\ntmxh1apVvPrqqxgaGrJ7926uX79O7969iYyMxMvLi6KiIu7fv4+5uTkrVqxAXV2dHTt2YGpqSkRE\nBKCcosgv5fLly0yZMoX8/HwyMjK4f/8+crlcEoK1tbXx9PRECMHcuXN58OABiYmJnDlzhrfeeksp\nniVt+WkYoUwm4/Tp02zevJmmpiZpDvj4+KChoUFBQQGnT5/GxcUFc3Nz1NXVpTXIixpvxXqntLSU\nyZMnM2zYMKZNm4avr2+73HYDBw6ksrKS7du3txOOxowZQ0hIiOSh3VVp2+empqa0trYSGxvL06dP\nOX36NPv27SMqKgoNDQ12796Nl5cXDg4OPHnyBA0NDby8vH41nq4qfj2oRCMVKlS8MC5fvkxlZSX3\n79+XynBraGjg5+eHtrY2S5cuxc/Pj1deeQVtbW3OnDmDlpYWPXr0eCFu+UIIKioqqKysJDAwUKpE\n1Nrayq1bt/j222+xt7fv8gui58HWrVtZtGgRY8aMwc/Pj8ePH1NbW8vt27cJDAxES0tL8kQxNjbG\n2dlZaRLTKrzJ1NTU6Nu3L3V1dWRmZlJXV4erqyumpqZYWloSGxuLk5MTNjY2VFRUUFFRgY+PD9bW\n1p1qf0ehjP2QlpaGTCbjtddeQ01NDQMDA4KCgti/fz9lZWXExcVhbm5O3759mTJlSrfcTD8LRTu/\n/fZbFixYwObNmyktLcXe3h4nJyf69OlDYWEheXl5XLp0iQ0bNrB7927++Mc/Kk2y+X/FqVOnOHTo\nEDKZTBIxo6Ki8PHxobKykqSkJEaPHi2FRrq7u+Pn59duw9bZoljbqqAXL17k+PHjTJkyRUqQK5fL\n2bdvH5WVlTg5OeHn58fIkSOJi4tjyJAhtLa28s0333D48GE+//xzTExMuu0cf/z4MZWVlXz88cfY\n2Nhw6tQpvvrqK2QyGQ8ePMDR0REdHR369++PgYEBOTk5WFlZSRUtlS3Xk0wm49atW5SXl0teUN9/\n/z3btm3jzp07xMfHo6+vD4CHhwcaGhoUFxeTnZ2Nr6+vJJa9yDbJZDLu37/Pe++9x+DBg5k5c2a7\n9U5jYyP3799HT0+PiIgIrl69yq5du1BTU8PJyQlzc3OMjIxemL3PC4X4Az8mvj537hzHjx9n1qxZ\nBAQEUFRUxMKFC4mOjiYnJ4eLFy8yZswYqeqdAmW/x6pQ8Z+gEo1UqFDxQtixYwd//etf2bp1KwcO\nHODmzZv07dsXdXV1qTT5ypUr0dfXZ8iQITx9+pSdO3cybNgw3n77bUm86agFlOIk6c6dO7S0tCCT\nyaRwjXXr1tHc3Iy9vT09e/akubmZ77//nszMTCZOnIiBgUGH2NCdUFR48fLywsXFBT8/PxoaGjhx\n4gQlJSUEBQWho6PzszHs7EXVT0N8APr27cvt27fJzs6mrq6OXr16SXmYrK2t8fLyIjw8nIyMDIyN\njQkICOgs8zsMZeiH8+fPk5eXR319PVZWVshkMg4ePMiNGzcYO3YsampqPH36FLlcjrW1NUuWLCEm\nJgZjY2OMjIw6/B6hjLQ9AU9PT2fZsmV8/PHHGBkZcfnyZdLS0vDx8cHZ2ZnAwECuXbvGlStX0NTU\nZOvWrUq5uf5n9O7dm7q6Oq5fv058fDxHjhzhu+++k/LbXb16lcrKSuk58lOPjM68t8yZMwcdHR2s\nra0RQpCbm8vkyZOpqKhg4MCBUn4aDw8PdHV1pXxwpqamksBQWlrKunXrOHDgAMuWLZPCsborBgYG\nnDlzhs2bN/PJJ58QGxuLr68vhw4dIjExkYqKCrS0tDA3Nyc4OJiYmBji4uKUsiqVEILHjx/zzjvv\nkJeXh62tLdbW1oSFhQFw5swZ6uvrcXd3l+6pHh4eNDc3U1lZydChQyVB6UVz584dduzYwW9/+1sp\nd8/JkyfZsWMHf/nLXzh48CDV1dWEhoYSGRkpJeweN25ct6ggm5OTw1tvvYWHhwcWFhbIZDKCg4PZ\nuHEjeXl5TJ06laFDh6Kmpsbx48e5d+8eFy5cwNjYGF9f3842X4WK54ZKNFKhQsVzZ9OmTXzxxRe8\n8847vPrqq1y7do19+/bh5+eHnZ0dLS0ttLa2cvPmTY4fP86pU6fYsGEDt27d4i9/+YvkFt3RSa8P\nHjzI+++/T2pqKgcPHiQyMhJ3d3esra1ZtmwZRUVF7N69mwMHDrB3716WL18uVW75NfPTzVlLSwvm\n5uZUVVVx/fp1QkJC6NGjB35+ftTX13Py5Eny8/MZOHBgu0pGnU3bEJ9Lly7x8OFDWlpa0NHRoV+/\nfty6dYusrKx2gklrayutra0YGxtz584dMjIyGD58+M9OGLsSytAPO3fu5Ouvv6a6uhohBEFBQchk\nMskD0cLCAi8vL2ljeOXKFc6fP8/48eOlTRd0z7Cdtijad+TIEU6dOkVMTAwjRowgJCQEY2NjSkpK\nJOHIycmJvn37MmzYMEaOHKmUm+uf8uDBg3b3CENDQ65cuYKrqyvvvfcepaWlFBYWUlJSwv3792lo\naMDb21upPHCuXLnCsWPHmDJlipTQ2tbWFg0NDY4dO4aRkRGenp7txAI9PT2SkpIwMTGR8ryZmJig\np6fHyy+/jJOTU2c26bmjeKb4+Phw9OhRNDU16dWrF3Z2dixcuBBvb2/u3LnD0aNHSUhIIDQ0FFtb\nW+mzyjanZTIZmpqa6Ovrc+LECcrLyzExMcHGxobAwEDu3bvH0aNHuX//Pm5ubtJc8PLyIioq6me5\n2V4k165dY9myZQwdOhRHR0c2bNjAihUrqKmpoU+fPvTo0YPdu3djamqKp6cngwcPZujQoZ1qc0dy\n5swZrl69SkJCAo2NjWhqamJra0tgYCDp6ek0Nzfj5eWFn58fzs7OkifW+++/3+mHYCpUPE9UopEK\nFSqeK6mpqcyaNYtvv/2WESNGSO7LW7ZswdfXV4qVV1dXx8TEhJaWFq5cuYKVlRWJiYkdXoZdsTi9\ndOkS06dPZ+rUqbi4uFBSUsLKlSuJjo6mX79++Pn5oaWlRWNjI56envz5z39+oeVulRFFKJlic3b3\n7l10dHSk8bt58yYbNmxgzJgx6Ovro6amhp+fH9XV1bS0tChN5R+FJ5niFHXevHkkJCSwZs0aqqqq\nUFdXx9nZmX79+nH79m2OHj3KnTt3cHFxaZeUd8uWLQghGDFihNJtWv4dlKUfdu7cyWeffcYHH3zA\nH/7wB/r37y/l8rC1tUUIwTfffIOenh4mJiY0NjaSkJCAlpYWkydPVoo59SI5ffo0f/vb38jLy2PA\ngAH07t0bAAcHB4yNjSktLWXPnj307t0bGxsbNDQ0pP5U5nmanZ3Nb37zG/T19ZHL5cjlcnr27ElB\nQQEFBQUMHz6ciIgI9PT0aGlpITU1laqqKiwsLNol1O9MhBAYGRkxePBg1NTU+OGHHygrK8PNzY2g\noCBaWlrYsWMH2traODo6SnnxPDw8cHNzk5LnKrzBLC0tO83j5HnT9vChbf7A7Oxsbt++TVRUFCNH\njqRnz56sXr2aMWPG4OzsjIGBAXFxcdL9Rxm//4rxc3Z2xsTEhIMHD3L16lVJOAoJCeHGjRtkZmbS\n0NCAs7OzNM6dfbBiZmbGjRs3+Prrr0lLSyMtLY2pU6fy8ssvM378eLy9vfnhhx9wcHCgb9++AN0i\nv6NizNzc3Bg1ahSGhob88MMPHD16lPr6evr378+VK1e4fv06/v7+UoJ2Hx8fRowYoTTh9ipUPC9U\nopEKFSqeC0IImpqa+OSTT9DU1GTEiBHS5vSrr76ioqICBwcHTp48ye3bt7G0tMTa2pqQkBBGjRrF\n4MGDpZPxjsxLoUhGee/ePezt7Zk+fTrBwcGEhIRQWFjI2rVrGTRoEF5eXgQHB/PSSy8RHBzcLeL0\nfwlz5szh1q1buLm5oa6uTkpKCp999hlaWloYGxujr6+Pn58fR44coaSkhIEDBwKgrq5Ov379iI6O\nbrcZ6iyKior46quvqKurw97enosXL7Jy5Uo+//xz/P39uXDhAnl5eWhra9OrVy9JMNm+fTsmJib4\n+vrS2trKgwcPWLBgAZ9++mmXzGmkLP1QXl7O3Llz+eMf/8iYMWOkDVPbDWWvXr0wMjIiISGB3bt3\ns2fPHlpbW/nuu++6VLjVf8tPPfssLCxoaWmhpKSEK1euEB4eLm047e3tMTY2Jjc3l+rqagYPHix9\nTln7KCUlBU9PT4yNjbl06RKHDh0iJycHY2Nj3Nzc6NOnD3//+9+pra0lLCwMBwcHgoOD8fLyQkND\ng5kzZyrNRq1tpbq6ujo+/vhjrl69ioGBgSTANjQ0sHHjRrS0tNoJRw4ODlIuJmUW9zqCtt6NpaWl\nkqeYuro6Hh4efPPNNyxevBhbW1sWL16Mnp4eampq2Nra0r9/f6XeoCvEr5s3b6Kvr4+TkxMWFhYc\nOHCgnXAUGhrKrVu32LlzJwCBgYGd1h7FPUZhc3R0NK6urvTu3ZsPP/yQ6OhoyaOmtbWVrKws+vTp\ng7e3d6fY29H8dD4aGxvj5+eHj48PACtXrqSkpARHR0e2bNmCnZ0dHh4eP7uOMs5HFSo6CpVopEKF\niueCEAINDQ0iIiI4cuQIBQUF2NnZMXfuXCoqKnj99dfx9/fn4MGDFBQUsGjRIg4dOoSNjQ12dnbS\nNTp68Xz37l3eeOMN1q1bh7u7OwMGDEAIgVwuJygoiIKCAtavX09kZOQLLXOrzLS2trJkyRIKCwvp\n2bMnbm5u1NbWoqmpyYoVKzh16hRnz57F29ub2tpaKisriYyMRFtbWwqH+Wklus7C0tISKysrMjIy\nqKmp4ebNm0RGRjJ8+HCpAsqlS5c4ceIEurq6uLm50a9fPwwMDBg/frxkv5aWFlOmTOmSghEoTz+c\nP3+effv2MX36dExMTKTX226+dXR0CAgI4KWXXqJv375ER0fzzjvvSDnIuvMGu+1mRgjBo0eP0NTU\nxNfXFy0tLU6fPs2FCxfw8/NrJxx5eHh0CS+sI0eO8O6779LQ0MCgQYOIjY3F2NhYKjxw+/ZtevXq\nRf/+/dm7dy/GxsY4ODgA4OTkxJAhQ5RGQPip54yuri5+fn5kZWVx8eJFdHV1cXZ2JjQ0lIaGBpKT\nk2lqasLT07NdLpjObsfzpu2cXrRoEZs3b0ZPTw8XFxcpLPby5cu0traSmJj4T8OelLGfFHPg8OHD\nLFy4ECEEHh4eODo6YmlpSXp6+s88jh4+fCh5VCmDzTKZDHd3d1xdXfH29kYul7d7f2JiIsXFxbz9\n9tsYGhp2is0dybPmo46ODq6urpIXY0xMDDt37uTOnTtcvXqVQ4cOSfn0VKj4taASjVSoUPFcUCye\n9fX1GTBgADt37iQ5OZn6+npWr17NgAEDcHBwIDY2ljFjxqCnp4e+vj7jxo17rm7nGhoaWFtbU11d\nTVlZGZMnT5ZyJsnlcvr27UtGRgY//PADEyZMUMqF6YtEsaCKj48nOzubQ4cOYWxsTEREBOHh4URF\nRaGrq0taWprkap+ZmYmFhYUUeqigszewT58+RV1dXaoEtmfPHnJycvDw8JDc7C0tLbGxseHSpUvk\n5uYC4Onp+cwSum1D9boSytQPaWlpFBUVMXPmTODZZaqrqqo4f/48Pj4+2NvbY2dnpzTVsZ4nbTcz\n3333HWvWrGH9+vVUVFTg4eFBcHAwTU1N5Ofnc+7cuXbCkSKBq7J7YcnlcqysrEhOTubatWtERETQ\nq1cvQkJCcHd3Z8OGDeTl5VFdXY25uTkNDQ0EBQUpVdJraD9W9+7dQ1tbm5aWFiwtLXFzcyMjI4OS\nkhJJOAoJCaGmpoaKigrGjh2r1GPU0SjaOm/ePDZt2sT777+Pt7e35E2koaFBU1MTycnJDB8+HDMz\nsxdadv6XIJPJSE9PZ8aMGUyYMIG+fftKwoKjoyNmZmYcPHiQa9euYWBggJ2dHcHBwT8TZjrT5uDg\n4GeKIYoDta1bt7JixYpuk9/xWfPR19dXyjOlSJ0wfPhwHj58yJ07dzAyMmL69OldYk6qUNFRqEQj\nFSpUPDeWLl1KcXExAwcOJCIiQgp38fLykryJFFXLfH19CQsL+9mG9Jfy08Wmuro6NjY2WFtbc+TI\nEZGZtkAAACAASURBVPbs2UN8fHw74WjAgAHExcWpPI34R/+pqakxbNgwTp48yf79+5HL5djb22Nh\nYYGPjw9Tp07lyZMnCCE4e/YsDQ0NhIeHo6enpxQLq4aGBikMZO/evQwcOBBbW1uKi4u5ceMGbm5u\nWFpaAj9uuG1sbDhx4gRPnz4lKipKuo4yiWD/DcrWD/X19ezcuRMPDw+cnJwkj7S211yxYgXFxcVE\nR0crlVDwvFG0df78+WzYsIHBgwczaNAg5syZQ01NDREREfTp04cnT55QUFDA0aNHCQ8PR0dH52fX\nUFZ0dHRwcHDA0NCQ5ORkrl+/zsCBA9HW1pY8QRsaGsjJyeHYsWPk5eURExPTrgx4Z9PWg3L58uUs\nXbqU1NRUWlpasLW1xd7eHnd3dzIyMigtLUVPTw9nZ2cGDhxIXFzcM+d8dyc3N5fly5ezbNkyqfrd\n7du3ycjIkJ4pp0+fJjc3l8jISLS0tDrb5H+Lq1ev8uc//5l33nmH3/zmN1L11by8PIyNjXF3d8fc\n3JyUlBQePHhAeHi45ImrbDYXFBRgZGSEpqYm+/fvZ8mSJdTV1fHtt98+MzSrK/PP5uPhw4cxNzdH\nR0eHHj164OPjQ3R0NC+//HKHr1VVqFB2uu8RnQoVKjqdhw8fsnv3bkaMGIGlpSXffvst//M//8PS\npUtpbm5mwIABUp6btg/ejgo3USzET58+TVFRES0tLQQHB+Pt7U1oaCizZs1izpw5TJ06lY0bN0rC\nkSL3kop/bMy//PJLLC0tmT9/Pv/zP//DqlWrkMlkxMTESHlopkyZAkBISAgffPABFRUVUvnoziQ3\nN5c33niDgwcPsmzZMvbt20efPn2IiIigqamJpUuXsn79etTU1KSSub6+vsyePbtbVS1Sxn6wt7dH\nX1+flJQUHBwccHFxabeBamxspKqqCn9//1/VplrBuXPnSE9PZ+HChQQHB3Pq1Ck0NTXbiUNTp06l\nsbGRa9eudUmhWy6XM2LECODHgwaZTMbHH38MgKurK6+//jqjRo1izpw5XL9+HRcXl840tx1txZ6k\npCRWr17N66+/TlZWFps3b+bSpUu88cYb+Pj48NFHHzF37lyWLVsmhUP/WgSjts/4hw8fSnPXxMSE\n8vJytm/fTnp6Oo2NjSxYsIC0tDR69+4tiWzKjGL8FB6cAH369KGlpYXvv/+eAwcOUFJSglwuZ8uW\nLURFRaGpqYmDg0Onlaj/d202NjZm06ZNREVFYWFhgZ2dXbsw4q7Kfzofd+/eLRV/aJvbqTuHRqtQ\n8VNUnkYqVKh4bmhoaJCdnY2Pjw92dnbo6+sTERFBamoqZ86ckZKDPo8Fs2JRlJ6ezsyZM7l16xY1\nNTUkJCTQq1cv3NzcsLa2xsnJiczMTJKTk5k0aZLq1Oj/0zasJTMzk/Xr1zNx4kTs7OyIjY0lKyuL\nI0eOIJfLcXJyQl1dndbWVgCcnZ05e/Ysly9f/pl3SGegrq7OuXPnmD9/PufOnWPTpk2SMOjs7Ixc\nLufQoUNcvXoVKysrSegyNjbuEiE+/y6d3Q/P+ryJiQnGxsasWrWKu3fvYm5ujpWVFc3NzVy/fp0P\nPviAu3fv8tlnn/0qv5vl5eXk5+czY8YM0tPTefPNN/nwww+ZOHEiDQ0NnDhxAkdHRwIDA4mMjFSK\nZPP/imfZp62tja2tLT179mTjxo3cvHmTAQMGAP8IDxk1ahSTJ0+WCiQow3xQtOPcuXPk5OTw+9//\nntGjRzN69Ghqa2vJzc3l8uXL+Pn54eDggLOzM3fu3GmXb0qZx6qjULRxwYIFZGdnY2Njw9mzZ9m1\naxfr1q3D1taWUaNG8d5777F+/XqcnJyYNm0asbGx0mGOsvaTTCbj4MGDbNiwAWtra4qLi8nOzmbJ\nkiU8ffqUPn368PHHH5OSkkJTUxMhISHY29t3ekjav2Pz1q1baW1tpX///lhaWnaLKmnwn83HDRs2\nYG5ujqen5zOvoULFrwWVaKRChYoOpe1i3sbGhszMTI4dO8bYsWOBH3McRUZGsmbNGilR9vNAJpNx\n8uRJ3n//fd555x1mz56Nj48PSUlJpKenY2lpibe3N9bW1lhbW1NUVERYWFi3SOzYESgWRFlZWRw6\ndIg+ffowZswYnj59iqampiQcZWVlYWRkhIODA5qamtJnU1JSMDIyIjIystMXVwYGBpSVlZGTk4Oe\nnp5U1lsxV11dXenZsyeHDx+mqKgIb2/vdjkdOtv+jqIz+6FtCM/27dvJysqivLwcR0dH/Pz8MDY2\n5rvvvuPw4cPk5eWxbds29u7dy6NHj9iwYQOamprdPhSgrZjS1NSEuro6tbW17N+/nydPnjB37lxm\nzpzJ5MmTATh9+jSJiYl4eXlJ1aeUIdn8/0XbE/7jx49TXFxMVVUVFhYWyOVybGxsMDIyYsOGDdy6\ndYsBAwa084hQiJedecL/zTffYGFhIX030tPT+fTTT6moqGDUqFFSeGdgYCC1tbXk5+dz9epVfHx8\ncHZ2JioqqluJ0f8Xbdt49OhRVqxYwZ/+9Cf69OmDjY0N5ubmjBs3jgkTJuDr60tLSwuHDx8mNDRU\nOlD6qSeysqAQssrLy5kxYwbx8fFER0cjl8ulZPXTp08nOjoaIyMjjh49Sp8+ffDy8uoyNh87dgx/\nf/9Otbkj+W/mY0ZGBlFRUTg6Onau8SpUdDIq0UiFChX/NevWrcPJyUlysd64cSM5OTnSBgDA1taW\nffv2YWdnh4ODA01NTRgaGjJy5Eip8k1HIIQA/rGxbW5uJjU1ld69e/Pqq69y48YNXn75ZWJjYwkI\nCCAhIQFnZ2fc3d2xs7Nj5MiR3cLt+peiWFS2trZSVVXFhx9+SH5+Ps7OzkRERKCurt5OODp69Cgp\nKSl4eXlhb28PwOXLl1m4cCGzZ8/G3Ny8U9uhwMzMjKFDh1JdXc2SJUuIiorCxMSkXVLonj17cvv2\n7W6VmFZZ+kFxnYULF7J8+XJu3rxJfn4+hw8fZtCgQQQHBxMYGIiuri7V1dXY2dkxcOBAZs+eLVVJ\n+7UkvU5JSaGoqAg7OzsMDQ05efIkW7du5Te/+Q3Tp08Hfkxm/uWXX6Knp8eUKVO6hNdKW0Hrm2++\nYdWqVeTl5XHhwgXS0tIYOnQoPXv2lISj5ORkSktLGTx4cDuRqDPbmJOTQ3FxsZQHD37M/XXx4kXO\nnz+PXC4nMDAQdXV11NTUCAoKoq6ujj179tCjRw8CAgKk76Qyj1VHoWjj1q1bKSsrw9XVVQpFtLOz\nw8/PD0dHR2QyGXV1dXz88cc8efKE995777kWxOgIZDIZp06d4ty5c8jlcl577TXU1NRwdnamX79+\nBAUFoa+vz5MnT1iyZAlZWVm89dZbnRpC2hVt7kj+2/k4Y8YMpRQuVah4oQgVKlR0Oq2tre3+FUKI\nlpaWzjLn36KsrEy4u7uLGTNmiPv37wshhJg5c6b4zW9+I/z9/cWiRYvEsWPHhBBCjBs3Tnz55ZfS\nZ5ubm5/5//8GRT89ffpUeq2yslI8efJElJSUiIKCAtHY2CgmTpwoZs2aJYQQ4vz588LLy0u4u7uL\n1NTUX/T3uxNt55/i/zk5OWLcuHEiJiZGZGVlSb9/8uSJEEKIpqYm8dVXX/1sHO/du/cCLH42bb87\nd+/eFbW1tdLP1dXV4uWXXxZhYWHi6tWr0utJSUni4cOHz7xGV0UZ+kHx+dbWVtHY2CjeeustceHC\nBfH48WORkZEhxo0bJ0aPHi3u3r37T6/xS+8RXYm5c+eKsLAwsWnTJlFTUyOEECI9PV2MHj1aTJs2\nTSQlJYlNmzaJ3/3udyIuLk6673Wl+bpy5UoRFhYmCgsLhRBCLF++XLi7u4vhw4dL86C2tlYsX75c\n/OEPf1C6tinujXv27BEFBQVCCCEaGxvFn/70JxEfHy+SkpKk+6MQP45NSkrKr2oe/5SRI0cKd3d3\n8frrr/+sH548eSI2btwoXnnlFTFu3DhpTneF/po4caJwd3cXkyZNEo8ePRJCtH+O7t+/X3z00Uci\nLCxMnDt3rrPMbEdXtLmj6a7zUYWK54nK00iFik6m7QlzbW0tDx48QEdHR+kT7BkbGxMSEsKyZcso\nLy9n6NChDB06VCqRe/z4cTZt2sS1a9cwMTFh+/btREREYGZm1u7E5pee3shkMmpqavjwww8ZNmwY\nhw8f5t133yU6OhoXFxesrKwoLS3lwIED/OlPf8LExISHDx9SV1dHbGwsoaGhzywv+2tEcQqXkpLC\npk2bGDBgAA4ODtjZ2VFUVER5eTkmJibY2tq28zh6VtW7zkrw2bYdCQkJJCQksGbNGh49eoSbmxtm\nZmaEhIRw6tQpli1bhqmpKV9++SXFxcVdxmPj36Wz+6Htve3atWvcv3+f9PR0hg0bJoU02trakpeX\nx86dO4mNjUVLS0sKlxNtKvf9GkhNTWXdunUsWbKEQYMGYWBgAICLiwumpqbcvXuX5ORk7t27h6Wl\nJStWrEBTU5Pm5malfl60DQmpqalh/fr1vPHGG4SFhXHkyBH++te/8vLLL3P58mV27dolVa50dXVl\n7NixSpOnSbTxECorK+Nvf/sbJSUl0jwOCwujsLCQEydOIITAw8NDCqnr3bv3r6bakmjj3aj4/+TJ\nkzl79ix5eXn07t0bW1tbqR8UYZgmJiZ89tlnXcqzcNy4cVy4cIGTJ0/i6emJnZ1du+/i5cuXefDg\nAR999BG9evXqREv/QVe0+Zfwa5qPKlQ8T1SikQoVnYho466/dOlSFi1axObNm9m0aRPm5uZYWFhI\nlamUhTfffBMPDw+MjIywtrYmICCAJUuWcPHiRcLCwtDV1cXLy4v+/fszcOBA9u7dS01NDdXV1Tg6\nOhIQENDhG4D8/Hyys7PZsGEDGzduZPbs2fTt21f6fVlZGatWrSI+Ph4LCwvWrVtHeXk5n3zySaeF\nTykrT58+JTU1lVOnTlFdXU2/fv1wcHDA0tKSI0eOUFZWhqmpqSQctaWzN0Nt51VSUhLfffcdkydP\nxtHRkRUrVnDz5k18fX2xtLRk4MCBXLlyhYMHD2JkZMTatWvR0NBQis3pL0VZ+qFtstEvvviC7Oxs\nampqmDRpEvr6+shkMmxtbbGzs+PkyZOsXLmS8ePHS4JjVx+Hf4WijxX/btu2DSMjI15++WXpPQoB\nzdnZmejoaMaOHcvEiROl0F5l38y0FQ7v3buHmZkZOjo6eHt7c/nyZT744APefvttpk+fTm1tLfv2\n7WPr1q1MmjQJQ0NDpcrT1HY+Ghsbo6enR3FxMWfOnMHOzg47OzsGDBhAYWEhJ0+epKGhAT8/vw49\nJFF22o63EELKzQUQFxdHVlYWu3fvxsvLCysrK+m9Tk5O+Pr6SsKaMs7ptuJD2/vj8OHDOXr0KGlp\naT9rl7OzM4GBgVLFLZXNL5buPB9VqHjRqEQjFSo6EcUDfPHixWzYsIGZM2fy1ltvsW/fPjIyMhg6\ndGinVtj4KY8ePSI3N5eRI0dKD15ra2sCAwNZsmQJV65cISQkBG1tbXR1dbGwsGDYsGGEhYXx5MkT\nUlJS2m0KOwonJydu3LjB3r17cXBwYObMmfTo0UPacFlYWFBRUcHcuXPJyMjgyJEjLFy4ECsrqw61\noyvyU3FAXV2dPn36UFdXR05ODpWVlYSEhODk5ISlpSVZWVnk5eXh4eGhdIKboh0XL16koqKC+Ph4\nxowZQ2hoKIGBgXzzzTfU1tbi4+ODmZkZMTExREZGtqvIpMweG/8und0PbefU4cOHSUxMZNasWVha\nWlJRUcGuXbsYP3685IVhY2ODqakpLS0tHZrnTJlpK4Rcu3YNuVzOtm3bkMlkvPTSS5JHipqaGk+f\nPiU7Oxu5XC5VslNcQ5nna05ODmlpaQQHB/Ppp5+yb98+YmJicHFxwcDAgB07dtCjRw/efPNNNDQ0\nqKqqQkdHh4CAAKkSHHS+ePjPBFR3d3fU1dUpLCzk7NmzknAUHh7OoUOHaG5uZvDgwZ1u/4ui7QZ9\n3bp1bNiwgZUrV6KlpYWenh5yuZyxY8eyf/9+UlNT8fLywtLS8mffd2X8/ivEl+PHj5OcnExycjJa\nWlro6OhgYGDwf7ars76jXdHmjqQ7z0cVKjoDlWikQkUnc+fOHRITE3n33XcZOnQoeXl5bNmyhf/9\n3/8lPDxcevALJSg5q6mpyaBBg1BXV+f7779HJpNhYWHxM+EoNDQULS0taVMjl8vx9/dn37592NjY\n4OLi0iH2tO2T6upqXF1defDgAampqfTv3x+5XE5zczOampr079+f3r174+zszAcffICrq2uH2NDV\naSswKE4We/TogY+PD7W1tZw4cYLKykr69euHk5MTRkZG1NfXM378+E6fj8/izJkzjB07lvz8fCIi\nIujVqxetra3Y2dkRHBzM/Pnzqaurw93dHblcjoGBgVJUZOpoOrMf2oY5NjQ0SJX3AgIC8Pb2JjMz\nk02bNrUTjhwdHRk0aNCvIoSn7X3rb3/7GwsXLmTatGncunWLpKQkhgwZ0u6U//79+6xcuRIjI6N2\nFXyU8fun4PHjx6xZs4YTJ07www8/kJOTw7x589qFAqelpVFYWMhvf/tbWlpaSExMxMPDQ0o6qwzz\noO3Gc+/evaSnp3PhwgWEEFhZWeHu7o6GhganTp1qJxzFxMRIAqgyPLtfBIo2zp8/n6SkJEJDQ7G3\ntycxMZHHjx9jbm6Oqakp48aN4+DBgyxfvpzo6GjMzMw62fJ/jaJE/YwZMzAzM0NXV5fVq1fz+PFj\nzMzMpHYdOnSI1atXExwcjLW1tcrmTqQ7z0cVKjqFF5c+SYUKFc/iypUrIiwsTDx48EAcPXpU+Pv7\ni40bNwohfkyuuXr1alFfX9/JVrbn6dOnYvTo0SI8PFycP39eej0/P18EBgaKGTNmPNPmoUOHii1b\ntnSIDYrEjbm5uSI9PV1KPLp//34xdepUMWXKFHHjxg3p/WfPnm2XnFTFP9i3b58YPnz4z8amvr5e\n/OUvfxGhoaFi4cKF7ZKNC6G8yXe3bt0qvLy8xJw5c6QxV9ian58v3N3dxeLFizvTxBdCZ/ZDXV2d\nGDRokHB3dxcLFiyQXm9paRFFRUUiLi5OxMXFicePHz+Xv98VuHDhgvjjH/8o8vPzhRBCNDQ0iFdf\nfVWEhoaKgoICcePGDXHt2jXx2muviXHjxnW5RKyPHz8WY8eOFe7u7uKvf/2r9HpTU5MQQoijR4+K\nESNGiKioKDF69GgRGxsr/a5tYt7Ooq0NX3/9tejfv7/44x//KEaPHi2mTp3a7n65a9cuMW3aNDFl\nyhRRVlYmva6s98jnxQ8//CCio6PF6dOnhRBCnDlzRri7u4v+/fuLjz/+WJSUlEjvnT17dpeZ06dP\nnxaRkZHtxtzf31+EhISIWbNmtWvXa6+9Ji5fvtwJVranK9rc0XTX+ahCRWeg8jRSoeIFItqcOCpC\npwwNDcnMzCQ3N5elS5fy0UcfMXHiRABu3rxJYmIi5ubmODs7d6bpEuL/ew/FxcWRm5vLxo0bCQ4O\nxszMDGtra/r06UNiYiKFhYUMHjxYysmUlZXFpk2bmDFjxi9OPK3ox/T0dGbOnImuri5ubm7I5XJc\nXFzQ19fn9OnT7N27Fx8fHzZu3Mjf//53Ro0ahY6OTkd0Q7dCV1dXOilvbW3F09MTAC0tLVxcXNi+\nfTvnz5+nR48e+Pv7K03J6H8WNuLp6YmhoSEJCQno6Ojg5+eHuro6ra2t2NjYMHjwYIYOHdrpXgwd\nhTL2g46ODn379qW8vJzi4mKGDRuGrq6u5J3o7e3N1q1bKS0tZejQoR3+95WdH374gWXLlgHwyiuv\nIJPJ0NbWplevXlRXV7NgwQJ++OEHDh48SEtLCxs3buxSObeam5u5f/8+5eXlODg4UF5eTm1tLUFB\nQdJ8s7S0xNnZGUNDQ1xcXJg/fz4aGhpK4WEE//BU+P7779m6dSuLFy/m1VdfBWDLli1UVVXR2tqK\nr68v7u7uNDc3I4Rg1KhR3Sqh/r9LS0sLFRUV9OrViyFDhpCRkcH//u//8te//pX+/fuTkJCAmpoa\nRkZGWFhYSCGIyjLe/wwhRLsS9deuXWP06NHExcUxYsQIFi9ejEwmw9jYGAsLC0aOHNnpJeq7os0d\nTXedjypUdBYq0UiFihdEWzf3xMRE8vPz6d27N5qamly9epW0tDQiIiKYMWMG8GP+oD//+c+oqanx\n9ttvd9pD7KebFIVg0KNHDwYPHkxWVhabN29uJxx5e3tTWFjImDFjpM8+evSIV155pV14xX+LIk7/\n3Xff5aOPPuIPf/hDuwWPi4sLFhYWnDx5ktWrV3P58mUWLlzYIX+7q/OsTaeBgQF9+vQhLy+PwsJC\nAEk4qqmpoba2llGjRklVtZRhI9T2+7RlyxZ27tzJ3r17efz4MVZWVgQHB2NgYMC8efPQ1tbG398f\ndXV1hBBSBT+FcNuVUbZ+WL58OUVFRfTp0wdTU1N8fHw4dOgQqampxMbGoq2tjUwmw8zMjMjISMaP\nH9/lx+A/RQhBWloaxcXF1NXVMW3aNDQ1NQEwNTUlNjYWLy8v+vXrR2RkJDNmzJAq+ChzCGXbe4ua\nmhp6enpER0fTv39/SkpKOHHiBHfv3iUoKAj4MW+KtrY20dHR9O3bV9qwdXYb27bj0aNHHDhwgPDw\ncGJiYjh48CBffPEFr7zyCo8ePeLQoUNS8QcvLy8iIiLaJTfvzoifhM6rqamho6NDr169ePToEZ9+\n+ilTpkxh0qRJ2NnZsWPHDgoLC7G3tycgIEC6jrJ+/9sejvTo0UM6kPrzn/+Mm5sbH3/8MT4+PuzZ\ns4e8vDy0tbWledxZY98Vbe4ouvt8VKGis1GJRipUvADabuyqqqrYs2cPGzduxNTUlICAANzd3bly\n5QqlpaVkZGRw6tQpVq9ezZ07d0hKSuq009efbkhTUlJITU3FwMAAe3t7evToQUxMjCQc9e3bFzMz\nM+zs7KTTVoXdpqamGBoa/ld2pKSk8OTJEylxdWtrK9u3b8fGxoY33niDBw8eUFRUREJCAhkZGair\nqzNw4ECioqIIDw/nd7/7XYflUerKtB1PRbL14uJitLS0cHZ2JigoiPz8fAoKCqisrMTAwIBvv/0W\nIyMj3nzzTaU5hRNtkgh//fXXrF69Gnt7ey5evEheXh4nTpwgPDyckJAQ5HI5CxYsoKmpiX79+nWr\nSkbK2A9Hjx4lISEBIyMjfH19MTExISgoSEo2OmzYMEk4MjY2Vpo59Tz5qYAgk8kICgpCCMGpU6co\nLS0lJCQELS0tqS8cHR1xc3PD0dGxS1TwaXtvSU1NZc+ePWRnZ6Ouro6Liwv+/v5cuXKF/Px8bty4\ngbe3N7///e+5ePEi0dHR0nWUYR4oxio1NRUNDQ0CAgLw9PTkxo0bfPTRR7z66qtMnz4dAwMDUlNT\nKS4uxtzcvF158q6+Af9XtB3vBw8e8PDhQ3R0dDA0NERfX5/q6mp2797NhAkTsLGx4datW9y9e5dp\n06YpvVCsEB2ampoAJI9wY2Nj7t69S3JyMvHx8Xh4eNDQ0EBJSQkxMTGMHj26XaJ6lc0vju48H1Wo\nUBZUopEKFS8AxQP5q6++YtmyZZibm9PS0sKuXbvo0aMH4eHh9OvXD7lcztWrV1FTU8PT05P58+ej\nqanZaWWVFXbPmzePpKQkLCws0NXVZe7cuZiamuLk5ISenh4xMTEcO3aMhIQEYmNjMTIykq7xSx7G\nQggqKipITExk5MiRkugkk8nYs2cPOTk5hIaGMnfuXE6cOMGjR4+4efMmBQUFDB48GCMjI6ysrNDX\n1/9lHdFNaDsPV61axe3btzl37hxLly7F2NhYqq5VVVVFeno6aWlpaGtrs3DhQsk7RRkWV4p25Obm\nsnz5chYvXsyUKVOYOHEiurq6FBYWUlBQwMCBAwkMDERTU5Njx44xduzYLr84bktn98OzvClCQkLo\n0aMHX3/9NT179pSEo+DgYA4cOMCqVauYMGGCFLYKyiEUPC/abmZOnz5NdXU11dXV2NnZ4evrS2tr\nK/n5+ZSVlREcHIy2tvYzPb+UvY/a3lvWrFlDc3MzVVVVJCYmAhAREYGvry/Xrl3jwIEDUiGFxYsX\nd7pnkYK24uWKFSv4+9//zoQJE7Czs8PQ0JDDhw9TXl7OBx98gJaWFmVlZdy/f58RI0YwduxYpR+j\njqLtnF6xYgVLlixh48aN7Nu3D0dHR0xMTLh+/TqbNm3C3t6eJ0+ekJCQQH19Pe+9955SC8UK8SU7\nO5sFCxawefNm0tPTcXV1xcDAgLq6OpKSkqSft23bxokTJ/j00087LYFyV7S5I+nO81GFCqXiRSVP\nUqHi187+/ftFQECAKC4uFk1NTeLBgwdi2bJlwt3dXSxfvvyfJv7s7MR827ZtE5GRkeLMmTNCCCFy\ncnKEu7u78PLyEitWrBCNjY1CiB+TuH7++efPxd6GhgYhxI/JrHNzc4UQQty4cUOMGjVKBAcHi3ff\nfVdkZmYKIYQoKCgQsbGx4vr16x1uR3cgPT1d9OvXT5w+fVo8ffpUNDQ0iCVLlghPT0+RmpoqhBDi\nwYMH4vr16+Ls2bNSIldFgtrOJCMjQyQnJ0s/p6WliQEDBoibN29Krz158kSsX79eDBs2TFy9elV6\nXfH9UoYEu78UZeuHmpoaIUT7pL+JiYnCw8NDJCUlSa+dP39ezJw5s9PvaS+Ktn28YMECMXToUBEX\nFycCAgLEn/70J1FTUyOamppEYmKiGD9+vPj000+VrujBv0JxbxZCiMzMTBESEiI9K4QQIjk5WXh4\neIi1a9cKIYS4d++eKC4uFvv27ZPmgTLcW9q24/Lly+Lbb78VBw8eFEL8Yxy3bNkiYmJiRFZWlnj0\n6JGYPn26WLBggfT7X8u8VrBw4UIRGhoqduzYIcrLy0VERIQYM2aMVIAiISFBBAUFiUGDBokJeays\nzgAAIABJREFUEyZIhRSU6R78rETlBw8eFH5+fmL+/Pni8OHDYuTIkWLQoEFSgvNFixYJHx8fMWjQ\nIBEWFibOnj2rslkJ6A7zUYUKZUYlGqlQ8Rx41kNo8+bNYsyYMaKpqand7xcuXCg8PT1FUlKSePDg\nwYs081/y5MkTsWLFCrFp0yYhhBCHDh0SAQEBIiUlRSQmJgovLy+RlJTUbsEtxC9fPD+r/+rq6kR8\nfLx45ZVXpGpDQoh21S+E+LHKzaRJk8T9+/d/kQ3dhczMTFFZWSn9/N1334mpU6cKIdr389y5c0Vo\naKgkALRFGSoAFRUVCXd3dxEdHS2+//57IYQQeXl5IioqSpw6dUoI8Y/23L17V3h5eYldu3a1u0Z3\nWBwqQz8cOXJE1NbWCiGEOHDggHB3d5fE3LZzZeHChcLLy0ukpKT87G/+mjbYa9asESEhIaKoqEgI\nIaTDgpMnTwohfhRNli9fLqKjo8XKlSs709T/iG3btokPP/xQOjjYvn27iI+PF0+ePGk3vitXrhT+\n/v6ioqLiZ9dQhnmgaMfDhw9Fdna2cHd3F4GBgSIjI6Pd+86fPy+mTJkiIiIiRFRUlIiLi/tVbTz3\n7dsnCgoKhBBCVFVVifj4eOmw5tixYyIgIKCdmC3EjxUCy8rKlOrw4adUVFSIwsJCIcSP98xJkyaJ\n5cuXCyGEuHPnjoiOjhazZ89u95nc3FyRn5//zOfli6Ar2tzRdNf5qEKFsqLyxVOh4jkghPjZazo6\nOly6dIm6ujpkMhnNzc0AUj6HuXPnsnv3buBHd9vO4Pr165w5c4akpCTy8/NpaGhgwoQJhIaGUlVV\nxYIFC3j77bcZM2YMYWFhAHzxxRdkZGS0u84vCTdQhLw0NjZy69YtMjIyKC8vRy6XM2vWLB48eMDa\ntWvJzc0FwM3NDYD8/Hy++uorNm/ezF/+8pf/On9Sd+Lx48f8/e9/Z8qUKVy7dg34MczlwoUL1NfX\nSzmnAAYNGoSamhr/j737jq/x7v84/j4yCEKECBkIKggiRtVetatWuc27DR1G6a9WjRrVu1ZvalXR\nlrZEtVSj1n1rqT1qj6iVUjHuSAixEznn90fkVHrUalzn5OT1fDzOg1znOtfn871ynfXJd1y+fNnm\nOI7QbTsxMVFubm4qVqyYfv75Zy1cuFCVK1dWzpw5NXXqVMXGxlqHyNy+fVvFixe3WaXPGYam2fs8\nXLt2TRMnTlT79u116dIl1axZU82aNVOvXr20c+dOZcuWzfr69fzzz8tkMmnYsGFas2ZNuuM4ypAk\nIxw6dEh9+vRRaGioVq9erc8//1wjR45U5cqVdfPmTbm6uuqVV15R3759FR4ebu90H8miRYs0fPhw\nNWnSRDlz5pSU+js9duyYLl++LBcXF+v8KvXr11euXLkUFxdncxx7Xwf3tsPDw0PVq1dX7969de3a\nNZ04cSLde3mZMmU0YsQIDR8+XL1791ZkZKR1+LgzvLY8iNls1syZM7Vx40ZJqa9DCQkJqlu3rjZs\n2KA+ffpo0KBB6tixo65du6aFCxdKkkqXLq0SJUpYXxcccV6usWPHav78+ZJShygmJiaqTZs2io+P\n14svvqiaNWsqbSaP1atXS5KeffZZValSxTrPIjkby5mvR8BRMacRkMGWLVummTNnqmjRonJ1dbUu\n8V6gQAHt2bNH27dvV6VKlZQ3b15J0o0bN2QymVSzZk1NnjxZDRs2tMs48//85z+aPn26IiIitGXL\nFi1ZskSbN29WmTJlFBISosOHD2vr1q3q1auXvLy8lJCQoOzZs+uf//ynmjZtmiGFhbSx6SdPntT4\n8eP16aef6ptvvtGiRYu0ZcsWNW7cWPXr11dkZKROnjypggULys/PTzExMVq6dKn27t2rGTNmqHTp\n0hlwRjI/V1dX1apVS7/88osiIiJUv359BQQEaMeOHTp9+rTKlCljne8pbZWghg0bytfX186Z2ypa\ntKhOnTqlCxcuqEiRItq4caPy5Mmjnj17as6cOdqyZYtu376tS5cu6aOPPtLt27fVv39/hyh4ZSR7\nnwd3d3dVrVpV27Zt0+LFi9WyZUs1b95c0dHRmjp1qipVqqSAgABJ0tWrV+Xu7q5OnTqpSZMmTve7\nuJ/t27dr6dKlWr9+vW7duqXixYtr4sSJaty4sRITE/XWW29p4MCB6ty5s5KTkzVz5kylpKQoKChI\npUuXzhTzayxbtkyjRo3SrFmzVK9ePeucKl5eXtq7d6/27NmjsLCwdO9xq1atUoMGDeTv72/n7P/w\n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\n5k0tXLjQYYopD/LFF1/o/fff16xZs/Tyyy/L19dXn376qWJiYtSwYUO5uLhYC0elSpVSy5Yt1axZ\nM7Vt21Zdu3a1Xgf2LuI+rB33KxydPn1aO3bsUNu2be2au5HWr1+vnj17avfu3dq+fbv12jx58qSe\ne+455c+fX97e3qpQoYJcXFy0c+dOJSUlqXjx4po2bZp1ridHeg02mUyKiYlR7969deDAAUVFRSlP\nnjxydXXV8ePH9cwzzygwMFDe3t4qX768rl69qrVr1+ro0aPKnj27Jk6caHjhMDPm/DQ44/UIZDYU\njYAMVqRIEcXFxWnfvn1q0KCBsmXLphEjRig0NFRVq1bVsWPHNH78eAUEBKhOnTras2eP5syZo2XL\nlmnWrFkqXry4YbneuXNHv/76qy5fvixfX18FBATIZDJZCzYmk0klSpTQ2rVrdeXKFTVr1kz+/v7y\n9/fP8Pkcrly5Yi2qFS5cWH5+fja5FCtWTLt371Z0dLTatWunkiVLqnHjxsqXL1+G5JDZ3b59W+vX\nr9f+/fsVFBQkX19f9evXT7/99pvmzJmjUqVKqWbNmlq7dq0WL16sWrVqKTg4WPny5XOoQktKSoqO\nHDkif39/mUwmubm5aezYsdYJ0s+ePavAwECVL19ezzzzjA4cOKDbt2+rfv361r8iOsNfEx3hPJjN\nZh08eFDe3t7y8fFRQECAZs+erVWrVmnTpk26efOmatWqpU2bNmnDhg2qV6+eihQp4nDX1NN07+to\nwYIFrXM67d69W7t27VKnTp1UtWpVlS5dWiVLllTBggVVv359DRs2zGGKKQ+TlJSkWrVqqXHjxpKk\nYsWKqUiRIpozZ066wlFajwhJ8vb2lqenp0NdB4/Sjj8Xjho2bKg2bdo4xWvKozKZTCpSpIh12M/W\nrVv1zTffKCYmRiaTSXXr1pUk5cuXT5UrV1b79u3VvHlz1a5d26Hnerp8+bJu3Lih8+fPa8+ePVq5\ncqUWLFigU6dOydXVVQ0bNpSUeu3WrFlT//jHP9SuXTs1btxYBQsWJGc7cdbrEchMTJb7LfME4G+J\njIzUt99+qxkzZqhHjx7KkSOH5syZI09PT924cUO7du1SjRo15OrqqmPHjmnt2rVq0qSJoQWjNL//\n/rvGjBmjlJQU9enTR1WrVpX0x3wGt27dUqdOnVSjRg0NGjTIrrlIUp8+fZSSkqJZs2Y91Vwyq7Rz\nKKVOQHvr1i1Nnz7d+kVWSl0l75VXXlGZMmWs8404mpMnT2rSpEm6ffu2evToIYvFoiVLlujixYva\nvn27atasqdmzZ8vV1VWxsbHy8fFJV2B0Fo5wHk6dOqUPP/xQt27d0qBBgxQQEKCjR49q4cKFiouL\n06FDh5Q3b16dP39enTp10qhRozIkbmZy72vXyJEjFRsbqzfeeEMTJ05U06ZN//JxKSkpDlFMeVT3\nXle3b9/Wf//7X40cOVItWrTQBx98IClztOlR2vHnYl5ar9es6NatWzp79qx27NihqVOnqkWLFho5\ncqSk1EKcu7u7nTN8MrGxsYqNjdX27ds1b948NWvWzOHblRlzzmjOej0CjoyeRsBTULp0aS1atEjj\nxo1TUFCQPv74Y+tKMm5ubipatKj1r5k+Pj4KCwtT/vz57ZKrl5eXQkNDtWnTJu3YsUMBAQHWeY1M\nJpNOnjypbdu2qWnTpipevPhT/VL+V7mYTCZZLBbFxcVp3bp1ql27tipUqOB0BYKMkHYOf/75Zx05\nckQDBw5U5cqVJf0xP4Knp6eaN2+uVq1aOeyXoHz58qlMmTLasGGDfvnlFzVt2lSdOnVSxYoVlZKS\notdff10FCxaUxWJR7ty5rb0ZHLU9T8oRzoOXl5fKli2rjRs3auPGjSpRooSqVKmiJk2aqE2bNipX\nrpzKli2r3Llza/To0Q5fMHga0p53mzdv1tKlS/Xll19q7NixatGihVJSUmQyme77WpXZrtd72+Dq\n6mrtqfPpp5/q7Nmz1t61ju5J2pEV32vS3mOzZcum/PnzKygoSN7e3po/f75iY2NVp06dTPl8T2tX\nrly5rPNVeXl56csvv1RcXJxDtisz5pzRnPV6BDIDikZABkt7U/Pw8NDJkyf17rvvqlixYvctcKR9\nKLX3h+w/F2v8/PwUEBCglJQU6xCKfv36/eUXn6eZS9pwOJPJpFmzZungwYPq27evddgDbHl5ealS\npUo6cuSIDh8+LD8/P+s5TCsc5cyZ0+GX986XL5/1i/j69evl7++vkJAQ1atXTwUKFLApjjjr9eAI\n5+HeHHbs2KHChQtbe68VKVJEZcuWVaNGjWyGKGUlaa9d27Ztk7u7u9q0aaNChQpZfzfOeH2mFVyK\nFi2qKVOmyN3d3VqkzkycpR0Z7c/DXN3d3RUUFCQfHx9NnTpVuXPnVsWKFe2Z4hP5q3b5+vpaV7St\n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\nV7VixQo1a9ZM/fr10+7du+3uNWnSJHXu3FnLli1TjRo1FBUVpQsXLqhkyZKaOnWqJGnVqlXauHGj\n3njjDdt1K1askLu7u+bPn6/hw4drzpw5Wr169Q3rTUhI0I4dO2xjCQkJ+uWXX9S2bdsbvs8jR45o\n9erVmjZtmj755BPt3r1bkydPth2fP3++RowYodatW2v58uWaOXOmHn74YUkZTa0+ffooOTlZc+fO\n1dy5c5WUlKQ+ffrIMAy7jG+//VYffvihpk6dqrVr16p3797atWuXPvnkE40ePVqfffaZvvnmG9s1\nQ4YM0c8//6z33ntPK1eu1HPPPafevXtrz549N3wvAAAAAID7g2EYLv1yZfmdXUBe0KpVK40bN04H\nDhyQt7e3NmzYoOHDh+v999+3nRMdHa3u3bsrPDxcktS/f3/FxcUpOjpa7777ru28rl27KjQ0VJIU\nFRWlpUuXavfu3apXr56KFCkiSfL19ZWvr69dDZUqVVL//v0lSRUrVtTChQu1efPmLGcUlShRQo0a\nNdKiRYtUs2ZNSRmNrmrVqqlKlSo3fJ9XrlzRO++8o0KFCkmS2rVrpy+//NJ2fMaMGXrhhRfUrVs3\n21j16tUlSZs3b9bevXv1zTffqEyZMpKk9957T82bN9fmzZvVsGFDSdLVq1c1duxYFSpUSJUrV1aj\nRo20ZcsWffDBB/L09FRgYKDq1Kmj2NhYPfnkkzp06JBWrVql7777zrYcsFOnTtq0aZPmz5+vt956\n64bvJysPf//pLZ1/N1Tdl3VzL7ftd0qqtP/UL05Kdo6Dp3dkf1Iecr+9Xw+/QNMzd52INT3TmbnO\nsuDQMmeXYKoTZ3Znf1Ie4j1gpumZiQNMj/wr+/RO54WbLHDn187JdUqq1PlojJOSnaPrkc+cXYKp\netxn7xeuiabRXVCkSBE1b95cixcvVqFChdSgQQO7/YzOnz+vpKQk1a1b1+66OnXq6IcffrAbs1gs\ntv/29/eXpBxtfH39dZnXJicn3/D8iIgIDR48WEOHDpWHh4eWLVumPn363DSjVKlStobR3zOSk5N1\n4sQJhYSEZHnt/v375e/vb2sYSVLZsmXl7++vffv22ZpGJUuWtMsoVqyYKlSoIE9PT7uxzNz4+HgZ\nhqGWLVva5aWlpenRRx+96fvJyh9Nuir9SNItX3e7qu5brd8qhZmWd73wP4+Znrn/1C8KLB5keq4k\n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\nNWuqa9eu+uOPP2z3+fLLLxUUFKTvv/9eLVq0UK1atdSrVy+dO3dOa9eu1RNPPKG6devqtdde06VL\nl2zXde7cWSNGjNDo0aMVHBys4OBgjRs3zm6G07Jly9SmTRsFBQUpJCREr7zyik6cOOHw+WzevFkR\nERGqVauWWrdurfj4+Jt+htu2bVOnTp1Uq1YtNWrUSG+++abOnz9vO/7zzz+rXbt2CgoKUt26ddW2\nbVv9/vvvtl+z2NhY27lHjx7V8ePH1a1bN7vxbdu2KT093a5pNH/+fDVv3lzVq1dX8+bNtWDBArtf\nb4vFopiYGPXt21e1a9fWpEmTHL4n0tLS9PLLL+u5555TcnKyJOnEiRMaMGCA7XN86aWXdODAAbvr\nZs2apccee0xBQUEaNGiQUlNTHe4NAAAAALhPWd1kuOhL1vv06Wn58uXTq6++qvnz5+vQoUN3dK+p\nU6dq6NChWrBggc6ePat///vfmj59ut5++23NnTtXf/zxh6ZNmyZJslqtWr16tcLDw1WiRAmHexUo\nUEAFChSQlLGM7tdff9WMGTO0cOFCeXl5qUePHnYNoLS0NM2ePVvvvvuuPv30U+3atUv9+vXT0qVL\n9f7772v69Olav369Pv/8c7ucFStWyDAMzZ8/XyNHjtSCBQs0Z84c2/H09HS98sorWr58uT766COl\npKQoKirKod733ntPAwcO1JdffqmiRYvq1VdflWFkvepx7969ioyMVGhoqJYtW6Zp06Zpz549Gjp0\nqCTpypUr6tOnj+rWratly5ZpwYIFeuGFF+Tu7i4po2mUmJhom4kVGxurGjVqqEmTJoqLi9OVK1ds\n42XKlFHp0qUlSd98843efvttvfDCC1qxYoW6dOmikSNH6rvvvrOrb9q0aWrSpIlWrFihDh062B07\nf/68IiMjdebMGc2bN0/FihXTxYsX1aVLFxUoUEDz5s3T/Pnz5efnp27duunixYuSpNWrV2vKlCnq\n16+fvvzyS1WsWFGzZ8/O8vMBAAAAAAA5lz83b96kSRMFBQVp0qRJWc4syan+/furXr16kqT27dvr\n7bff1pdffqlq1apJkp577jl99dVXkqSUlBSdOXNGgYGBN73ngQMH9N133+mzzz5TcHCwJGnChAl6\n/PHHtWLFCkVEREjKaLSMGDFCDz30kCQpPDxcn376qX788Uf5+vpKkpo2barY2Fh1797ddn9/f38N\nGzZMbm5uCgwM1IEDBzR79mx169ZNktS2bVvbuWXLltVbb72lsLAwHT9+3K7Z1b9/f9uMnj59+qhD\nhw46ceJElg2x6OhoPfXUU3Z1vPXWW3r22WeVnJwsd3d3nT17Vv/85z9Vrlw5SbL7nOrUqSMPDw/F\nxsbqueeeU2xsrOrXr68KFSrI29tb8fHxqlWrlmJjY+1mGUVHR+vpp59Wp06dJEkVK1ZUfHy8Zs2a\nZbchdVhYmO1zlWRrTp0+fVqDBg2Sv7+/pkyZYmvqrVq1SoZhaOzYsbYleKNGjVLDhg313//+V2Fh\nYZo7d66effZZtW/fXpLUu3dvxcbG3naj8sVNk2/rujsx8NBnpmdK0kCnpEpxxzY4Kdk5DqfscnYJ\nptp7Ms7ZJZhqwaFl2Z+UR+w88ZOzSzCVh9/N/xyRG/6XvN30TFfIdoaJB+abn2l64l/OXUhwYrq5\nrqbnjW0ocurSpTv7x/l7zYkzu51dgqmupB1xdglA7jaNJOm1117T888/r8jIyNu+h8Visf13sWLF\nJEmVK1e2G8tcznSjWTh/t3//fuXLl0+1a9e2jRUqVEiVK1fWvn37bGOenp62hlFmVvHixW0No8yx\n66+RpFq1atntNRQUFKQpU6bo/Pnz8vHxUXx8vG0m0J9//mk77+jRo3YNoevfu7+/vyQpOTk5y6ZR\nfHy8Dh48qDVr1tjGMj+PQ4cOKSgoSK1bt1ZkZKRCQkIUEhKiJ598UqVKlZIkeXl5qXbt2ram0ZYt\nWzR69GhJUv369RUbG6vAwEDFx8fbGkSSlJCQoDZt2tjVUrduXYeZRtWrV3eoWZIiIyNVtWpVTZ06\nVfnz//UtGR8fr8OHD6tOnTp251+8eFGJiYmSMn4dr2/ASVLt2rVvu2k0q+G/dfbwqdu69nYMPPSZ\n3ivXKfsTc8EX6QdNz4w7tkH1SjYyPVeSjl9Kyf6ku+xwyi6VKZr1931u8s7vZXqmlNEwsvjVMz23\n1gOlTc+UMhpG7co9Y3ru7ssnsj/pLtt54ifVCLj9fezuxLZdMaZnevgFKv3kftNzK1dpk/1JueB/\nydtVsVjt7E+8y54rVMX0TCmjYRRVob3pubNObsn+pFxw7kKCCnk/lP2Jd1lq2qXsT7rLrqYflbtH\nKdNzJcnDPdf/WuXg0qVD8vIqZ3pukQLepmdKGQ2jgCKPmJ6bfPGs6ZlSRsMov6e5f8YpX76M9v8R\nm/2J9yDDyHi5IletK1Ou/+5Ws2ZNPfHEE5owYYL69OljG8+Xz3FlXObyp7+7vpGQ2Yjx8PCwG8vc\nL8jX11eFCxfW/v23/4e965s912dnHrs+++/5OZGamqrIyEg1bNhQ48ePl6+vr1JSUtSxY0elp6fb\nnZvVe79RltVqVUREhLp27epwLCAgQJI0duxYvfDCC/rhhx/03XffadKkSZo+fboaNcr4i3yDBg20\nZMkSJSYmKikpSUFBQZKk4OBgffPNN7JYLLpy5UqONsH++wbdDzzwQJbnPf7441q7dq3++OMPPfLI\nXz8IrFarqlSpkuUstSJFimSbDwAAAAAAbl+u7Wl0vaioKG3dulUbNvy1LCVzpk5SUpJtbPfuO59u\nmC9fPoWFhWnFihU6fvy4w/HLly/r8uXLCgwMlNVq1fbtf03HPn/+vH7//fdsl7blxK+//mo362n7\n9u3y9/eXj4+PEhISlJKSYtvgOTAw8K48Za5q1arat2+fypcv7/Dy8vpr5kGVKlX00ksvad68eapf\nv76WLl1qO9agQQMdOXJEixYtUo0aNWyNnvr162vbtm368ccf9dBDD9lmPUnSQw89pG3bttnVsnXr\n1hx/jv3791f79u3VtWtXu++BatWq6dChQypatKjD+3nwwQclZSyv+/XXX+3u9/evAQAAAADArTOl\naVS+fHm1a9dOc+fOtY2VK1dOJUuW1LRp0/S///1PGzdu1AcffHBX8gYMGKCSJUsqIiJCixcv1h9/\n/KGDBw9q6dKlat26tU6ePKkKFSqoadOmGjFihOLi4rR37169+uqr8vHxUXh4+B3XkJSUpP/85z9K\nSEjQ2rVrFR0dbZsBVKpUKXl6eiomJkaJiYlav369pkyZcseZL774onbs2KERI0bot99+08GDB/Xf\n//5XI0aMkCQlJibq3Xff1bZt23TkyBH99NNP2rt3r11zp3bt2raNp+vXr28bf+ihh+Tt7a1Fixap\nQYMGdrk9evTQ8uXLFRMTowMHDmjevHlasWKFevTokePaBwwYoOeff15du3bVnj17JGXsH1WsWDH1\n6dNHW7ZsUWJion7++We98847tieodenSRUuWLNGCBQt04MABffTRRzSNAAAAAAC4C0xbfPvyyy9r\nyZIltq89PDw0ceJEjRw5Us8884weeeQRRUVFqWfPnnec9eCDD2rBggX6+OOPNWvWLB05ckQ+Pj6q\nVKmS+vTpY9vDZ+zYsRozZox69+6ty5cvq06dOvr444/tZuXcrvDwcFmtVrVr105ubm5q27atrWnk\n6+urcePGaeLEiYqJiZHFYtHgwYNvqcmSlSpVquizzz7T5MmT1alTJ1mtVpUtW1bNmjWTlLE87MCB\nA+rfv79SUlJUvHhxhYeH68UXX7Tdw9PTU0FBQfrpp58cmkPBwcFavXq1w9K0Zs2aadiwYfrkk080\nZswYlSpVSm+++abdJtg5ERUVJcMw9MILL2jOnDmqUqWKYmJi9N5776l///46d+6c/P391aBBAxUu\nXFhSxubaiYmJmjRpki5duqTQ0FB169bN7nsNAAAAAHD/sj3e3gW5al2Z3Iyc7hyNHOvcubMefvhh\n2wwf3DvYCDt3sRG2OdgI2xxshG0ONsLOfWyEbQ42ws59bIRtDjbCNgcbYd9dfzTupvQjSdmf6AQe\npf318A+znV3GDZmyPA0AAAAAAAD3FvNb4gAAAAAAACaxGm6yGq65DMxV68pE0ygXzJs3z9klAAAA\nAAAA3BGWpwEAAAAAAMABM40AAAAAAECeZRhuMlx0GZir1pWJmUYAAAAAAABwQNMIAAAAAAAADlie\nBgAAAAAA8ixDkmE4u4qsuWhZNsw0AgAAAAAAgAOaRgAAAAAAAHBA0wgAAAAAAAAO2NMIAAAAAADk\nWYbhJquLPtrecNG6MjHTCAAAAAAAAA5oGgEAAAAAAMABy9MAAAAAAECeZRhuLrsMzFXrysRMIwAA\nAAAAADigaQQAAAAAAAAHLE8DAAAAAAB5lmFkvFyRq9aViZlGAAAAAAAAcEDTCAAAAAAAAA5oGgEA\nAAAAAMABexoBAAAAAIA8y2q4yeqij7Z31boyMdMIAAAAAAAADphpBFxn3sXfdST1mGl5AyXNSI03\nLe96nvmc87//hauXnJL7oKf3fZN74cpl0zMzpVmvmJ75/ZnfTc90ZraPh5fpmZKUetU531eVq7Qx\nPfN/ydudkvv7nsWmZzozu3zlp03PlKSJkuaf2Wl6bnGvwqZnOjP7Qn5P0zMlqVhB53zOhT0KOiW3\njE9x0zOd9fNAktzzmT/n4aEiJUzPdFZ26UJ+pubh3kDTCAAAAAAA5FmGIRkuugzMMJxdwc2xPA0A\nAAAAAAAOaBoBAAAAAADAAcvTAAAAAABAnsXT024fM40AAAAAAADggKYRAAAAAAAAHLA8DQAAAAAA\n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\nCc+hddb38u97br6EPLd4+AUq/eT+7E+8y8pXftr0TCnjL52lilYzPbdAvru3/+OtcNb384Url0zP\nTDqzR/5FqpieK0mFPQqanrnv1DZVKl7H9NzUq875ueus/3d98pv/c1fKaBhV9qtrambpsiX1320r\nTc2E67uvmkb16tXT22+/rfz588vf39+2ebPValWTJk30+uuvO1xTrFgx238XLHhrPwxyet/8+e1/\nGdzc3GTk8A/J5cqVU7ly5RQREaFevXqpRYsW+uKLL9SvXz9FR0dr9uzZGjp0qCwWiwoWLKiJEyfq\n9OnTN7xfz549VaJECY0aNUoBAQFyd3dXy5YtlZ6ebnfeAw884HBtRESE5s6dq169emnx4sV67rnn\n7JphklS8eHGVL1/ebqxQoULZNo3KlCkjX19fffnll2ratKld885qtapv3752M58y+fr63vS+AAAA\nAAAga/dV0+iBBx5waFhIUrVq1bRmzRqVKlXqlp4C9sgjj8hqteqnn35ymFFzJ/f9Ow8PD129ejXb\n88qUKSMvLy+lpqZKkrZt26Z//vOftqVchmHowIEDtj2X/i4lJUUJCQl68803bbOn4uPjdeXKlRzV\nGR4ervHjx+uzzz5TfHy8Jk6cmKPrcqJIkSKaMWOGunbtqpdfflnTp0+3NY6qVq2qhISELH9tAQAA\nAAD3N+u1lyty1boy3dcbYWfq0KGDzp07pwEDBujXX39VYmKiNm3apOHDh+v8+fM3vK5ixYp66qmn\nNGzYMH311VdKTExUXFycli5dekf3/bvSpUtr586dOnz4sE6fPi2r1aqpU6dq/Pjxio2NVWJion77\n7TcNHTpUqampCg0NlSRVqFBBmzdvVlxcnPbv369Ro0bp8OHDN8wpUqSIihYtqoULF+rgwYPasmWL\n3nzzTYeZUDdSuHBhtWjRQu+8846Cg4NVoUKFHL/HnPD19dWnn36q48ePq2/fvrbNuV9++WWtXLlS\nU6ZM0e+//679+/dr7dq1Gj9+/F3NBwAAAADAFcTExCg0NFQ1atRQ69atFRcXl6Pr4uLiVLVq1Zs+\nsfx6NI2UsWH0F198oXz58qlHjx5q2bKlRo4cKU9PT7tlUFkZP368WrVqpdGjR+upp57S4MGDbQ2h\nO7nv9bp37y4PDw+1bNlSISEhOnr0qIKDg3X48GENHjxYYWFhioyM1OHDh/XBBx8oODhjz5jevXur\n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\nEE2dOlVubpkbM4cOHapKlSrptddee6B5N0tLS5Onp2e2XR8AAAAAgIeRS6408vb2tj7y589/22O/\n/PKLIiIiFBgYqODgYA0dOlSXLl2SJI0fP14JCQlasWKFdYXS9u3bJUmjR49W06ZNFRgYqEaNGmnC\nhAlKS0u7ZS1ubm6qWbOmtmzZYj2WlJSk4sWLq1mzZjbHt2zZorx581qbS9evX9eHH36okJAQBQQE\nKCwsTGvXrrWeb9lm9u233+rVV19V5cqVtWjRIrsazp49q9atW6tbt266evWq3fa0devWyc/PT1u2\nbNELL7ygKlWqqE2bNvr1119trjN37lzVr19fVapU0RtvvKHp06dba3Vzc9Po0aO1e/duzZ49W5I0\nb948bd++XWPGjLE2kc6dO6fBgwcrODhY1atXV/v27bVv3z5rxunTp/XWW2+pXr16qlKlilq0aKGl\nS5fa1PHCCy9o9OjReueddxQcHKzIyEhJ0vTp09WkSRMFBASodu3a6tat2y2/JgAAAAAAIGsu2TS6\nG5cuXVJkZKQKFSqk+Ph4TZw4UZs3b9aIESMkSd27d9czzzyjhg0bKjExUYmJifL395ck5c+fX2PH\njlVCQoKGDRumBQsWaMqUKbfNCg4O1k8//aSMjAxJmc2hmjVr2jWTtmzZoqeeeko5c2YuAIuLi9OM\nGTM0aNAgLV68WHXr1lWPHj2UnJxsc/33339fHTp0UEJCgkJCQmw+d/LkSbVr106+vr765JNP7rjK\nasKECRo8eLC++eYb5c6dW/3797epbdSoUerQoYMWLVqkOnXq6NNPP7V5/mOPPabhw4dr/Pjx2rRp\nk8aMGaNhw4apePHikjKbYJGRkbp06ZKmTJmi+Ph4VaxYUe3bt9e5c+ckSVevXlVQUJBiY2O1ZMkS\nvfTSSxowYIC1YWcxb9485cuXT3PnztXIkSO1detWjRs3Tn379tWKFSs0ZcoUh86VAgAAAAA4B7OT\nP5yZS25PuxsLFy6UyWTS2LFjrY2UESNGqEuXLoqKilLx4sWVK1cuXb9+3W4rV8+ePa0/L1mypI4c\nOaL4+Hh17979llnBwcG6fPmy9uzZoypVqmjLli1q166dnnrqKe3fv19//vmn8ufPrx9//FFdu3a1\nPm/q1Knq2rWrQkNDJUn9+/fXjz/+qKlTp+rf//639byOHTuqcePGdrnJycmKjIxU48aNNXToUOtq\n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\n06YPLPd+vfTSS6pevboGDhz4wK+dnJys0NBQLVmyROXLl5ckjR07VitWrNDixYuVL18+67l79+5V\nmzZtNHHiRDVu3PiB1wIAAAAAAO5ftjeNEhMTrT9fs2aNhg0bZnMsd+7ct3xeenq6PDw8srx+/vz5\n77mmggUL3vNz7qRVq1Y2TY/evXurZMmSioqKssn08PC47et1ZX369NH69esVExOjmJgYSVJaWpoG\nDhyoFi1aZGvDKC0tTZ6entl2fQAAAAAAXFW2b0/z9va2PiwNnr8eS05Olp+fn7799lu9+uqrqly5\nshYtWqTU1FT17t1b9erVU5UqVfT8889r8eLFNtf/6/a0l156STExMRo7dqxq1qypp59+Wu+//77N\naqS/bk97+umnFRsbq8GDBysoKEj169fXV199ZZNz4MABvfLKK6pcubJCQ0O1YcMGVapUScuWLVPu\n3LltXpOHh4dy5cpld+yv29PGjx+vF154QfPmzVODBg0UFBSk4cOHKyMjQ9OmTVO9evUUHByscePG\n2dR/7do1jRkzRvXq1VPVqlXVpk0bbdq0yfr5tLQ0jRw5UnXr1lVAQIAaNGigDz/88K6/ZqNHj1bT\npk0VGBioRo0aacKECUpLS7N+/ujRo+ratatq1KihqlWrKjQ0VCtXrtS1a9cUGhoqSWrRooX8/PwU\nGRkpT09PjRs3TosXL9aaNWskSZMmTdKlS5c0dOhQ63WPHTumXr166amnnlJwcLB69OihY8eO2XwN\nunbtqtq1aysoKEitW7fWxo0bbWoPDg5WbGysoqKiVK1aNQ0fPvyuXzcAAAAAwPWYlXlre2d8PPTb\n0+7F+++/r0GDBsnPz0+enp66evWqqlatqq5duypfvnxat26dBg0apBIlSuipp5667XUWLFigyMhI\nzZs3Tzt37tTAgQMVGBioJk2a3PY5U6dO1VtvvaVu3brp+++/17///W9Vr15d/v7+ysjIUI8ePVSq\nVCnNnz9fly5d0ujRo2Uymf72az506JA2btyouLg4HTt2TG+++aaOHz8uHx8fTZs2Tb/++qv69eun\nGjVqqEGDBpKkqKgonTlzRhMmTFDRokW1atUqvf766/rPf/6jsmXLasqUKVq3bp0mTpyo4sWL6/ff\nf9fRo0fvuqb8+fNr7Nix8vb21v79+zV8+HDlzp1b3bt3lyQNHz5cHh4emjlzpvLmzauDBw9aG2Wz\nZs1Su3btNGPGDPn6+lpX+VSsWFE9e/bUsGHDFBMToylTpmjq1KnW7WoXL17Uq6++qvr162v27NnK\nkSOHJk+erMjISC1ZskSenp66cuWKGjdurH79+snDw0OLFi1St27d9O2338rHx8da/xdffKGePXve\n86wrAAAAAADwf07VNOrYsaPdVqUOHTpYf96uXTtt2LBBCQkJd2waVapUST169JAklSlTRnPnztWm\nTZvu2DRq2LChwsPDJUmRkZH66quvtHnzZvn7+2vNmjU6ceKE5syZo8KFC0vKbNzcXNvfERMTo7x5\n86pcuXKqXbu2fvnlF33++efKmTOnypYtq2nTpmnLli1q0KCBDhw4oO+//17r169XkSJFJGW+b4mJ\niZo3b54GDx6sEydOqGzZstb3yMfHR9WrV7/renr27Gn9ecmSJXXkyBHFx8dbm0YnTpzQiy++aJ1X\nVapUKev5jz76qKTM7Xje3t4213399de1Zs0ade3aVe3bt1fNmjWtn1u4cKEKFCigUaNGWY+NHj1a\nNWrU0KZNm1S/fn0FBgYqMDDQ+vk+ffpo1apV+u6772y+FvXq1VP79u3v+vXeLHH7t/f1vL8j5cwO\nwzMdKTn1Z0eXYKjDZ3c6ugRDPWy/no+e3eXoEgxz6Mx2R5dgqIuXDzq6BEM9bF/fU3/udXQJhvLw\nLmt45oHUJMMzHZnrKA/b/7sP05+70sP39YVzcqqmUUBAgM3HGRkZ+uyzz7RixQqdOnVK6enpSktL\nU7169e54nb8O3y5atKjOnDlz3885ePCgfHx8rA0jSapSpUqWr+dulCpVSnnz5rV+XLhwYT3xxBM2\ng7oLFy5srWX37t0ymUx2DbCbZ/e0bt1anTt31rPPPqt69eopJCRE9erVk5ub213VtHTpUs2cOVNH\njx7VlStXlJGRYTNf6rXXXlNMTIxWr16t2rVrq2nTpqpYsWKW13V3d1fXrl3VrVs3a1PPYs+ePTpw\n4ICCgoJsjl+7dk1HjhyRlLka6aOPPtL69euVmpqq69ev6+rVqzp58qTNc/766+he1K36nI4dPXHf\nz79XKWd2qEzhB/Nr6V65uxl/88Tk1J9VtkhQ1idmgwzTdcMzD5/dqdKFArM+8QG72//XHzRH/Xq+\nbv77qz7vx9Gzu1SqUGXDc3O6uRueeejMdvkWrmp4riSlXr1geObFyweV/5EnDM8tktvL8EzJcV/f\n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\n6tSpo5kzZ95yrtGFCxfk5eWlJ554Qr///rtOnjxpsz3tzJkzKleu3N29QXewY8cOu48tK4B27dol\ns9msQYMGWZt033///X3lvPTSS/rXv/6l2bNn69q1a3ruuef+XuEAAAAAAJdglvPepczZ5wUxCPsu\nRERE6Ny5c+rbt6927typo0ePasOGDRo6dKiuXr0qKXNlz+LFi5WcnKydO3eqb9++8vTMejvMlClT\ntGzZMiUnJyslJUXLli1T/vz5VbRoUS1atEgFChRQ8+bNVb58eZtHkyZNrAOxS5TIXEK/du1anT17\nVpcvX5aUOS8pIyNDL774opYvX65Dhw4pOTlZs2bNUsuWLSVJ9erVU9myZRUVFaXdu3dr586dioqK\nUmBgoGrWrPm337ukpCR98cUXSklJ0Zw5c7RkyRJ16NBBklS6dGmlp6frq6++0tGjR7V48WLNnDnz\nvnLKlSunwMBAjRs3Ts8995weeeSRv107AAAAAAAPM5pGd6FYsWKaM2eOTCaTIiMj1bx5c0VHRytP\nnjzWlUdjxozRhQsX1LJlS/Xr108vv/yyihXLeq9+3rx59cUXX6h169Z68cUX9dtvvykuLk65cuVS\nfHy8mjRpYrNVzqJZs2baunWrjhw5Ih8fH/Xs2VPjxo1TnTp1rHcfK126tL755hvVqlVL7733nlq0\naKEOHTpo7dq1io7O3HedI0cOffbZZ/Ly8lJERITat2+v4sWL6+OPP34g713Hjh21Z88etWzZUp98\n8on69Omjxo0bS5L8/f01ePBgTZkyRc2bN9fChQvVv3//+85q3bq10tPT1bp16wdSOwAAAAAADzPu\nnoZsExISok6dOllXFmW3yZMna8mSJUpISLjvazAIO3sxCNu1MQjbGAzCzn4MwjYGg7CNwSBsYzAI\nO/sxCDv7ufIg7H51uynVSe+eVqSkt97n7mlA9rl8+bKOHTummTNnqlevXo4uBwAAAADgRExms0xO\nul7GWeuyYHsa/vFGjBih1q1bq0aNGmrTpo2jywEAAAAAwCWw0gjZZt26dYbkjB8/XuPHjzckCwAA\nAACAhwVNIwAAAAAA4LLMct5b2ztrXRZsTwMAAAAAAIAdmkYAAAAAAACww/Y0AAAAAADgskwyy+Sk\nG8GctS4LVhoBAAAAAADADk0jAAAAAAAA2GF7GgAAAAAAcFmZd09zzm1gzlnV/7HSCAAAAAAAAHZo\nGgEAAAAAAMAOTSMAAAAAAADYYaYRAAAAAABwWWZJJkcXcRvMNAIAAAAAAMA/Dk0jAAAAAAAA2GF7\nGgAAAAAAcFkmmWVy0o1gzlqXBSuNAAAAAAAAYIemEQAAAAAAAOywPQ0AAAAAALgs840fzshZ67Jg\npREAAAAAAADs0DQCAAAAAACAHbanAQAAAAAAl2W68XBGzlqXBU0j4CYpOa/rbM4MQzN/MzjPIr9H\nnocq12R2zF5hdzfjF3ReM6UbnmmRYb5ueObGM96GZ0pSWQdlu7mdMjwzM9fNIbke7o75VsURuV4e\neQ3PdGT2bxsLGp4pSTUdlH3dfN7wzP9nG/9XkrS4aMMzPQZPd0iuJHl2Hv7Q5KbO62J4piQVknTx\nkPG/N3v4njE808J0ythstzR3Q/Pwz8D2NAAAAAAAANihaQQAAAAAAAA7bE8DAAAAAAAuy2w2y+yg\ncRVZcda6LFhpBAAAAAAAADs0jQAAAAAAAGCH7WkAAAAAAMBlmWWWSc65DczspHVZsNIIAAAAAAAA\ndmgaAQAAAAAAwA7b0wAAAAAAgMsy3Xg4I2ety4KVRgAAAAAAALBD0wgAAAAAAAB2aBoBAAAAAADA\nDjONAAAAAACAyzLf+OGMnLUuC1YaAQAAAAAAwA5NIwAAAAAAANhhexoAAAAAAHBZJpllctJtYM5a\nlwUrjQAAAAAAAGCHphEAAAAAAADssD0NAAAAAAC4LLPZLLPZObeBOWtdFqw0AgAAAAAAgB2aRgAA\nAAAAALDD9jQAAAAAAOCyzJJMji7iNpx7cxorjQAAAAAAAHALNI3wj7Jx40b5+fnpwoULji4FAAAA\nAACX5hJNo6ioKIWFhSktLc3m+KZNm+Tv76+kpCQHVSaFh4fr3//+9z0/7/Dhwxo8eLDq16+vgIAA\nNWrUSG+++aZ+/vnnbKjywTl8+LD8/Py0d+9em+MTJkyQn5+f/Pz8VLFiRdWrV09RUVE6deqUgyoF\nAAAAAAB34hJNo+HDh+v8+fOaNGmS9dilS5c0ZMgQRUZGqlq1atmS+9cm1YOyY8cOtWrVSocOHdLI\nkSOVkJCgTz/9VBUrVryvBtTN0tPT7Y6ZTCZdv379b133bjz55JNKTEzUmjVr9MEHH2jfvn3q06dP\ntucCAAAAAB5eZklmp/3h3FyiaeTl5aXRo0crLi5OO3fulCTFxMTIy8tLPXv2lCTt379fnTt3VlBQ\nkGrXrq1+/fopNTXVeo0dO3aoY8eOCg4OVrVq1dS2bVvrtSQpIyNDfn5+mjNnjrp3766qVavqo48+\nUlpamqKjo1W3bl0FBASofv36mjBhwm1rDQ8P17vvvqtx48YpODhYderU0bhx42QyZY7lMplMGjRo\nkHx9fTV79mw1bNhQjz/+uCpUqKDu3btr6tSpkm69osdS4/fff29zTkJCgiIiIhQYGKj4+HjNnz9f\nTz31lFavXq3mzZsrICBAKSkpkqT58+frueeeU+XKlfXss8/qq6++ktlstrn+/Pnz1atXL1WtWlWN\nGzfW0qVLrZ9v2rSpJKlly5by8/NThw4drPW5u7vL29tbjz32mGrUqKHWrVsrKSlJV65csZ5z/vx5\n9e/fXzVq1FCVKlXUqVMnJScn3/Hr/9NPP6lt27YKDAxUSEiIRo0apUuXLt3xOQAAAAAA4M5comkk\nSXXq1FF4eLgGDhyo5cuXa8mSJXrvvffk6empU6dOKSIiQpUqVVJ8fLy+/PJLXbx4UT179rQ2RC5f\nvqyWLVtq9uzZmj9/vsqXL6/XX39df/75p03Oxx9/rGeeeUZLlizRK6+8omnTpumHH37QxIkTtWLF\nCn3wwQcqXbr0HWtduHCh8uTJo7lz52rIkCGaOnWqVqxYIUnavXu3Dh48qMjISOXIYf/l8fLyuuf3\nZvz48YqIiNCyZcvUqFEjSdLVq1cVGxurd955R8uWLVOxYsU0e/Zsffjhh+rdu7cSEhLUv39/TZ48\nWXPnzrW53ieffKKmTZvqP//5j5o0aaJBgwbp999/V86cOfX1119LkqZNm6bExER9+OGHt6zp9OnT\n+u677+Tu7i53d3fr8QEDBmjPnj2aPHmyvv76a+XMmVOdO3fWtWvXbnmdvXv3qnPnzmratKkWL16s\njz76SLt379bbb799z+8TAAAAAAD4v5yOLuBBioqKUmJiovr06aN+/frJz89PkjRr1iwFBASob9++\n1nPHjBmj2rVr65dffpG/v7/q1Kljc60RI0Zo+fLlSkxMVPPmza3Hn3/+ebVu3dr68YkTJ+Tr66vq\n1avLzc1NPj4+ql69+h3r9PPzs66A8vX11ddff61Nmzbpueee0+HDhyVJZcuW/Xtvxk3at29vXQFk\nkZ6erpEjR6pChQrWY5MnT9agQYP07LPPSpJKlSqlw4cPa/bs2QoPD7ee16pVK7Vo0UKS1KdPH82Y\nMUPbtm1T8+bN9eijj0qSChYsKG9vb5vM/fv3KygoSCaTSVevXpUkdezYUbly5ZIkJScna+3atZoz\nZ451S+G4cePUoEEDLVu2TC+88ILda4uLi9O//vUvmxVNw4cPV+vWrTVixAgVLFjwnt6r4Ykf39P5\nD8LElLlZn5QduQ5Jlfb/sc1ByY5xINVxM9Uc4ejZXY4uwVARJ2YZn2l4YqaUMzsclOwYV68ecXQJ\nhnrYfq+qeWKR4ZmHDE+8KfvMdgemG+uRwdMdXYKhPLwf3N8Z7lbpn1cZnukM2Y6Q//3/OLoEl2GS\nWSYn3QjmrHVZuFTTKHfu3IqMjNS7776rTp06WY/v2bNHW7ZsUVBQkN1zjhw5In9/f6WmpurDDz/U\n1q1blZqaKpPJpP/+9786ceKEzfkBAQE2H7/wwgvq3LmzmjVrprp16yokJET16tW75SohC0szy6Jo\n0aI6e/asJFlXPj1If61Zkjw8PGzqOH36tE6fPq2hQ4farNLJyMiwWQkk2dbv6empRx99VGfOnMmy\nDl9fX02ePFlpaWlauXKlfvjhB/Xu3dv6+eTkZOXMmVNVqlSxHitQoICefPJJHThw4JbX3L17t44f\nP64lS5ZYj1newyNHjtxz0yi6bi+dPfbHPT3n75iYMle9y7xiWN7NEi7/Znjm/j+2qbz3nZuq2cWU\nDf9vZeVAapLKFcmemWp3cs1kP7vMCEfP7lKpQpUNz43JHWh4ppTZMJpRop3huW9f2214ZsqZHSpT\nuErWJ2aD3y+fMzzz6tUjyp37ccNzS+YrYnim5Ljfq2Z7Gv8eS5kNo60lWhqe+/K1FMMzpcyGkW/h\nqobn7o4y/veMRwZP1+XR7Q3PlSTPzsMNz/TwLqv0P+48xiE7nGjaxfBMKbNhdDjoGcNzCzXKZ3im\nlNkwutgvzNBMt0eLKt+wLwzNhPNzqaaRlDk3J0eOHDZNG5PJpIYNGyoqKsru/CJFMr9B69+/vy5c\nuKAhQ4aoRIkS8vT0VEREhN3g6Lx589p8HBgYqNWrV2vdunXavHmzBgwYoICAAMXFxcnNze2WNebM\nafu2u7m5WWcalSlTRlJmA+WvzaWbWV7fzU2mjIyMW57715qlzAbbzfVZrvPOO+/YNG0s9d3Mw8Pj\ntvXfiYeHh3Xr3pNPPqmUlBS98847dzXc+3bvpdls1iuvvKKICPt/ey9WrFiW1wUAAAAAALfmck2j\n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\n/PHHNXr0aMXGxqpDhw5KTExUSEiIXn75ZSOZk5mZqcGDByswMFBJSUmKi4tTUlKSMd9JkyYpKChI\nvXv3VkpKilJSUuTj42O3hpLGKZKYmKhKlSrpk08+0fjx47Vw4UJt3Lix1O8JAAAAAKD8KrBanfrb\nmZXqHFBsbKxSUlL00ksvKSYmRhaLRZK0dOlSBQYGKjo62ug7ZcoUtWrVSnv27FFAQIBat25tM9ak\nSZO0YcMGpaSkqFu3bkZ79+7d1atXL+NxZmam6tWrp2bNmsnFxUV+fn5q1qyZJMnX11fjxo3T22+/\nrVmzZikwMFDNmzdX9+7d5e/vX+xaIiIi9OSTT0qSXnrpJX300UfasWOHunXrpjVr1ignJ0erVq3S\nPffcI0m6//77jWvnzp2rIUOGqGfPnsZz0dHRmjBhgmJjY0vzUho7tKTCGj5DhgzRkiVLjPbMzEw9\n+eST+tOf/iRJqlOnjtG/atWqkqR77rlHNWrUuGGM9PR0LV++XMHBwTbH85577jljt5IkJSQkqHXr\n1kbsevXq6dChQ1qwYIH69etn9Gvbtq369u0rSRo5cqQWL16s+vXrKzw8XJI0bNgwJSYmKj09XY0a\nNdLSpUvl6+urSZMmycXFRf7+/srOzlZcXJxGjRplJMEqVqxY7DpKGsfT01OSZLFYbNawfPlybd26\nVV26dLnh2DfySsqsm77m95p++BPTY0rSdIdElU6d21dyp3LkYJbjar85Qkb2D46egqn+enyJ+TFN\nj1joTvssnzx3Z92UITNnt6OnYKrwk8tK7nS7Y5oe8X/upJ/N1f6x2TFxHRJVqvuvLxwU2THcaxT/\nt15ZaHww2fSYzhAbKFKqpFHFihU1aNAgxcfHa+DAgUb77t27lZqaqpCQELtrjh49qoCAAGVlZWnG\njBnatm2bsrKyVFBQoIsXLyozM9Omf2BgoM3jnj17KioqSk888YTCwsLUtm1btWnTRq6uhZuj/vKX\nv6hnz55KTU3Vzp07tWnTJs2bN09TpkwxkkLXU5TwkiQPDw9VrVpVZ86ckSTt3btXjRs3NhJG1/rx\nxx+1Z88evffee0ZbQUGBLl26pOzsbFWrVvKvi+TkZC1evFgZGRn67bfflJeXZ6ypaF2vvfaaNm/e\nrJYtW6pTp05q3LhxiePu379fISEhys/PV25urkJDQxUfH2/T59rXOD09XZ07d7Zpa9asmd577z1d\n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\nPD09FRoaqmnTpik/P1+pqamqX7++fHx8bnrNfn5+RsJIknx8fJSdnX3T45TWtesvqV2SevXqpb//\n/e966qmnlJqaqoSEBB08eNCu39KlS7Vq1SplZmbq8uXLunLliu6//36bPg8++KDc3NyMxz4+PjbH\n/A4fPqyZM2dq586dysnJMW53mJmZqeDgYP3000+yWCzy9PQ0rgkKCrKJUZrPiyQ1bNjwlhNGkjQx\n7AVlHztdcsfbZPbhT/XCA71Ni3e1lTk/mB7z5Lm9uq9KI9PjSlI1T6+SO91me099r0Y+D5se92K+\nY+p5HT6zUw/c+5Dpcf9fxSamx5QKE0YL/J41Pe74C9tL7nSbnTq3Tz5V/mR6XEnKvviL6THzco+r\ngoef6XHrV6lpekypMGHUsEazkjveZh+5319ypzIQmpmoVN+IkjveZn0uOyZtdOjMv1Xv3mDT4/44\npmzqlxbn7tEL9eubA0vuWAYKTp4xPWblt1frlxjz79qcsfpKyZ3KQOODydrzYFfT4zbYOsv0mFJh\nwujK6XRzg7pWkPu9dc2NaZKiv0GdkbPOq0iZJ40kyc3NTa6urkbSRio8+vToo48qNjbWrn/16tUl\nSS+//LLOnz+v8ePHy9fXVx4eHoqMjLQp6iwV7i65WlBQkL788kt9/fXX+u677zR69GgFBgZqwYIF\ncnFxUdOmTeXu7q7U1FTjaJpUmPxwd3fXnj17tG3bNpt6RjejQgXbl9XFxcUosF29enV5eXkZu36K\nc/XrVSQvL8+u7UbFua99Xa4WFhamvLw8jR07VmFhYfLx8bFLGq1Zs0ZvvPGGxowZo+DgYHl5eemj\njz7S5s2bbfpdu15JNgXFhw4dqtq1ays+Pl4+Pj5ycXFRt27d7N7H4pTm8yLd+LUAAAAAAAA3p0xr\nGhWncePGOnDggPz8/FS3bl2b77vvvluStGPHDkVGRqpdu3Zq0KCBKlWqZFP4uDheXl7q2rWr4uLi\nNGfOHKWkpBg1fCpVqqSgoCC7pJEkPfzww9q0aZP27t1bbNLIzc1Nbm5uys/Pv6l1u7m5qUuXLlq9\nerVOnjxp9/ylS5eMu35Vq1bN5k5qly5d0uHDh28qXnHziIiI0LZt22yO9l1tx44dCgkJUf/+/RUQ\nEKC6desaR99KKysrS4cPH9awYcPUqlUr+fv768KFCzZJpfr162v//v02dzu7uuC5VLrPCwAAAAAA\nuH0cljSKjIxUTk6OoqOjtWvXLmVkZOjbb7/VhAkTjDtvPfDAA1qzZo3S09O1a9cuRUdHl+ro0fvv\nv6/169crPT1dhw8f1vr161W5cmWbo2ahoaHasGGDzp07p+Dg/23ZbdGihZYsWSKr1WqTTLqWi4uL\natWqpa1bt+r06dN2xbmLExMTIx8fH/Xu3VuJiYk6ePCgjhw5oqSkJPXs2dM4yhYaGqo1a9bo+++/\n14EDBzRu3LibTlIV54UXXtDWrVtveJexevXq6ccff9Q333yjw4cPa9asWUpLS7upGFWrVtU999yj\n5cuX68iRI0pNTdXf//53m11U4eHhslqtmjhxotLT0/Xtt99q/vz5kgpfZ6l0nxcAAAAAAK5VYLU6\n9bczc1jSqGbNmlq2bJkKCgo0aNAgdevWTXFxcapUqZJx3GnKlCk6f/68evTooZiYGD3zzDOqWbPk\n8/533XWX5s+fr169eumpp57SgQMHtGDBApuaOaGhofr111+NekZFWrRooV9//VUWi0VVq1YtNs64\nceO0ZcsWtW/f/oa7da6natWqWrFihf785z/rvffeU0REhPr06aNVq1ZpxIgRRnJr2LBhat68uZ5/\n/nkNGjRIoaGhRiHx28HDw0PVqlW77jE4SerXr586deqkl156SU8//bROnjyp55577qZiuLm5adq0\nadqzZ4+6d++u+Ph4xcTE2Bxp8/Ly0ty5c7Vv3z6Fh4dr6tSpRgHuovemNJ8XAAAAAABw+7hYnb3q\nEu5IGzdu1IsvvqjvvvtOVapUMS0uhbDLFoWwzUEhbHNQCNscFMIuexTCNgeFsMsehbDNQSFsc1AI\n+/Zq/KcwHT3qnHdGvf9+P+3Zl+LoadwQWzTgFFatWqW6deuqZs2a2r9/v6ZMmaLHHnvM1IQRAAAA\nAKD8sUqyyjn3yzjnrP6HpBGcQlZWlt59912dPn1aPj4+evTRRxUTE+PoaQEAAAAAcMciaQSnMHTo\nUA0dOtTR0wAAAAAAAP/lsELYAAAAAAAAcF7sNAIAAAAAAOWWM9/a3lnnVYSdRgAAAAAAALBD0ggA\nAAAAAAB2OJ4GAAAAAADKMausTnsMzFnnVYidRgAAAAAAALBD0ggAAAAAAAB2OJ4GAAAAAADKLet/\nv5yRs86rCDuNAAAAAAAAYIekEQAAAAAAAOxwPA0AAAAAAJRbVqvz3j3NWedVhJ1GAAAAAAAAsEPS\nCAAAAAAAAHZIGgEAAAAAAMAONY0AAAAAAEC5RU2jW8dOIwAAAAAAANghaQQAAAAAAAA7HE8DAAAA\nAADllvW/387IWedVhJ1GAAAAAAAAsMNOI+BgbEoJAAABr0lEQVQq99SsZnrMarVrmB5TkupU9nVM\n3PsdE7eKx90Oietbp5bpMS/nXzE9ZpHadcx/f708q5se04hd2/zYdX7zMz2mJNW53zFxK1+64JC4\ndevWNj2mX2XH/D6QJD8H/KzyqOC49Xo44HevX+5l02MasR3ws9nF+17TYzo0bq6bY+JW9TE9pruf\n4/6d4e5n/nrl6sA/mc2O7eqYz7EZavuZ/3uutJx5bpLkYnX2Ut0AAAAAAAAwHcfTAAf5+eef1aFD\nB/3888+OnoopWG/5xnrLrztprRLrLe9Yb/l1J61VYr3l3Z22Xjg3kkaAg+Tn5+v48ePKz8939FRM\nwXrLN9Zbft1Ja5VYb3nHesuvO2mtEust7+609cK5kTQCAAAAAACAHZJGAAAAAAAAsEPSCAAAAAAA\nAHbcXn311VcdPQngTuXp6anQ0FB5eno6eiqmYL3lG+stv+6ktUqst7xjveXXnbRWifWWd3faeuG8\nXKxWq9XRkwAAAAAAAIBz4XgaAAAAAAAA7JA0AgAAAAAAgB2SRgAAAAAAALBD0ggAAAAAAAB2SBoB\nAAAAAADAzv8HwOKyFMndeWQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 1368x1080 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "492w7vp6psQh",
        "colab_type": "code",
        "outputId": "9cef756c-cfbf-432b-c66c-59be2cfc3d4a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        }
      },
      "source": [
        "X_train_org.describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>DailyRate</th>\n",
              "      <th>DistanceFromHome</th>\n",
              "      <th>HourlyRate</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>MonthlyRate</th>\n",
              "      <th>NumCompaniesWorked</th>\n",
              "      <th>PercentSalaryHike</th>\n",
              "      <th>TotalWorkingYears</th>\n",
              "      <th>TrainingTimesLastYear</th>\n",
              "      <th>YearsAtCompany</th>\n",
              "      <th>YearsInCurrentRole</th>\n",
              "      <th>YearsSinceLastPromotion</th>\n",
              "      <th>YearsWithCurrManager</th>\n",
              "      <th>Education</th>\n",
              "      <th>EnvironmentSatisfaction</th>\n",
              "      <th>Gender</th>\n",
              "      <th>JobInvolvement</th>\n",
              "      <th>JobLevel</th>\n",
              "      <th>JobSatisfaction</th>\n",
              "      <th>OverTime</th>\n",
              "      <th>PerformanceRating</th>\n",
              "      <th>RelationshipSatisfaction</th>\n",
              "      <th>StockOptionLevel</th>\n",
              "      <th>WorkLifeBalance</th>\n",
              "      <th>BusinessTravel_Non-Travel</th>\n",
              "      <th>BusinessTravel_Travel_Frequently</th>\n",
              "      <th>BusinessTravel_Travel_Rarely</th>\n",
              "      <th>Department_Human Resources</th>\n",
              "      <th>Department_Research &amp; Development</th>\n",
              "      <th>Department_Sales</th>\n",
              "      <th>EducationField_Human Resources</th>\n",
              "      <th>EducationField_Life Sciences</th>\n",
              "      <th>EducationField_Marketing</th>\n",
              "      <th>EducationField_Medical</th>\n",
              "      <th>EducationField_Other</th>\n",
              "      <th>EducationField_Technical Degree</th>\n",
              "      <th>JobRole_Healthcare Representative</th>\n",
              "      <th>JobRole_Human Resources</th>\n",
              "      <th>JobRole_Laboratory Technician</th>\n",
              "      <th>JobRole_Manager</th>\n",
              "      <th>JobRole_Manufacturing Director</th>\n",
              "      <th>JobRole_Research Director</th>\n",
              "      <th>JobRole_Research Scientist</th>\n",
              "      <th>JobRole_Sales Executive</th>\n",
              "      <th>JobRole_Sales Representative</th>\n",
              "      <th>MaritalStatus_Divorced</th>\n",
              "      <th>MaritalStatus_Married</th>\n",
              "      <th>MaritalStatus_Single</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "      <td>1102.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>36.840290</td>\n",
              "      <td>799.159710</td>\n",
              "      <td>9.063521</td>\n",
              "      <td>65.312160</td>\n",
              "      <td>6433.647913</td>\n",
              "      <td>14290.242287</td>\n",
              "      <td>2.727768</td>\n",
              "      <td>15.068058</td>\n",
              "      <td>11.153358</td>\n",
              "      <td>2.799456</td>\n",
              "      <td>6.859347</td>\n",
              "      <td>4.154265</td>\n",
              "      <td>2.141561</td>\n",
              "      <td>4.029038</td>\n",
              "      <td>2.931034</td>\n",
              "      <td>2.755898</td>\n",
              "      <td>0.628857</td>\n",
              "      <td>2.740472</td>\n",
              "      <td>2.005445</td>\n",
              "      <td>2.805808</td>\n",
              "      <td>0.259528</td>\n",
              "      <td>3.140653</td>\n",
              "      <td>2.725045</td>\n",
              "      <td>0.754991</td>\n",
              "      <td>2.783122</td>\n",
              "      <td>0.098004</td>\n",
              "      <td>0.173321</td>\n",
              "      <td>0.728675</td>\n",
              "      <td>0.042650</td>\n",
              "      <td>0.673321</td>\n",
              "      <td>0.284029</td>\n",
              "      <td>0.018149</td>\n",
              "      <td>0.447368</td>\n",
              "      <td>0.101633</td>\n",
              "      <td>0.302178</td>\n",
              "      <td>0.045372</td>\n",
              "      <td>0.085299</td>\n",
              "      <td>0.081670</td>\n",
              "      <td>0.033575</td>\n",
              "      <td>0.169691</td>\n",
              "      <td>0.062613</td>\n",
              "      <td>0.089837</td>\n",
              "      <td>0.052632</td>\n",
              "      <td>0.194192</td>\n",
              "      <td>0.262250</td>\n",
              "      <td>0.053539</td>\n",
              "      <td>0.212341</td>\n",
              "      <td>0.479129</td>\n",
              "      <td>0.308530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8.786389</td>\n",
              "      <td>397.736495</td>\n",
              "      <td>7.902652</td>\n",
              "      <td>19.924668</td>\n",
              "      <td>4653.028966</td>\n",
              "      <td>6919.777789</td>\n",
              "      <td>2.494741</td>\n",
              "      <td>3.557992</td>\n",
              "      <td>7.610350</td>\n",
              "      <td>1.219982</td>\n",
              "      <td>5.930202</td>\n",
              "      <td>3.573768</td>\n",
              "      <td>3.171443</td>\n",
              "      <td>3.474975</td>\n",
              "      <td>0.979703</td>\n",
              "      <td>1.072883</td>\n",
              "      <td>0.483330</td>\n",
              "      <td>0.706641</td>\n",
              "      <td>1.101550</td>\n",
              "      <td>1.098444</td>\n",
              "      <td>0.438575</td>\n",
              "      <td>0.347821</td>\n",
              "      <td>1.056827</td>\n",
              "      <td>0.848061</td>\n",
              "      <td>0.693270</td>\n",
              "      <td>0.297455</td>\n",
              "      <td>0.378697</td>\n",
              "      <td>0.444845</td>\n",
              "      <td>0.202158</td>\n",
              "      <td>0.469212</td>\n",
              "      <td>0.451155</td>\n",
              "      <td>0.133550</td>\n",
              "      <td>0.497448</td>\n",
              "      <td>0.302303</td>\n",
              "      <td>0.459410</td>\n",
              "      <td>0.208213</td>\n",
              "      <td>0.279454</td>\n",
              "      <td>0.273985</td>\n",
              "      <td>0.180215</td>\n",
              "      <td>0.375532</td>\n",
              "      <td>0.242376</td>\n",
              "      <td>0.286077</td>\n",
              "      <td>0.223398</td>\n",
              "      <td>0.395757</td>\n",
              "      <td>0.440058</td>\n",
              "      <td>0.225208</td>\n",
              "      <td>0.409151</td>\n",
              "      <td>0.499791</td>\n",
              "      <td>0.462096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>104.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>1009.000000</td>\n",
              "      <td>2094.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>30.000000</td>\n",
              "      <td>469.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>2972.250000</td>\n",
              "      <td>8451.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>36.000000</td>\n",
              "      <td>796.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>4936.000000</td>\n",
              "      <td>14284.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>42.000000</td>\n",
              "      <td>1144.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>82.000000</td>\n",
              "      <td>7975.750000</td>\n",
              "      <td>20076.500000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>60.000000</td>\n",
              "      <td>1498.000000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>19999.000000</td>\n",
              "      <td>26999.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               Age    DailyRate  ...  MaritalStatus_Married  MaritalStatus_Single\n",
              "count  1102.000000  1102.000000  ...            1102.000000           1102.000000\n",
              "mean     36.840290   799.159710  ...               0.479129              0.308530\n",
              "std       8.786389   397.736495  ...               0.499791              0.462096\n",
              "min      18.000000   104.000000  ...               0.000000              0.000000\n",
              "25%      30.000000   469.000000  ...               0.000000              0.000000\n",
              "50%      36.000000   796.000000  ...               0.000000              0.000000\n",
              "75%      42.000000  1144.000000  ...               1.000000              1.000000\n",
              "max      60.000000  1498.000000  ...               1.000000              1.000000\n",
              "\n",
              "[8 rows x 49 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2CX6WIPmpsQk",
        "colab_type": "text"
      },
      "source": [
        "`X_train has has varying range for different features so it is necessary to scale it`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pfl9OuH6psQk",
        "colab_type": "text"
      },
      "source": [
        "### Scale the Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B7Fui0YHpsQl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "X_train = scaler.fit_transform(X_train_org)\n",
        "X_test = scaler.transform(X_test_org)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W7yoNpxFpsQm",
        "colab_type": "text"
      },
      "source": [
        "`MinMaxScaler rescales the data set such that all feature values are in the range [0, 1] while preserving the original\n",
        "distribution.`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tVULSeI5nyBk",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation Strategy"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CwCT2LGjn2ZI",
        "colab_type": "text"
      },
      "source": [
        "The HR is interested to reduce the Attrition in the organization so it's necessary for HR to know which employees have more\n",
        "tendency to leave the organisation. Thus, in this scenario HR would avoid loosing out on an employee who is wrongly classified\n",
        "as not leaving however he is actually leaving. Therefore, using **Confusion Matrix** will be the best evaluation strategy here.\n",
        "\n",
        "Aim will be to reduce false negative that is **Type II error**. So we have to increase recall here."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LbfvJVFvCk2f",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# import warnings filter\n",
        "from warnings import simplefilter\n",
        "# ignore all future warnings\n",
        "simplefilter(action='ignore', category=FutureWarning)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GH7duM5KaijS",
        "colab_type": "text"
      },
      "source": [
        "**Random Forest**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x0oIu9U-Ma9V",
        "colab_type": "code",
        "outputId": "b4d8c2d7-8f21-4daa-a64a-b2f2be468df9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "rnd_clf = RandomForestClassifier(n_jobs=-1, random_state = 0)\n",
        "params_rnd = {'n_estimators': [50, 100, 200,500,1000],\n",
        "              'max_leaf_nodes': [2,5,10,15,20,30] \n",
        "              }\n",
        "rnd_gs = GridSearchCV(rnd_clf, params_rnd, cv=5)\n",
        "rnd_gs.fit(X_train, y_train)\n",
        "rf_best = rnd_gs.best_estimator_\n",
        "print(rnd_gs.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'max_leaf_nodes': 20, 'n_estimators': 50}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wA18planjeZ6",
        "colab_type": "code",
        "outputId": "687711af-ee68-42f4-cce8-a1f508567d19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = rf_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(xgb_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(xgb_best.score(X_test, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.9020\n",
            "Accuracy on test set: 0.8859\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F5dKRi1Pj89w",
        "colab_type": "code",
        "outputId": "b57e1e85-e9cc-40e6-b1d1-ab752c8c4fc4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "from sklearn import metrics\n",
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])\n",
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.1321\n",
            "Precision Score (test): 0.8750\n",
            "F1 Score (test): 0.2295\n",
            "AUC Score (test): 0.5645\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uSJOprH-bFCe",
        "colab_type": "text"
      },
      "source": [
        "**SVC - Linear**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TqFMhCkSXAWu",
        "colab_type": "code",
        "outputId": "738415d2-66fd-4b71-9656-85442090fcd4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "\n",
        "param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100],\n",
        "              'gamma': [0.001, 0.01, 0.1, 1, 10, 100]}\n",
        "grid = GridSearchCV(SVC(kernel='linear'), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "svc_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'C': 1, 'gamma': 0.001}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P2pyA_CvbL4Z",
        "colab_type": "text"
      },
      "source": [
        "**Logistic Regression**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "USkTh7wSXxeT",
        "colab_type": "code",
        "outputId": "0d041127-1957-48c2-bdff-8b60942cb225",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "param_grid = {'C': np.logspace(-3,3,7),\n",
        "              'penalty': ['l1', 'l2']}\n",
        "grid = GridSearchCV(LogisticRegression(), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "log_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'C': 10.0, 'penalty': 'l1'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vFht2RNh2nco",
        "colab_type": "text"
      },
      "source": [
        "`However, from Project 1, l2 and C:10 is a better parameter as observed from graph`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3hopEC_B23cw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "logr_best = LogisticRegression(C=10, penalty = 'l2', random_state=0).fit(X_train,y_train)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yDi1-BFEbO_Z",
        "colab_type": "text"
      },
      "source": [
        "**KNN Classifier**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JN1x7y_HZe6n",
        "colab_type": "code",
        "outputId": "d94d5a9d-b9f9-4ee0-cb50-667bc8559240",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "param_grid = {'n_neighbors': [1,2,3,4,5,6,7,8,9,10]}\n",
        "grid = GridSearchCV(KNeighborsClassifier(), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "knn_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'n_neighbors': 8}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "enANkYcjpsQm",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "\n",
        "# Ensemble Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a2pKuMZcpsQp",
        "colab_type": "text"
      },
      "source": [
        "## Voting Classifier - Hard"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nkUkntJ01LP_",
        "colab_type": "code",
        "outputId": "9eeb1c65-1358-49f9-b374-a2e511de26d1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        }
      },
      "source": [
        "from sklearn.ensemble import VotingClassifier\n",
        "\n",
        "\n",
        "voting_clf = VotingClassifier(\n",
        "\testimators = [('lr', logr_best), ('knn', knn_best), ('rf', rf_best), ('svc',svc_best)], voting = 'hard')\n",
        "voting_clf.fit(X_train, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VotingClassifier(estimators=[('lr',\n",
              "                              LogisticRegression(C=10, class_weight=None,\n",
              "                                                 dual=False, fit_intercept=True,\n",
              "                                                 intercept_scaling=1,\n",
              "                                                 l1_ratio=None, max_iter=100,\n",
              "                                                 multi_class='warn',\n",
              "                                                 n_jobs=None, penalty='l2',\n",
              "                                                 random_state=0, solver='warn',\n",
              "                                                 tol=0.0001, verbose=0,\n",
              "                                                 warm_start=False)),\n",
              "                             ('knn',\n",
              "                              KNeighborsClassifier(algorithm='auto',\n",
              "                                                   leaf_size=30,\n",
              "                                                   metric='minkowski',\n",
              "                                                   metric...\n",
              "                                                     n_estimators=50, n_jobs=-1,\n",
              "                                                     oob_score=False,\n",
              "                                                     random_state=0, verbose=0,\n",
              "                                                     warm_start=False)),\n",
              "                             ('svc',\n",
              "                              SVC(C=1, cache_size=200, class_weight=None,\n",
              "                                  coef0=0.0, decision_function_shape='ovr',\n",
              "                                  degree=3, gamma=0.001, kernel='linear',\n",
              "                                  max_iter=-1, probability=False,\n",
              "                                  random_state=None, shrinking=True, tol=0.001,\n",
              "                                  verbose=False))],\n",
              "                 flatten_transform=True, n_jobs=None, voting='hard',\n",
              "                 weights=None)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qL8F8q-X6DZJ",
        "colab_type": "code",
        "outputId": "4f3f7029-1477-4c68-b34f-e58c5e8c73b3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        }
      },
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "for clf in (logr_best, knn_best, rf_best, svc_best, voting_clf):\n",
        "    clf.fit(X_train, y_train)\n",
        "    y_pred = clf.predict(X_test)\n",
        "    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "LogisticRegression 0.8885869565217391\n",
            "KNeighborsClassifier 0.8586956521739131\n",
            "RandomForestClassifier 0.8722826086956522\n",
            "SVC 0.875\n",
            "VotingClassifier 0.8668478260869565\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mjb__AYkJFj4",
        "colab_type": "code",
        "outputId": "96cb3566-5cb2-4c36-ab6a-80e147944eac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "print(\"Accuracy on training set: {:.4f}\".format(voting_clf.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(voting_clf.score(X_test, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8702\n",
            "Accuracy on test set: 0.8668\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "99S8PYxv7ckl",
        "colab_type": "code",
        "outputId": "4b201934-e3ec-41fc-ce39-96476f54ceb4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[315   0]\n",
            " [ 49   4]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Jk4p4xA18Jys",
        "colab_type": "code",
        "outputId": "878fb2a9-5fd8-43b6-a8d0-da760ca6e910",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn import metrics\n",
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.0755\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ysS5X1YTJJEi",
        "colab_type": "code",
        "outputId": "6c5ed606-218c-4a0a-f534-b3dd184a6479",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 1.0000\n",
            "F1 Score (test): 0.1404\n",
            "AUC Score (test): 0.5377\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9qFHULr4_OX0",
        "colab_type": "text"
      },
      "source": [
        "## Voting Classifier - Soft"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mu0eIP7-_RU7",
        "colab_type": "code",
        "outputId": "e93cecb4-6c3a-40f2-be45-dc1bb4b39eff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        }
      },
      "source": [
        "svm_clf = SVC(kernel='linear', C=1, gamma=0.001, probability=True, random_state = 0)\n",
        "\n",
        "voting_clf = VotingClassifier(\n",
        "\testimators = [('lr', logr_best), ('knn', knn_best),('rf', rf_best), ('svc',svm_clf)],\n",
        "\tvoting = 'soft')\n",
        "voting_clf.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "for clf in (logr_best, knn_best, rf_best, svm_clf, voting_clf):\n",
        "    clf.fit(X_train, y_train)\n",
        "    y_pred = clf.predict(X_test)\n",
        "    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "LogisticRegression 0.8885869565217391\n",
            "KNeighborsClassifier 0.8586956521739131\n",
            "RandomForestClassifier 0.8722826086956522\n",
            "SVC 0.875\n",
            "VotingClassifier 0.875\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xvd9hTHYIgi-",
        "colab_type": "code",
        "outputId": "c8c00ea7-5d0b-45c3-9e3e-4d125072a6b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "print(\"Accuracy on training set: {:.4f}\".format(voting_clf.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(voting_clf.score(X_test, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8884\n",
            "Accuracy on test set: 0.8750\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HSB7HXM4BJ1O",
        "colab_type": "code",
        "outputId": "85462b4a-cb98-407f-ceb5-d200ea6342db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[315   0]\n",
            " [ 46   7]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wY1OF5_hC99N",
        "colab_type": "code",
        "outputId": "d4303ae9-74a8-48d5-f534-cf9ca7b29211",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.1321\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XtDzme2fDDTK",
        "colab_type": "code",
        "outputId": "08dbf56a-bdb6-4ca1-cef4-c7c2e4afc549",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 1.0000\n",
            "F1 Score (test): 0.2333\n",
            "AUC Score (test): 0.5660\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5v_o5C6uJ-MB",
        "colab_type": "text"
      },
      "source": [
        "## Bagging with Decision Tree"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7-pjdjc7zrEo",
        "colab_type": "text"
      },
      "source": [
        "**Decision Tree**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T0v4La5Zztci",
        "colab_type": "code",
        "outputId": "7eef8afa-612d-4b9e-c540-8d3756633340",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "dt_clf = DecisionTreeClassifier(random_state = 0)\n",
        "param_grid = {'min_samples_split' : range(10,500,20),\n",
        "              'max_depth': range(1,20)}\n",
        "grid = GridSearchCV(dt_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_org, y_train)\n",
        "dt_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'max_depth': 3, 'min_samples_split': 50}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NvqVv4Pq2bRJ",
        "colab_type": "code",
        "outputId": "eeb971a7-da5f-4ab5-97c0-2796291cb87c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.ensemble import BaggingClassifier\n",
        "\n",
        "bag_clf = BaggingClassifier(dt_best, bootstrap=True, n_jobs=-1, oob_score = True, random_state=0)\n",
        "\n",
        "\n",
        "param_grid = {'n_estimators' : [13,15,50,100],\n",
        "              'max_samples': [10,50,100,500,600]}\n",
        "grid = GridSearchCV(bag_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "bag_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'max_samples': 500, 'n_estimators': 13}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sr1OZf-i5mn4",
        "colab_type": "code",
        "outputId": "23205917-1d23-40c2-f7dc-6874b4175b74",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = bag_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(bag_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(bag_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8557\n",
            "Accuracy on test set: 0.8614\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lu0_1zOO58HQ",
        "colab_type": "code",
        "outputId": "6f438f79-bad7-48e9-c62a-c78ba56b8429",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[315   0]\n",
            " [ 51   2]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "70ntlkW19TRo",
        "colab_type": "code",
        "outputId": "f3921527-6b81-480a-ba87-70fdbf8fc6ae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.0377\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eRCJlAbc4J1-",
        "colab_type": "code",
        "outputId": "7346eaec-d9fd-4b29-e20a-abe88c772161",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 1.0000\n",
            "F1 Score (test): 0.0727\n",
            "AUC Score (test): 0.5189\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwMpxzJW6SlQ",
        "colab_type": "text"
      },
      "source": [
        "## Bagging with Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5DoYoAWolqyd",
        "colab_type": "code",
        "outputId": "29d5917d-9953-4d93-d341-4ca555244efc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "bag_clf = BaggingClassifier(logr_best, bootstrap=True, n_jobs=-1, oob_score = True, random_state=0)\n",
        "\n",
        "\n",
        "param_grid = {'n_estimators' : [50,100,200,500],\n",
        "              'max_samples': [10,50,100,500,600]}\n",
        "grid = GridSearchCV(bag_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "bag_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'max_samples': 500, 'n_estimators': 50}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "fe058277-133d-40b0-879a-1606dea9439b",
        "id": "nSWF25oPmWeK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = bag_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(bag_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(bag_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8866\n",
            "Accuracy on test set: 0.8886\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "8c3c4005-5d97-40af-c015-608bb8df5bc2",
        "id": "aaim7hRZmWeM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[309   6]\n",
            " [ 35  18]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "cac4a34e-54a7-4e7f-d709-91c23fb43438",
        "id": "Z0xefEBZmWeN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3396\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "b45d22d6-61ff-45c5-fde2-7cb25b3127f8",
        "id": "CN-SGfKemWeP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.7500\n",
            "F1 Score (test): 0.4675\n",
            "AUC Score (test): 0.6603\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CB76FzunpPRM",
        "colab_type": "text"
      },
      "source": [
        "## Pasting with Decision Tree"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "572a1155-4c3c-491e-b209-0144adc993f4",
        "id": "b1buK0VSsPSp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "bag_clf = BaggingClassifier(dt_best, bootstrap=False, n_jobs=-1, random_state=0)\n",
        "\n",
        "\n",
        "param_grid = {'n_estimators' : [13,15,50,100],\n",
        "              'max_samples': [10,50,100,500,600]}\n",
        "grid = GridSearchCV(bag_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "bag_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'max_samples': 100, 'n_estimators': 13}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "1c21dd37-1736-485e-b8e2-7fb4d7b2a834",
        "id": "gcQeXrPvsPSs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = bag_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(bag_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(bag_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8530\n",
            "Accuracy on test set: 0.8614\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "ec2eee0c-d3aa-4bbf-b197-c99d41e30af9",
        "id": "-TvmdXe_sPSt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[315   0]\n",
            " [ 51   2]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "37d43b3a-ddd7-4d41-a694-e5632cc65285",
        "id": "1978YiQ2sPSu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.0377\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "2d323258-ce43-4e78-e410-6702bc282d0b",
        "id": "hNwEHpDqsPSw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 1.0000\n",
            "F1 Score (test): 0.0727\n",
            "AUC Score (test): 0.5189\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "R6s3Fnt0sPSz"
      },
      "source": [
        "## Pasting with Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "db5fd2f6-ab79-47ed-f545-c34abf5ee660",
        "id": "CI-1ynxysPSz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "bag_clf = BaggingClassifier(logr_best, bootstrap=False, n_jobs=-1, random_state=0)\n",
        "\n",
        "\n",
        "param_grid = {'n_estimators' : [50,100,200,500],\n",
        "              'max_samples': [10,50,100,500,600]}\n",
        "grid = GridSearchCV(bag_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "bag_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'max_samples': 500, 'n_estimators': 500}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "64842565-0581-4614-8a99-668d3849a848",
        "id": "wDPob6xpsPS1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = bag_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(bag_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(bag_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8866\n",
            "Accuracy on test set: 0.8886\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "c2456cee-0d55-400f-ddf6-62d76b6e4b29",
        "id": "JQuREZzmsPS2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[307   8]\n",
            " [ 33  20]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "02705886-1082-46d5-a4f0-adc35b0d9916",
        "id": "hvsOrC9AsPS3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3774\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "dd48d7a1-4b0b-45b1-ffaf-50e5434976e5",
        "id": "MF7F4NLdsPS4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.7143\n",
            "F1 Score (test): 0.4938\n",
            "AUC Score (test): 0.6760\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "xxd7olgpsPS6"
      },
      "source": [
        "## AdaBoosting with Decision Tree"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "iFGAtqL_sPS6",
        "outputId": "3f2d199d-c0ec-4861-8c87-70b4ac5dfd4d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "\n",
        "ada_clf = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), algorithm=\"SAMME.R\", random_state=0)\n",
        "\n",
        "param_grid = {'n_estimators' : [50,100,200,500],\n",
        "              'learning_rate': [0.001,0.1, 0.2, 1]}\n",
        "\n",
        "grid = GridSearchCV(ada_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "ada_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'learning_rate': 0.1, 'n_estimators': 500}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Byg9n_x01Ytm",
        "colab_type": "code",
        "outputId": "fb7d83e3-ca4c-4731-e2b8-e2a73ed6cf14",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = ada_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(ada_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(ada_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.9011\n",
            "Accuracy on test set: 0.8859\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "4e2cf5b8-fdce-47cf-f474-87ac0b9315ea",
        "id": "ji5XZgkL5afl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[312   3]\n",
            " [ 39  14]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "a8b5a4b2-616d-4950-d911-6c7cca508a59",
        "id": "cLJefFYp5afp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.2642\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "8c55a83e-f443-460a-9ae2-d80b86e5d300",
        "id": "uSFvs6Rb5afr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8235\n",
            "F1 Score (test): 0.4000\n",
            "AUC Score (test): 0.6273\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rL_x4VbDL7KU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2qmLJaxAOCJy",
        "colab_type": "code",
        "outputId": "e6942547-40db-4e1a-92eb-cf8ed2230e8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 763
        }
      },
      "source": [
        "y_list = ada_best.feature_importances_\n",
        "y_pos = np.arange(len(y_list))\n",
        "features = feature_columns\n",
        "fig ,ax= plt.subplots(figsize = (13,13))\n",
        "plt.barh(y_pos, y_list, align='center', alpha=0.4)\n",
        "plt.yticks(y_pos, features)\n",
        "plt.draw()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA8kAAALqCAYAAAAGgxa1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzs3XucnVV99v/PJAOBkHCegkhbTnIZ\nsSYoQY1SwOLPw4MIbfCxHCRQDxwqioKAUMUKVhQUkSJQMQGEYME+FikSTiJoOB8CEbkUJLUWhSQi\nEALBTOb3x1obNjtz2BNCZpK53q9XXs6+17rXWvc9K5jvXqeOnp4eIiIiIiIiIgJGDXUDIiIiIiIi\nIoaLBMkRERERERERVYLkiIiIiIiIiCpBckRERERERESVIDkiIiIiIiKiSpAcERERERERUSVIjoiI\niIiIiKgSJEdERERERERUCZIjIiIiIiIiqgTJEREREREREVWC5IiIiIiIiIiqc6gbEBG9GgNMBn4H\ndA9xWyIiIiIiVlejgVcBdwBL2rkhQXLE8DQZuHmoGxERERERsYbYBfhpOxkTJEcMT78DeOKJZ1i2\nrGeo2xLDxCabjGPhwkVD3YwYRtInolX6RLRKn4hmI7E/jBrVwUYbrQf139ftSJAcMTx1Ayxb1pMg\nOV4i/SFapU9Eq/SJaJU+Ec1GcH9oewljNu6KiIiIiIiIqBIkR0RERERERFQJkiMiIiIiIiKqBMkR\nERERERERVYLkiIiIiIiIiCpBckRERERERESVIDkiIiIiIiKiSpAcERERERERUSVIjoiIiIiIiKgS\nJEdERERERERUCZIjIiIiIiIiqgTJEREREREREVWC5IiIiIiIiIgqQXJERERERERElSA5IiIiIiIi\nokqQHBEREREREVElSI6IiIiIiIioEiRHREREREREVAmSIyIiIiIiIqoEyRERERERERFVguSIiIiI\niIiIKkFyRERERERERJUgOSIiIiIiIqJKkBwRERERERFRJUiOiIiIiIiIqBIkR0RERERERFQJkiMi\nIiIiIiKqBMkRERERERERVYLkiIiIiIiIiCpBckRERERERESVIDkiIiIiIiKiSpAcERERERERUSVI\njoiIiIiIiKgSJEdERERERERUHT09PUPdhohY3lbAI0PdiIiIiIiINcTWwLx2Mna+su2IiJdj4cJF\n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\nmZmZmZlZ4iLZzMzMzMzMLHGRbGZmZmZmZpa4SDYzMzMzMzNLXCSbmZmZmZmZJS6SzczMzMzMzBIX\nyWZmZmZmZmaJi2QzMzMzMzOzxEWymZmZmZmZWeIi2czMzMzMzCxxkWxmZmZmZmaWuEg2MzMzMzMz\nS1wkm5mZmZmZmSVVpQ7AzDpUCTBiREWp47Ay45ywQs4JK+ScsELOCcsbbvmQu9/Knh5T0draOjDR\nmNmG2BtYUOogzMzMzMyGiH2A3/ekoYtks/JUDTQAzwPNJY7FzMzMzGywqgS2BB4CmnpygItkMzMz\nMzMzs8QLd5mZmZmZmZklLpLNzMzMzMzMEhfJZmZmZmZmZomLZDMzMzMzM7PERbKZmZmZmZlZ4iLZ\nzMzMzMzMLHGRbGZmZmZmZpZUlToAs+FG0g7AVcB44EXguIj4U0GbSmAm8B6gFZgeET/qbp8NTv2Q\nE2cBRwPNwL+Ar0TE7cW7A+tvG5oTuTYC/ghcEhGnFyN263/9kQ+SjgLOAirS/mkR8bfi3IH1t374\nd2Nz4ErgjcBI4G7g0xGxvmg3Yf2qhzlxAHAesDNwUf7fBX++fD33JJsV36XADyJiB+AHwGUdtDkW\nmARsD+wJnCNpYg/22eC0oTnxB6AhInYBTgSukzRmwKO2gbShOdH2gecy4FcDHq0NtA3KB0m7A+cA\n+0fETsDewKqBD9sG0Ib+HfEV4LH078YuwG7A4QMdtA2onuTEn4GPAud3sM+fL3NcJJsVUfrmdlfg\nmrTpGmBXSfUFTT8IXBERLRGxguxD7pE92GeDTH/kRETcHhGNqd1Ssp6i8QMevA2Ifvp7AuAM4Gbg\niQEO2QZQP+XD54ALIuIFgIhYFRFrBz56Gwj9lBOtQJ2kEUA1MAr464AHbwOipzkREU9GxGKgoxED\n/nyZ4yLZrLjeCPw1IpoB0p/Ppe152wD/L/f6L7k2Xe2zwac/ciLvOOCpiHh2AGK14tjgnJA0BTgQ\nuHDAo7WB1h9/R7wVeLOkeyQtkvRVSRUDHLcNnP7IiW8COwDPAy8At0fEvQMZtA2onuZEV/z5MsdF\nspnZECHpnWQffD5U6lisdCSNBC4HTmn7wGTDXiXZkNr9gXcCBwEfLmlEVmpHko082hLYGniHpCNK\nG5JZ+XCRbFZczwBbp7mCbXMGt0rb8/4CvCn3eptcm6722eDTHzmBpD2BnwKHRUQMaMQ20DY0J7YE\ntgPmSVoOfBY4WdLlAxu2DZD++nfjhohoiojVwK+BPQY0ahtI/ZETnwJ+lobWriLLif0GNGobSD3N\nia7482WOi2SzIoqIvwOLea2n70PAH9Pcj7w5ZB9qR6T5JIcBN/Rgnw0y/ZETkhqA64AjImJRcSK3\ngbKhORERf4mIzSJiYkRMBGaQzTP7WJFuwfpRP/278XPgAEkVaaTBu4ElAx+9DYR+yomnyVYxRtIo\nYBrwyEDHbgOjFznRFX++zHGRbFZ8pwCfkvQE2Te5pwBImpdWIAW4mmwFwj8BDwDfiIine7DPBqcN\nzYlLgDHAZZIWp5+di3oH1t82NCdsaNnQfLgW+Dvwf2QfpB8Ffly88G0AbGhOfBbYR9Iyspx4Arii\niPFb/+s2JyTtLelZ4PPAxyU9K+nAdLz/TcmpaG1tLXUMZmZmZmZmZmXBPclmZmZmZmZmiYtkMzMz\nMzMzs8RFspmZmZmZmVniItnMzMzMzMwscZFsZmZmZmZmlrhINjMzMzMzM0tcJJuZmZmZmZklLpLN\nzMzMzMzMkv8PHCw0q4Eo4BQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 936x936 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FsQtG4YZ5kLr",
        "colab_type": "text"
      },
      "source": [
        "## AdaBoosting with Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0FnBljJo5eJx",
        "colab_type": "code",
        "outputId": "ef6e8f08-9749-42f3-b876-87377fd26675",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        }
      },
      "source": [
        "ada_clf = AdaBoostClassifier(base_estimator= rf_best, n_estimators=20, learning_rate=0.01, algorithm=\"SAMME.R\", random_state=0)\n",
        "\n",
        "ada_clf.fit(X_train,y_train)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AdaBoostClassifier(algorithm='SAMME.R',\n",
              "                   base_estimator=RandomForestClassifier(bootstrap=True,\n",
              "                                                         class_weight=None,\n",
              "                                                         criterion='gini',\n",
              "                                                         max_depth=None,\n",
              "                                                         max_features='auto',\n",
              "                                                         max_leaf_nodes=20,\n",
              "                                                         min_impurity_decrease=0.0,\n",
              "                                                         min_impurity_split=None,\n",
              "                                                         min_samples_leaf=1,\n",
              "                                                         min_samples_split=2,\n",
              "                                                         min_weight_fraction_leaf=0.0,\n",
              "                                                         n_estimators=50,\n",
              "                                                         n_jobs=-1,\n",
              "                                                         oob_score=False,\n",
              "                                                         random_state=0,\n",
              "                                                         verbose=0,\n",
              "                                                         warm_start=False),\n",
              "                   learning_rate=0.01, n_estimators=20, random_state=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Xow-R-u54n9",
        "colab_type": "text"
      },
      "source": [
        "`Low learning rate and estimators have been used to overcome Overfitting problem`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "0d8b641b-c4fd-4cc7-ac06-5f0096b148d9",
        "id": "BzT-03H_elHV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = ada_clf.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(ada_clf.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(ada_clf.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8766\n",
            "Accuracy on test set: 0.8641\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "5cbad41e-be6a-44d5-ec25-754e8d63c8fd",
        "id": "wqR9GSdhelHZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[315   0]\n",
            " [ 50   3]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9e78ff9a-0775-4f92-8ac5-42f952e17d1c",
        "id": "vy6Ai9Z9elHb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.0566\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "da657a83-1766-4d7c-ed72-723f14c3bbd7",
        "id": "K2c3OXAoelHd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 1.0000\n",
            "F1 Score (test): 0.1071\n",
            "AUC Score (test): 0.5283\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wiDC1tDMj4X6",
        "colab_type": "text"
      },
      "source": [
        "## Gradient Boosting with Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EE-QiKnPrwph",
        "colab_type": "code",
        "outputId": "75326bdb-48ce-4102-af6a-e51c8bda2177",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "gbrt_clf = GradientBoostingClassifier(loss='deviance', random_state=0)\n",
        "\n",
        "param_grid = {'n_estimators' : [1,2,3,10,50],\n",
        "              'learning_rate': [0.001,0.1, 0.2, 1],\n",
        "              'max_depth': [1,2,3]}\n",
        "\n",
        "grid = GridSearchCV(gbrt_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "gbrt_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'learning_rate': 1, 'max_depth': 1, 'n_estimators': 50}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "c557a0a2-a16d-49d7-e44e-e5763fdd5ce5",
        "id": "hahA8kAcs2Y7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = gbrt_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(gbrt_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(gbrt_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.9047\n",
            "Accuracy on test set: 0.8832\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "f149ca7d-7b49-453e-8a5b-ca47d0217996",
        "id": "KrgLDhEQs2Y9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[307   8]\n",
            " [ 35  18]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "048f8bb5-9467-442b-f78c-f3d33af7fd07",
        "id": "-lXMHhx2s2Y-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3396\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "37740727-c6f5-4fd6-fd2b-b2daaf5b1d9f",
        "id": "kswOaO6Js2ZD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.6923\n",
            "F1 Score (test): 0.4557\n",
            "AUC Score (test): 0.6571\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R05SAEPetA8v",
        "colab_type": "text"
      },
      "source": [
        "## XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sinGqv6DvqOJ",
        "colab_type": "code",
        "outputId": "031e4048-442c-407e-f3fa-13a635973747",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "!pip3 install xgboost\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.6/dist-packages (0.90)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from xgboost) (1.16.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from xgboost) (1.3.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hEKejTJFv-1m",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import xgboost as xgb"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rkqiJYJCue51",
        "colab_type": "code",
        "outputId": "9e99d13e-be1d-4495-d57c-a6d2dad8a3b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "xgb_clf = xgb.XGBClassifier(objective='binary:logistic', random_state=0)\n",
        "\n",
        "param_grid = {'n_estimators' : [10,50,100,150,200,250,500],\n",
        "              'learning_rate': [0.14,0.15,0.16,0.2,0.25, 1],\n",
        "              'max_depth': [1,2,3]}\n",
        "\n",
        "grid = GridSearchCV(xgb_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train, y_train)\n",
        "xgb_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'learning_rate': 0.25, 'max_depth': 1, 'n_estimators': 150}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "6ec14b58-3927-4294-876f-5b784d4cc887",
        "id": "SZ4ukN8Rx3uG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = xgb_best.predict(X_test)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(xgb_best.score(X_train, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(xgb_best.score(X_test, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.9020\n",
            "Accuracy on test set: 0.8859\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "ae7afe11-f5e4-46fd-8671-302e5c8b634f",
        "id": "2bKyvbxBx3uK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[312   3]\n",
            " [ 39  14]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "f84e9487-502e-4086-e0c5-a8ebbf25cd58",
        "id": "oRK8z17Wx3uL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.2642\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "3914ee25-794f-4096-973d-fdd3034544e2",
        "id": "1rZDqG1Hy5Xf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8235\n",
            "F1 Score (test): 0.4000\n",
            "AUC Score (test): 0.6273\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7AHVpQ7e6WX4",
        "colab_type": "text"
      },
      "source": [
        "## PCA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b4vD448g6X31",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.decomposition import PCA"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BKg4cYScZmOU",
        "colab_type": "code",
        "outputId": "7f0c4855-50eb-45c1-e460-ef81b00ff306",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        }
      },
      "source": [
        "pca = PCA().fit(X_train)\n",
        "plt.figure()\n",
        "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
        "plt.xlabel('Number of Components')\n",
        "plt.ylabel('Variance (%)') \n",
        "plt.title('Component Variation')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xdj2xTyfaDoq",
        "colab_type": "text"
      },
      "source": [
        "`From the above graph, it can be observed that if 38 components are kept then nearly 99% variance is preserved`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y5xvUciEZuoZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pca = PCA(n_components=38)\n",
        "X_train_reduced = pca.fit_transform(X_train)\n",
        "X_test_reduced = pca.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AQYfZz7RBFrX",
        "colab_type": "code",
        "outputId": "51075f50-64d3-45e4-b37e-b5e000d79669",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "pca.n_components_"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "38"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vkJSmjg1BOyo",
        "colab_type": "code",
        "outputId": "f9325362-4fe6-4466-ec66-fec42aff7997",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "X_train.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1102, 49)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MIFY8WkCCmJd",
        "colab_type": "text"
      },
      "source": [
        "`Features have been reduced from 49 to 38`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YjbeTmlgCrqq",
        "colab_type": "text"
      },
      "source": [
        "### PCA - Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "71BC9gFmDL1A",
        "colab_type": "code",
        "outputId": "c356e902-70a5-437f-f305-7822cce984c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "param_grid = {'C': np.logspace(-3,3,7),\n",
        "              'penalty': ['l1', 'l2']}\n",
        "grid = GridSearchCV(LogisticRegression(), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_reduced, y_train)\n",
        "log_pca_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'C': 1.0, 'penalty': 'l2'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "ccdb075d-03af-4bf6-aa81-f6d778911e65",
        "id": "a6ZKa0caDlhk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = log_pca_best.predict(X_test_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(log_pca_best.score(X_train_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(log_pca_best.score(X_test_reduced, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8857\n",
            "Accuracy on test set: 0.8995\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "1dd35469-296d-4627-f55e-b6b632a9175d",
        "id": "bSaHhzyFDlhm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[312   3]\n",
            " [ 34  19]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "eda1b013-d4ea-4a0c-c3b8-736b3c861a3a",
        "id": "6MtuCh6GDlho",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3585\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "6df3fac3-afc7-482f-eba4-982c873b14d8",
        "id": "A-VbbIhADlhq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8636\n",
            "F1 Score (test): 0.5067\n",
            "AUC Score (test): 0.6745\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0vawrr6DFJTJ",
        "colab_type": "text"
      },
      "source": [
        "### PCA - KNN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "91Kdj0iQFf7y",
        "colab_type": "code",
        "outputId": "f73fe818-4aa9-4fbf-fec1-2608317b5f69",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "param_grid = {'n_neighbors': [1,2,3,4,5,6,7,8,9,10]}\n",
        "grid = GridSearchCV(KNeighborsClassifier(), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_reduced, y_train)\n",
        "knn_pca_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'n_neighbors': 8}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "b7cc3143-229b-45c2-be77-379bf9a83011",
        "id": "rHEWqH4GFv6p",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = knn_pca_best.predict(X_test_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(knn_pca_best.score(X_train_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(knn_pca_best.score(X_test_reduced, y_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8575\n",
            "Accuracy on test set: 0.8587\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "65b0501f-e555-4b04-87c3-0a9d2eedc656",
        "id": "7fDn-n-tFv6q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[314   1]\n",
            " [ 51   2]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9745afa7-a477-4470-d716-56b8144c5db6",
        "id": "1tBiAIWhFv6r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.0377\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "e2586490-58c0-40de-8e0f-f06e4d6f4f94",
        "id": "x08LJA2sFv6s",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.6667\n",
            "F1 Score (test): 0.0714\n",
            "AUC Score (test): 0.5173\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gK8FFyrtF3-j",
        "colab_type": "text"
      },
      "source": [
        "### PCA - LinearSVC"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3xsM4syXGFAi",
        "colab_type": "code",
        "outputId": "33323171-f7da-419d-d548-76167058e6b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "lr_pca = LinearSVC(random_state=0)\n",
        "lr_pca.fit(X_train_reduced, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
              "          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
              "          multi_class='ovr', penalty='l2', random_state=0, tol=0.0001,\n",
              "          verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "9d45dc87-9732-45dc-fc70-c17c30971064",
        "id": "g7ITeQE2HhmC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = lr_pca.predict(X_test_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(lr_pca.score(X_train_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(lr_pca.score(X_test_reduced, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8866\n",
            "Accuracy on test set: 0.8913\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "c8106d13-80b6-4b3b-c9b5-16a02b1a4edc",
        "id": "Swo1b-32HhmE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[312   3]\n",
            " [ 37  16]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "ac68a030-6e91-445e-e1c3-900cd2578e5e",
        "id": "855WgSQ8HhmF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3019\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "d82a0e26-5c72-4ac9-99cc-6ee1bf147323",
        "id": "2nDqKlVuHhmG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8421\n",
            "F1 Score (test): 0.4444\n",
            "AUC Score (test): 0.6462\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VD-75ssQGvve",
        "colab_type": "text"
      },
      "source": [
        "### PCA - SVC  - RBF"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TLlVjAPLH_-5",
        "colab_type": "code",
        "outputId": "00b08abf-060e-4521-e356-cbb195d9db83",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "\n",
        "param_grid = {'C': [0.001,0.01,0.1,1,10,100],\n",
        "              'gamma': [0.001,0.01,0.1,1,10,100]}\n",
        "grid = GridSearchCV(SVC(kernel='rbf',random_state=0), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_reduced, y_train)\n",
        "rbf_pca_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'C': 100, 'gamma': 0.01}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "e0e75729-2620-424d-b5f9-f4aab8c4d38e",
        "id": "XQfA6dRRJIXh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = rbf_pca_best.predict(X_test_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(rbf_pca_best.score(X_train_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(rbf_pca_best.score(X_test_reduced, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.9211\n",
            "Accuracy on test set: 0.8913\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "a8c76b8d-cc60-4bf6-e75c-be7491d8eedf",
        "id": "cEv29ZcjJIXi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[311   4]\n",
            " [ 36  17]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "80d2d9bf-2c34-497f-cad5-f98bbda7680c",
        "id": "rcUzpfPnJIXk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3208\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "e35060cf-8ff9-4bac-f843-27f4423c80ee",
        "id": "d9GU7tdgJIXn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8095\n",
            "F1 Score (test): 0.4595\n",
            "AUC Score (test): 0.6540\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QX8oFYZtJPbh",
        "colab_type": "text"
      },
      "source": [
        "### PCA - SVC - Polynomial"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "a9b484eb-610d-4d7c-df7d-743199bafaad",
        "id": "tf_E4NvvJj5i",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "param_grid = {'degree' : [1,2,3,4,5,6,7],\n",
        "              'C' : [0.001,0.01,0.1,1,10,100]}\n",
        "grid = GridSearchCV(SVC(kernel='poly',random_state=0), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_reduced, y_train)\n",
        "poly_pca_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'C': 100, 'degree': 1}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "5d99a9c2-76c4-4469-fa2a-cc1cf66a6e27",
        "id": "AWtI12xTJj5k",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = poly_pca_best.predict(X_test_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(poly_pca_best.score(X_train_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(poly_pca_best.score(X_test_reduced, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8866\n",
            "Accuracy on test set: 0.8940\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "aa070d7a-a007-4549-f0ea-3259814c6c83",
        "id": "aHll7TO9Jj5n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[311   4]\n",
            " [ 35  18]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "976e9668-0fc2-4134-e2ab-09bd879cedca",
        "id": "9JThaaO4Jj5r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3396\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "80fa2e30-d9fe-4cbb-fc10-1eb6f7bcbe0f",
        "id": "z6vqvOWSJj5t",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8182\n",
            "F1 Score (test): 0.4800\n",
            "AUC Score (test): 0.6635\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6o330y20KCJq",
        "colab_type": "text"
      },
      "source": [
        "### PCA - SVC - Linear"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "41gpRNjkKgI2",
        "colab_type": "code",
        "outputId": "e4279927-587a-43c9-fd60-a6193d26195f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100],\n",
        "              'gamma': [0.001, 0.01, 0.1, 1, 10, 100]}\n",
        "grid = GridSearchCV(SVC(kernel='linear', random_state=0), param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_reduced, y_train)\n",
        "svc_pca_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'C': 10, 'gamma': 0.001}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "84ac4e2b-029c-4462-bfee-5004d92e9e6d",
        "id": "CutG1yQ3Kut3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = svc_pca_best.predict(X_test_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(svc_pca_best.score(X_train_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(svc_pca_best.score(X_test_reduced, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8857\n",
            "Accuracy on test set: 0.8967\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "d6785a90-77b5-4fc9-8d81-35cc3a4382b6",
        "id": "xrUzr1AfKut5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[311   4]\n",
            " [ 34  19]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "8db0bcd5-de5e-4205-cad4-6afadcf6cffe",
        "id": "4nV-ZzeOKut9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.3585\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "a1676003-9eaf-4d11-bcec-633d9a27580e",
        "id": "E9rls-nEKuuB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.8261\n",
            "F1 Score (test): 0.5000\n",
            "AUC Score (test): 0.6729\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JVgz-0lPLE_g",
        "colab_type": "text"
      },
      "source": [
        "### PCA - Decision Tree"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BjDSZbZbLXHt",
        "colab_type": "code",
        "outputId": "f1df4264-b1e7-41f7-9d5f-004ec8bc0a57",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "X_train_org_reduced = pca.fit_transform(X_train_org)\n",
        "X_test_org_reduced = pca.transform(X_test_org)\n",
        "\n",
        "\n",
        "dt_clf = DecisionTreeClassifier(random_state = 0)\n",
        "param_grid = {'min_samples_split' : range(10,500,20),\n",
        "              'max_depth': range(1,20)}\n",
        "grid = GridSearchCV(dt_clf, param_grid=param_grid, cv=5)\n",
        "grid.fit(X_train_org_reduced, y_train)\n",
        "dt_pca_best = grid.best_estimator_\n",
        "print(\"Best parameters: \", grid.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best parameters:  {'max_depth': 1, 'min_samples_split': 10}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "0e6f2280-4270-4706-dad7-bb7d4d0ee6e0",
        "id": "kJ1RhTZEOfMc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "y_pred = dt_pca_best.predict(X_test_org_reduced)\n",
        "print(\"Accuracy on training set: {:.4f}\".format(dt_pca_best.score(X_train_org_reduced, y_train)))\n",
        "print(\"Accuracy on test set: {:.4f}\".format(dt_pca_best.score(X_test_org_reduced, y_test)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training set: 0.8503\n",
            "Accuracy on test set: 0.8560\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "54a6a0df-2d7c-4464-bab3-6963101ae134",
        "id": "QhnIb2_xOfMg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "print(\"Confusion matrix:\\n{}\".format(confusion))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix:\n",
            "[[315   0]\n",
            " [ 53   0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "f640ab05-1b17-4bb0-c495-adf6f4dea527",
        "id": "2ZpjzmpfOfMj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        }
      },
      "source": [
        "precisions, recall, f1_score, _ = metrics.precision_recall_fscore_support(y_test, y_pred)\n",
        "print(\"Recall Score (test): %.4f\" % recall[1:])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Recall Score (test): 0.0000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/metrics/classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
            "  'precision', 'predicted', average, warn_for)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "outputId": "617de624-6aa2-4540-a49c-1f5c3b33b870",
        "id": "JnrvcgR4OfMk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "print(\"Precision Score (test): %.4f\" % precisions[1:])\n",
        "print(\"F1 Score (test): %.4f\" % f1_score[1:])\n",
        "print(\"AUC Score (test): %.4f\" % metrics.roc_auc_score(y_test, y_pred))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Precision Score (test): 0.0000\n",
            "F1 Score (test): 0.0000\n",
            "AUC Score (test): 0.5000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D4OEnujq4Ebr",
        "colab_type": "text"
      },
      "source": [
        "*Models show a mix of high accuracy, marginal underfit and overfit values*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qUrf_HRpxhsQ",
        "colab_type": "code",
        "outputId": "919f3c2b-a14c-4f32-f884-304684717721",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        }
      },
      "source": [
        "table = { 'Logistic Regression': [0.3774, 0.3585], 'KNN': [0.0943, 0.0377], 'LinearSVC': [0.2830, 0.3019], 'Kernel-RBF': [0.0110, 0.3208],\n",
        "          'Kernel-Polynomial': [0.2830, 0.3396], 'Kernel-Linear': [0.3396, 0.3585], 'Decision Tree': [0.0566, 0]}\n",
        "\n",
        "dtable = pd.DataFrame(table, index= ['Recall without PCA', 'Recall with PCA'])\n",
        "\n",
        "dtable"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Logistic Regression</th>\n",
              "      <th>KNN</th>\n",
              "      <th>LinearSVC</th>\n",
              "      <th>Kernel-RBF</th>\n",
              "      <th>Kernel-Polynomial</th>\n",
              "      <th>Kernel-Linear</th>\n",
              "      <th>Decision Tree</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Recall without PCA</th>\n",
              "      <td>0.3774</td>\n",
              "      <td>0.0943</td>\n",
              "      <td>0.2830</td>\n",
              "      <td>0.0110</td>\n",
              "      <td>0.2830</td>\n",
              "      <td>0.3396</td>\n",
              "      <td>0.0566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Recall with PCA</th>\n",
              "      <td>0.3585</td>\n",
              "      <td>0.0377</td>\n",
              "      <td>0.3019</td>\n",
              "      <td>0.3208</td>\n",
              "      <td>0.3396</td>\n",
              "      <td>0.3585</td>\n",
              "      <td>0.0000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    Logistic Regression     KNN  ...  Kernel-Linear  Decision Tree\n",
              "Recall without PCA               0.3774  0.0943  ...         0.3396         0.0566\n",
              "Recall with PCA                  0.3585  0.0377  ...         0.3585         0.0000\n",
              "\n",
              "[2 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "21jpgB2-3KMO",
        "colab_type": "text"
      },
      "source": [
        "*SVM models have shown an increase in recall score whereas other models have slightly dropped*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UopFK9qQUkMW",
        "colab_type": "text"
      },
      "source": [
        "## Deep Learning Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8ie5aGCyp-yk",
        "colab_type": "code",
        "outputId": "264e3a9c-dd5f-4972-8639-74419131b32d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "from keras.optimizers import SGD\n",
        "from keras.utils import np_utils"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F6AsxeRjW99b",
        "colab_type": "text"
      },
      "source": [
        "**Re-shaping target train and test data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_THO4NxmXd1R",
        "colab_type": "code",
        "outputId": "d13f8bc8-dce7-4048-c1ab-40a628074a81",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "\n",
        "print(\"Shape before one-hot encoding: \", y_train.shape)\n",
        "Y_train = pd.get_dummies(y_train)\n",
        "Y_test = pd.get_dummies(y_test)\n",
        "print(\"Shape after one-hot encoding: \", Y_train.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shape before one-hot encoding:  (1102,)\n",
            "Shape after one-hot encoding:  (1102, 2)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "abql873wIVua",
        "colab_type": "code",
        "outputId": "ebb8a721-9c4e-4166-eb2d-94737d0856c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 107
        }
      },
      "source": [
        "# step 1: build the model\n",
        "model = Sequential()\n",
        "#input layer\n",
        "model.add(Dense(200, input_dim = 49, activation='relu'))\n",
        "#hidden layer\n",
        "model.add(Dense(50, activation = 'relu'))\n",
        "#output layer\n",
        "model.add(Dense(2, activation = 'softmax'))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING: Logging before flag parsing goes to stderr.\n",
            "W0804 21:05:48.864849 139821701154688 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Call initializer instance with the dtype argument instead of passing it to the constructor\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mqtHqvs6KSj8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# step 2: compile the model\n",
        "model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JFcYoLQ9KYRv",
        "colab_type": "code",
        "outputId": "a6c7311b-aa3f-4554-8610-e8131b20062b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        }
      },
      "source": [
        "# step 3: train the model\n",
        "model.fit(X_train, Y_train, batch_size= 128, epochs=10)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "1102/1102 [==============================] - 1s 675us/sample - loss: 0.5315 - acc: 0.7650\n",
            "Epoch 2/10\n",
            "1102/1102 [==============================] - 0s 22us/sample - loss: 0.4170 - acc: 0.8503\n",
            "Epoch 3/10\n",
            "1102/1102 [==============================] - 0s 21us/sample - loss: 0.3932 - acc: 0.8503\n",
            "Epoch 4/10\n",
            "1102/1102 [==============================] - 0s 21us/sample - loss: 0.3775 - acc: 0.8503\n",
            "Epoch 5/10\n",
            "1102/1102 [==============================] - 0s 20us/sample - loss: 0.3593 - acc: 0.8530\n",
            "Epoch 6/10\n",
            "1102/1102 [==============================] - 0s 22us/sample - loss: 0.3444 - acc: 0.8584\n",
            "Epoch 7/10\n",
            "1102/1102 [==============================] - 0s 21us/sample - loss: 0.3283 - acc: 0.8639\n",
            "Epoch 8/10\n",
            "1102/1102 [==============================] - 0s 24us/sample - loss: 0.3145 - acc: 0.8721\n",
            "Epoch 9/10\n",
            "1102/1102 [==============================] - 0s 23us/sample - loss: 0.3046 - acc: 0.8757\n",
            "Epoch 10/10\n",
            "1102/1102 [==============================] - 0s 23us/sample - loss: 0.2976 - acc: 0.8893\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f2a3cb5bc88>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IHYFBr_cKbWM",
        "colab_type": "code",
        "outputId": "25485ce1-00ff-4f13-aa9d-42df644e0056",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        }
      },
      "source": [
        "# Step 4: Model evaluation\n",
        "loss_and_metrics = model.evaluate(X_test, Y_test)\n",
        "\n",
        "print(\"Test Loss\", loss_and_metrics[0])\n",
        "print(\"Test Accuracy\", loss_and_metrics[1])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "368/368 [==============================] - 0s 110us/sample - loss: 0.3060 - acc: 0.8804\n",
            "Test Loss 0.3060207975947339\n",
            "Test Accuracy 0.8804348\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MVI94wIjLdpc",
        "colab_type": "code",
        "outputId": "db594f2d-7a6c-44d2-a7d6-e4d3766caff0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "predicted_classes = model.predict_classes(X_test)\n",
        "\n",
        "correct_indices = np.nonzero(predicted_classes == y_test)[0]\n",
        "incorrect_indices = np.nonzero(predicted_classes != y_test)[0]\n",
        "print(len(correct_indices),\" classified correctly\")\n",
        "print(len(incorrect_indices),\" classified incorrectly\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "324  classified correctly\n",
            "44  classified incorrectly\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cnqIb5dkL2wI",
        "colab_type": "text"
      },
      "source": [
        "## Summary - Best Models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NRwzW0FciEni",
        "colab_type": "text"
      },
      "source": [
        "### 1. Pasting with Logistic Regression\n",
        "\n",
        "\n",
        "**Best parameters**:  {'max_samples': 500, 'n_estimators': 500}\n",
        "\n",
        "**Accuracy on training set**: 0.8866\n",
        "\n",
        "**Accuracy on test set**: 0.8886\n",
        "\n",
        "**Confusion matrix**:\n",
        "[[307   8]\n",
        " [ 33  20]]\n",
        " \n",
        " **Recall Score**: 0.3774\n",
        " \n",
        "**Precision Score**: 0.7143\n",
        "**F1 Score**: 0.4938\n",
        "**AUC Score**: 0.6760"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mDslq7mBkcJZ",
        "colab_type": "text"
      },
      "source": [
        "### 2. PCA with SVM Kernel - Linear\n",
        "\n",
        "\n",
        "**Best parameters**: {'C': 10, 'gamma': 0.001}\n",
        "\n",
        "**Accuracy on training set** :0.8857\n",
        "\n",
        "**Accuracy on test set**: 0.8967\n",
        "\n",
        "**Confusion matrix**:\n",
        "[[311   4]\n",
        " [ 34  19]]\n",
        " \n",
        "**Recall Score**: 0.3585\n",
        " \n",
        "**Precision Score**: 0.8261\n",
        "**F1 Score**: 0.5000\n",
        "**AUC Score**: 0.6729"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "02D4yleznrvo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}